{
  "language": "Solidity",
  "sources": {
    "apps/avai/src/contracts/Bank.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport './interfaces/IStablecoin.sol';\n\ncontract Bank is\n  Initializable,\n  ERC721Upgradeable,\n  ERC721EnumerableUpgradeable,\n  ReentrancyGuardUpgradeable,\n  AccessControlUpgradeable\n{\n  bytes32 public constant TREASURY_ROLE = keccak256('TREASURY_ROLE');\n  using SafeERC20 for IERC20Metadata;\n  using SafeERC20 for IStablecoin;\n  using CountersUpgradeable for CountersUpgradeable.Counter;\n  CountersUpgradeable.Counter private _userVaultIds;\n  /**\n   * Set all of these upon initalization\n   */\n  uint256 public minimumCollateralPercentage;\n  uint256 public debtCeiling;\n  uint256 public closingFee;\n  uint256 public openingFee;\n  uint256 public tokenPeg;\n  uint256 public totalDebt;\n  // For liquidation\n  uint256 public debtRatio;\n  uint256 public gainRatio;\n  mapping(address => uint256) public tokenDebt;\n\n  // Chainlink price source\n  AggregatorV3Interface public priceSource;\n  // Token used as collateral\n  IERC20Metadata public token;\n  // Token used as debt\n  IStablecoin internal stablecoin;\n\n  // Address that corresponds to liquidater\n  address public stabilityPool;\n  // address that corresponds to gateway, if there is one\n  address public gateway;\n  // Vault that corresponds to the treasury\n  uint256 public treasury;\n\n  // Vault information\n  mapping(uint256 => bool) private vaultExistence;\n  mapping(uint256 => uint256) public vaultCollateral;\n  mapping(uint256 => uint256) public vaultDebt;\n\n  // Minimum debt\n  uint256 public minimumDebt;\n\n  // Pausing minting AVAI for a bank if (for example) exploits occur or for deprecation purposes\n  bool public mintingPaused;\n\n  // Events for general vault operations\n  event CreateVault(uint256 vaultID, address creator);\n  event DestroyVault(uint256 vaultID);\n  event TransferVault(uint256 vaultID, address from, address to);\n\n  // Buying out a vault event\n  event LiquidateVault(\n    uint256 vaultID,\n    address owner,\n    address buyer,\n    uint256 amountPaid,\n    uint256 tokenExtract,\n    uint256 closingFee\n  );\n\n  // Events for collateral operations\n  event DepositCollateral(uint256 vaultID, uint256 amount);\n  event WithdrawCollateral(uint256 vaultID, uint256 amount);\n\n  // Events for token operations\n  event BorrowToken(uint256 vaultID, uint256 amount);\n  event PayBackToken(uint256 vaultID, uint256 amount, uint256 closingFee);\n\n  // Bank Operations\n  event GetPaid(uint256 amount, address user);\n  event ChangeGainRatio(uint256 newGainRatio);\n  event ChangeDebtRatio(uint256 newDebtRatio);\n  event NewPeg(uint256 newPew);\n  event NewDebtCeiling(uint256 newDebtCeiling);\n  event NewClosingFee(uint256 newClosingFee);\n  event NewOpeningFee(uint256 newOpeningFee);\n  event NewMinimumDebt(uint256 newMinimumDebt);\n  event NewGateway(address newGateway);\n  event NewStabilityPools(address newStabilityPool);\n  event NewPriceSource(address newPriceSource);\n  event NewTreasury(uint256 newTreasury);\n  event BankPaused(bool mintingPaused);\n\n  // Lets begin!\n  function initialize(\n    uint256 minimumCollateralPercentage_,\n    address priceSource_,\n    string memory name_,\n    string memory symbol_,\n    address token_\n  ) public initializer {\n    // Initializations\n    __Context_init_unchained();\n    __ERC165_init_unchained();\n    __ERC721_init_unchained(name_, symbol_);\n    __ERC721Enumerable_init_unchained();\n    __ReentrancyGuard_init_unchained();\n    __AccessControl_init_unchained();\n    assert(priceSource_ != address(0));\n    assert(minimumCollateralPercentage_ >= 100);\n    //Initial settings!\n    debtCeiling = 10e18; // 10 dollars\n    closingFee = 75; // 0.75%\n    openingFee = 0; // 0.0%\n    tokenPeg = 1e8; // $1\n    debtRatio = 2; // 50%\n    gainRatio = 11; // /10 so 1.1, or 10%\n    // Initially, will deploy later\n    stabilityPool = address(0);\n    gateway = address(0);\n    priceSource = AggregatorV3Interface(priceSource_);\n\n    token = IERC20Metadata(token_);\n    stablecoin = IStablecoin(msg.sender);\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _setupRole(TREASURY_ROLE, msg.sender);\n    _setRoleAdmin(TREASURY_ROLE, TREASURY_ROLE);\n\n    minimumCollateralPercentage = minimumCollateralPercentage_;\n  }\n\n  /**\n   * @dev Only vault owner can do anything with this modifier\n   */\n  modifier onlyVaultOwner(uint256 vaultID) {\n    require(vaultExistence[vaultID], 'Vault does not exist');\n    // Either owner of vault or gateway for AVAX.\n    require(\n      ownerOf(vaultID) == msg.sender || msg.sender == gateway,\n      'Vault is not owned by you'\n    );\n    _;\n  }\n  /**\n   * @dev Only liquidater can do anything with this modifier (if address === 0, then all users can liquidate)\n   */\n  modifier onlyLiquidater() {\n    require(\n      stabilityPool == address(0) || msg.sender == stabilityPool,\n      'buyRiskyVault disabled for public'\n    );\n    _;\n  }\n\n  /**\n   * @dev Only gateway allowed, or user if its not WAVAX.\n   */\n  modifier onlyUser(address user) {\n    require(\n      msg.sender == user || msg.sender == gateway,\n      'Cannot get paid if not yours'\n    );\n    _;\n  }\n\n  /**\n   * @dev For borrowing only\n   */\n  modifier mintingNotPaused() {\n    require(\n      !mintingPaused,\n      'Minting for this bank is paused. Deposits, payments, and withdrawals are all still functional'\n    );\n    _;\n  }\n\n  /**\n   * @dev allows checking if vault exists or not\n   */\n  function vaultExists(uint256 vaultID) public view returns (bool) {\n    return vaultExistence[vaultID];\n  }\n\n  /**\n   * @dev sets the gain ratio\n   */\n  function setGainRatio(uint256 gainRatio_) external onlyRole(TREASURY_ROLE) {\n    require(\n      ((1000 * gainRatio_) / debtRatio) * (10000 + closingFee) < 10000**2\n    );\n    gainRatio = gainRatio_;\n    emit ChangeGainRatio(gainRatio_);\n  }\n\n  /**\n   * @dev sets the debt ratio\n   */\n  function setDebtRatio(uint256 debtRatio_) external onlyRole(TREASURY_ROLE) {\n    require(\n      ((1000 * gainRatio) / debtRatio_) * (10000 + closingFee) < 10000**2\n    );\n    debtRatio = debtRatio_;\n    emit ChangeDebtRatio(debtRatio_);\n  }\n\n  /**\n   * @dev sets the minimum debt\n   */\n  function setMinimumDebt(uint256 minimumDebt_)\n    external\n    onlyRole(TREASURY_ROLE)\n  {\n    require(minimumDebt_ > 0, 'Minimum debt cannot be zero');\n    require(\n      minimumDebt < debtCeiling,\n      'Minimum debt cannot be greater than debt ceiling'\n    );\n    minimumDebt = minimumDebt_;\n    emit NewMinimumDebt(minimumDebt);\n  }\n\n  /**\n   * @dev Set the debt ceiling for this vault\n   */\n  function setDebtCeiling(uint256 debtCeiling_)\n    external\n    onlyRole(TREASURY_ROLE)\n  {\n    require(\n      debtCeiling <= debtCeiling_,\n      'setCeiling: Must be over the amount of current debt ceiling.'\n    );\n    debtCeiling = debtCeiling_;\n    emit NewDebtCeiling(debtCeiling_);\n  }\n\n  /**\n   * @dev Set the price source for this vault\n   */\n  function setPriceSource(address priceSource_)\n    external\n    onlyRole(TREASURY_ROLE)\n  {\n    require(priceSource_ != address(0), 'Price source cannot be zero address');\n    priceSource = AggregatorV3Interface(priceSource_);\n    emit NewPriceSource(priceSource_);\n  }\n\n  /**\n   * @dev Set the token peg for this vault\n   */\n  function setTokenPeg(uint256 tokenPeg_) external onlyRole(TREASURY_ROLE) {\n    require(tokenPeg_ > 0, 'Peg cannot be zero');\n    tokenPeg = tokenPeg_;\n    emit NewPeg(tokenPeg_);\n  }\n\n  /**\n   * @dev Set the stability pool (liquidator) for this vault\n   */\n  function setStabilityPool(address stabilityPool_)\n    external\n    onlyRole(TREASURY_ROLE)\n  {\n    require(\n      stabilityPool_ != address(0),\n      'Stability pool cannot be zero address'\n    );\n    require(\n      Address.isContract(stabilityPool_),\n      'Must be a contract to be the stability pool.'\n    );\n    stabilityPool = stabilityPool_;\n    emit NewStabilityPools(stabilityPool_);\n  }\n\n  /**\n   * @dev Set the WAVAX gateway for this vault if it needs one\n   */\n  function setGateway(address gateway_) external onlyRole(TREASURY_ROLE) {\n    require(gateway_ != address(0), 'Gateway cannot be zero address');\n    require(\n      Address.isContract(gateway_),\n      'Must be a contract to be the gateway.'\n    );\n    gateway = gateway_;\n    emit NewGateway(gateway_);\n  }\n\n  /**\n   * @dev Set the closing fee for this vault\n   */\n  function setClosingFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\n    require(amount <= 250, 'Closing fee cannot be above 1%');\n    require(((1000 * gainRatio) / debtRatio) * (10000 + amount) < 10000**2);\n    closingFee = amount;\n    emit NewClosingFee(amount);\n  }\n\n  /**\n   * @dev Set the opening fee for this vault\n   */\n  function setOpeningFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\n    openingFee = amount;\n    emit NewOpeningFee(amount);\n  }\n\n  /**\n   * @dev Set the treasury vault for this vault (vault that gets all the fees)\n   */\n  function setTreasury(uint256 treasury_) external onlyRole(TREASURY_ROLE) {\n    require(vaultExistence[treasury_], 'Vault does not exist');\n    treasury = treasury_;\n  }\n\n  /**\n   * @dev Pauses the bank minting capabalities.\n   */\n  function setMintingPaused(bool paused_) external onlyRole(TREASURY_ROLE) {\n    require(\n      paused_ == !mintingPaused,\n      'Minting paused already set to this value.'\n    );\n    mintingPaused = paused_;\n  }\n\n  /**\n    @dev returns the chainlink pricefeed price\n  */\n  function getPriceSource() public view returns (uint256) {\n    // And get the latest round data\n    (, int256 price, , , ) = priceSource.latestRoundData();\n    require(price >= 0, 'Chainlink returned a negative price');\n\n    return uint256(price);\n  }\n\n  /**\n    @dev returns the peg \n  */\n  function getPricePeg() public view returns (uint256) {\n    return tokenPeg;\n  }\n\n  /**\n   * @dev returns the current debt and collateral\n   *\n   * Requirements:\n   *\n   * - Token price cannot be zero\n   * - PEG (i.e. usdc) price cannot be zero\n   */\n  function calculateCollateralProperties(uint256 collateral, uint256 debt)\n    internal\n    view\n    returns (uint256, uint256)\n  {\n    require(getPriceSource() != 0, 'Price must be above 0');\n    require(getPricePeg() != 0, 'Peg must be above 0');\n\n    // Value of collateral on avalanche network\n    uint256 collateralValue = collateral * getPriceSource();\n\n    // Get the current debt in our token (i.e. usdc)\n    uint256 debtValue = debt * getPricePeg();\n\n    // Multiple collateral by 100\n    uint256 collateralValueTimes100 = collateralValue * 100;\n\n    return (collateralValueTimes100, debtValue);\n  }\n\n  /**\n   * @dev Checks if the current collateral is valid\n   */\n  function isValidCollateral(uint256 collateral, uint256 debt)\n    internal\n    view\n    returns (bool)\n  {\n    (\n      uint256 collateralValueTimes100,\n      uint256 debtValue\n    ) = calculateCollateralProperties(collateral, debt);\n\n    require(debtValue >= 0, 'Debt must be greater than zero');\n\n    // Get current ratio of debt\n    uint256 collateralPercentage = (collateralValueTimes100 *\n      (10**(18 - token.decimals()))) / debtValue;\n    // and check if it's above 150%\n    return collateralPercentage >= minimumCollateralPercentage;\n  }\n\n  /**\n   * @dev Create a vault for interacting with the platform\n   *\n   * Emits a CreateVault event\n   */\n  function createVault() external {\n    // Increment ID\n    _userVaultIds.increment();\n    // Assign ID to vault\n    uint256 newVaultId = _userVaultIds.current();\n\n    vaultExistence[newVaultId] = true;\n\n    emit CreateVault(newVaultId, msg.sender);\n    // mint erc721 vault (vaultId)\n    _mint(msg.sender, newVaultId);\n  }\n\n  function vaultCounts() external view returns (uint256) {\n    return _userVaultIds.current();\n  }\n\n  /**\n   * @dev User can destroy a vault. Will return all collateral upon destroying.\n   *\n   * Emits a DestroyVault event\n   *\n   * Requirements:\n   *\n   * - User must have paid off all outstanding debt first\n   */\n  function destroyVault(uint256 vaultID)\n    external\n    virtual\n    onlyVaultOwner(vaultID)\n    nonReentrant\n  {\n    require(vaultDebt[vaultID] == 0, 'Vault as outstanding debt');\n\n    uint256 collateral = vaultCollateral[vaultID];\n\n    _burn(vaultID);\n    delete vaultExistence[vaultID];\n    delete vaultCollateral[vaultID];\n    delete vaultDebt[vaultID];\n\n    if (collateral != 0) {\n      token.safeTransfer(msg.sender, collateral);\n    }\n\n    emit DestroyVault(vaultID);\n  }\n\n  /**\n   * @dev user can transfer vault to another address\n   *\n   * Emits TransferVault event\n   */\n  function transferVault(uint256 vaultID, address to)\n    external\n    onlyVaultOwner(vaultID)\n  {\n    // burn erc721 (vaultId)\n    _burn(vaultID);\n    // mint erc721 (vaultId)\n    _mint(to, vaultID);\n\n    emit TransferVault(vaultID, msg.sender, to);\n  }\n\n  /**\n   * @dev ALlows vault owner to deposit ERC20 collateral\n   *\n   * Emits Deposit Collateral event\n   *\n   */\n  function depositCollateral(uint256 vaultID, uint256 amount)\n    external\n    onlyVaultOwner(vaultID)\n  {\n    token.safeTransferFrom(msg.sender, address(this), amount);\n\n    uint256 newCollateral = vaultCollateral[vaultID] + amount;\n\n    assert(newCollateral >= vaultCollateral[vaultID]);\n\n    vaultCollateral[vaultID] = newCollateral;\n\n    emit DepositCollateral(vaultID, amount);\n  }\n\n  /**\n   * @dev Lets a vault owner borrow stablecoin against collateral\n   *\n   * Requirements:\n   * - Vault type must exist\n   * - Vault must exist\n   * - Must borrow greater than 0 stablecoin\n   * - Must be below the debt ceiling when borrowing\n   * - Must maintain minimum collateral percentage\n   *\n   * Emits BorrowToken event\n   */\n  function borrowToken(uint256 vaultID, uint256 amount)\n    external\n    onlyVaultOwner(vaultID)\n    nonReentrant\n    mintingNotPaused\n  {\n    require(amount > 0, 'Must borrow non-zero amount');\n    require(\n      totalDebt + amount <= debtCeiling,\n      'Cannot mint over debt ceiling.'\n    );\n\n    uint256 newDebt = vaultDebt[vaultID] + amount;\n\n    require(\n      isValidCollateral(vaultCollateral[vaultID], newDebt),\n      'Borrow would put vault below minimum collateral percentage'\n    );\n\n    require(\n      newDebt >= minimumDebt,\n      'Borrow needs to be larger than the minimum debt'\n    );\n\n    // Mint stable coin for the user\n    _addVaultDebt(vaultID, amount);\n    // Should have minter role\n    stablecoin.mint(msg.sender, amount);\n    emit BorrowToken(vaultID, amount);\n  }\n\n  /**\n   * @dev allows vault owner to withdraw the collateral\n   *\n   * Requirements:\n   * - Withdraw amount is less than or equal to current collateral\n   * - Collateral withdrawal amount does not put debt below minimum collateral\n   *\n   * Emits WithdrawCollateral event\n   */\n  function withdrawCollateral(uint256 vaultID, uint256 amount)\n    external\n    onlyVaultOwner(vaultID)\n    nonReentrant\n  {\n    require(\n      vaultCollateral[vaultID] >= amount,\n      'Vault does not have enough collateral'\n    );\n\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\n\n    if (vaultDebt[vaultID] != 0) {\n      require(\n        isValidCollateral(newCollateral, vaultDebt[vaultID]),\n        'Withdrawal would put vault below minimum collateral percentage'\n      );\n    }\n\n    vaultCollateral[vaultID] = newCollateral;\n\n    token.safeTransfer(msg.sender, amount);\n\n    emit WithdrawCollateral(vaultID, amount);\n  }\n\n  /**\n   * @dev Pay back the stablecoin to reduce debt\n   *\n   * Requirements:\n   * - User must have enough balance to repay `amount`\n   * - Cannot pay back more than the required debt. `amount` must be less than debt.\n   */\n  function payBackToken(uint256 vaultID, uint256 amount)\n    external\n    onlyVaultOwner(vaultID)\n    nonReentrant\n  {\n    require(\n      stablecoin.balanceOf(msg.sender) >= amount,\n      'Token balance too low'\n    );\n    require(\n      vaultDebt[vaultID] >= amount,\n      'Vault debt less than amount to pay back'\n    );\n\n    // Closing fee calculation\n    uint256 _closingFee = ((amount * closingFee) * getPricePeg()) /\n      (getPriceSource() * 10000) /\n      (10**(18 - token.decimals()));\n\n    _subVaultDebt(vaultID, amount);\n    _subVaultCollateral(vaultID, _closingFee);\n    _addVaultCollateralTreasury(_closingFee);\n\n    // Burns the stablecoin\n    stablecoin.burn(msg.sender, amount);\n\n    emit PayBackToken(vaultID, amount, _closingFee);\n  }\n\n  /*************\n   * Liquidation functions\n   ************** */\n\n  /**\n   * @dev pays the user\n   * Returns the ERC20 token that was liquidated\n   */\n  function getPaid(address user) external nonReentrant onlyUser(user) {\n    require(tokenDebt[user] != 0, 'No liquidations associated with account.');\n    uint256 amount = tokenDebt[user];\n    // Set first in case nonReentrant fails somehow\n    tokenDebt[user] = 0;\n    token.safeTransfer(msg.sender, amount);\n    emit GetPaid(amount, msg.sender);\n  }\n\n  /**\n   * @dev checks if the vault can be liquidated\n   */\n  function checkLiquidation(uint256 vaultId_) external view returns (bool) {\n    require(vaultExistence[vaultId_], 'Vault must exist');\n    (\n      uint256 collateralValueTimes100,\n      uint256 debtValue\n    ) = calculateCollateralProperties(\n        vaultCollateral[vaultId_],\n        vaultDebt[vaultId_]\n      );\n\n    require(debtValue > 0, 'Cannot have zero debt');\n\n    uint256 collateralPercentage = (collateralValueTimes100 *\n      (10**(18 - token.decimals()))) / debtValue;\n\n    if (collateralPercentage < minimumCollateralPercentage) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @dev checks cost of liquidating\n   */\n  function checkCost(uint256 vaultId_) public view returns (uint256) {\n    require(vaultExistence[vaultId_], 'Vault must exist');\n    (, uint256 debtValue) = calculateCollateralProperties(\n      vaultCollateral[vaultId_],\n      vaultDebt[vaultId_]\n    );\n    debtValue = debtValue / tokenPeg;\n\n    return debtValue / debtRatio;\n  }\n\n  /**\n   * @dev checks how much token gets extract\n   */\n  function checkExtract(uint256 vaultId_) public view returns (uint256) {\n    require(vaultExistence[vaultId_], 'Vault must exist');\n    (, uint256 debtValue) = calculateCollateralProperties(\n      vaultCollateral[vaultId_],\n      vaultDebt[vaultId_]\n    );\n\n    uint256 tokenExtract = (debtValue * gainRatio) /\n      (10 * getPriceSource() * debtRatio) /\n      (10**(18 - token.decimals()));\n\n    return tokenExtract;\n  }\n\n  /**\n   * @dev allows liquidator to buy out a risky vault\n   *\n   * Requirements:\n   * - Vault id must exist\n   * - Vault must be below minimum collateral percentage\n   * - User must have enough of the token to pay vault off\n   *\n   * Emits BuyRiskyVault event\n   */\n  function liquidateVault(uint256 vaultID_)\n    external\n    onlyLiquidater\n    nonReentrant\n  {\n    require(vaultExistence[vaultID_], 'Vault does not exist');\n    (\n      uint256 collateralValueTimes100,\n      uint256 debtValue\n    ) = calculateCollateralProperties(\n        vaultCollateral[vaultID_],\n        vaultDebt[vaultID_]\n      );\n\n    // Make sure user has debt\n    require(debtValue > 0, 'Vault has no debt');\n\n    uint256 collateralPercentage = (collateralValueTimes100 *\n      (10**(18 - token.decimals()))) / debtValue;\n\n    require(\n      collateralPercentage < minimumCollateralPercentage,\n      'Vault is not below minimum collateral percentage'\n    );\n\n    uint256 tokenExtract = checkExtract(vaultID_);\n    uint256 halfDebt = checkCost(vaultID_);\n    require(\n      stablecoin.balanceOf(msg.sender) >= halfDebt,\n      'Token balance too low to pay off outstanding debt'\n    );\n\n    stablecoin.burn(msg.sender, halfDebt);\n\n    vaultDebt[vaultID_] -= halfDebt;\n\n    uint256 _closingFee = (halfDebt * closingFee * getPricePeg()) /\n      (getPriceSource() * 10000) /\n      (10**(18 - token.decimals()));\n\n    vaultCollateral[vaultID_] -= (_closingFee + tokenExtract);\n    vaultCollateral[treasury] += _closingFee;\n\n    tokenDebt[msg.sender] += tokenExtract;\n\n    _subFromTotalDebt(halfDebt);\n\n    emit LiquidateVault(\n      vaultID_,\n      ownerOf(vaultID_),\n      msg.sender,\n      halfDebt,\n      tokenExtract,\n      _closingFee\n    );\n  }\n\n  /**\n   * @dev Adds to the vault collateral\n   *\n   */\n  function _addVaultCollateralTreasury(uint256 amount) internal {\n    uint256 newCollateral = vaultCollateral[treasury] + amount;\n    assert(newCollateral >= vaultCollateral[treasury]);\n\n    // Adjust and save it\n    vaultCollateral[treasury] = newCollateral;\n  }\n\n  /**\n   * @dev subtracts from the vault collateral\n   *\n   * Requirements:\n   * - Must be less than or equal to current collateral\n   */\n\n  function _subVaultCollateral(uint256 vaultID, uint256 amount) internal {\n    require(\n      amount <= vaultCollateral[vaultID],\n      'Cannot remove more than the deposited collateral'\n    );\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\n\n    assert(newCollateral <= vaultCollateral[vaultID]);\n\n    // Adjust and save it\n    vaultCollateral[vaultID] = newCollateral;\n  }\n\n  /**\n   * @dev Adds debt to the vault\n   *\n   * Requirements:\n   * - new user debt cannot be above debt ceiling\n   */\n  function _addVaultDebt(uint256 vaultID, uint256 amount) internal {\n    uint256 newTotalDebt = amount + totalDebt;\n\n    assert(newTotalDebt >= totalDebt);\n    require(\n      newTotalDebt <= debtCeiling,\n      'Cannot exceed debt ceiling for this vault'\n    );\n\n    uint256 userNewDebt = amount + vaultDebt[vaultID];\n    assert(userNewDebt >= vaultDebt[vaultID]);\n\n    _addToTotalDebt(amount);\n\n    vaultDebt[vaultID] = userNewDebt;\n  }\n\n  /**\n   * @dev Subs debt to the vault\n   *\n   * Requirements:\n   * - user cannot remove more than total debt\n   * - user cannot remove more than their total debt\n   */\n  function _subVaultDebt(uint256 vaultID, uint256 amount) internal {\n    require(totalDebt >= amount, 'Cannot get rid of more debt than exists.');\n\n    require(\n      vaultDebt[vaultID] >= amount,\n      'Cannot get rid of more debt than user has'\n    );\n\n    uint256 newTotalDebt = totalDebt - amount;\n    assert(newTotalDebt <= totalDebt);\n\n    uint256 userNewDebt = vaultDebt[vaultID] - amount;\n    assert(userNewDebt <= vaultDebt[vaultID]);\n\n    _subFromTotalDebt(amount);\n    vaultDebt[vaultID] = userNewDebt;\n  }\n\n  /**\n   * @dev Adds debt to the vault\n   *\n   * Requirements:\n   * - new user debt cannot be above debt ceiling\n   */\n  function _addToTotalDebt(uint256 amount) internal {\n    uint256 newDebt = totalDebt + amount;\n    require(newDebt <= debtCeiling, 'Debt can not go above debt ceiling');\n\n    totalDebt = newDebt;\n  }\n\n  /**\n   * @dev Subtract from the total debt of this vault type\n   */\n  function _subFromTotalDebt(uint256 amount) internal {\n    require(amount <= totalDebt, 'Debt can not go below 0.');\n    uint256 newDebt = totalDebt - amount;\n\n    totalDebt = newDebt;\n  }\n\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal pure override {\n    revert('transfer: disabled');\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(\n      ERC721Upgradeable,\n      ERC721EnumerableUpgradeable,\n      AccessControlUpgradeable\n    )\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\n    super._beforeTokenTransfer(from, to, tokenId);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721Enumerable_init_unchained();\n    }\n\n    function __ERC721Enumerable_init_unchained() internal initializer {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "apps/avai/src/contracts/interfaces/IStablecoin.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IStablecoin is IERC20 {\n  function burn(address from, uint256 amount) external;\n\n  function mint(address account, uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "apps/avai/src/contracts/USDCExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport './interfaces/IStablecoin.sol';\n\ncontract USDCExchange is\n  Initializable,\n  ReentrancyGuardUpgradeable,\n  OwnableUpgradeable\n{\n  using SafeERC20 for IERC20;\n  using SafeERC20 for IStablecoin;\n\n  IERC20 public usdc;\n  IStablecoin public avai;\n\n  uint256 public usdcRate;\n  uint256 public avaiRate;\n  address public treasury;\n\n  uint256 public hourlyLimit;\n  mapping(uint256 => uint256) accumulatedAVAI;\n\n  event Mint(address minter, uint256 amount, uint256 fee);\n  event Redeem(address redeemer, uint256 amount, uint256 fee);\n  event ChangeTreasury(address newTreasury);\n  event ChangeHourlyLimit(uint256 newHourlyLimit);\n  event ChangeUSDCRate(uint256 newUSDCRate);\n  event ChangeAVAIRate(uint256 newAVAIRate);\n\n  function initialize(address usdc_, address avai_) public initializer {\n    __Context_init_unchained();\n    __Ownable_init_unchained();\n    __ReentrancyGuard_init_unchained();\n\n    usdc = IERC20(usdc_);\n    avai = IStablecoin(avai_);\n    avaiRate = 9925;\n    usdcRate = 10075;\n    treasury = msg.sender;\n  }\n\n  /**\n   * @dev Transfers ownership (and treasury) to new treasury address\n   */\n  function changeTreasury(address newTreasury) public onlyOwner {\n    require(newTreasury != address(0), 'Treasury can not be zero address');\n    treasury = newTreasury;\n    emit ChangeTreasury(newTreasury);\n  }\n\n  /**\n   * @dev Set the rate that USDC is traded for AVAI\n   */\n  function setUSDCRate(uint256 _rate) public onlyOwner {\n    require(_rate <= 10100 && _rate >= 10000, 'Must be 0-1% fee');\n    usdcRate = _rate;\n    emit ChangeUSDCRate(_rate);\n  }\n\n  /**\n   * @dev Set the rate that AVAI is traded for USDC\n   */\n  function setAVAIRate(uint256 _rate) public onlyOwner {\n    require(_rate <= 10000 && _rate >= 9900, 'Must be 0-1% fee');\n    avaiRate = _rate;\n    emit ChangeAVAIRate(_rate);\n  }\n\n  /**\n   * @dev Set the rate that AVAI is traded for USDC\n   */\n  function setHourlyLimit(uint256 _limit) public onlyOwner {\n    hourlyLimit = _limit;\n    emit ChangeHourlyLimit(_limit);\n  }\n\n  /**\n   * @dev Returns the current supply of USDC in the contract.\n   * @dev AVAI is minted as it goes.\n   */\n  function usdReserves() public view returns (uint256) {\n    return usdc.balanceOf(address(this));\n  }\n\n  /**\n   * @dev will mint 1 AVAI for 1.0075 USDC\n   */\n  function mint(uint256 amount) public nonReentrant {\n    require(amount != 0, 'Cannot mint 0 AVAI');\n\n    // This is because USDC has 6 decimal points, and avai has 18. USDC has 4. 18-6+4=16\n    uint256 fee = amount - (amount * 1e4) / usdcRate;\n    uint256 amountToSend = (amount * 1e16) / usdcRate;\n\n    if (avai.totalSupply() > 1000000e18) {\n      uint256 period = block.timestamp / (60 * 60); // 1 hour period\n      require(\n        accumulatedAVAI[period] + amountToSend <=\n          (avai.totalSupply() * hourlyLimit) / 10000,\n        'Too much AVAI minted this hour'\n      );\n      accumulatedAVAI[period] += amountToSend;\n    }\n\n    // Transfer USDC to contract\n    usdc.safeTransferFrom(msg.sender, address(this), amount);\n\n    // Transfer USDC fee to treasury\n    usdc.safeTransfer(treasury, fee);\n    // Transfer AVAI to sender\n    avai.mint(msg.sender, amountToSend);\n    emit Mint(msg.sender, amountToSend, fee);\n  }\n\n  /**\n   * @dev will redeem 1 AVAI for 0.9925 USDC\n   */\n  function redeem(uint256 amount) public nonReentrant {\n    require(amount != 0, 'Cannot redeem 0 USDC');\n    require(usdc.balanceOf(address(this)) != 0, 'Not enough USDC in reserves');\n    require(\n      usdc.balanceOf(address(this)) >= amount / 1e12,\n      'Not enough USDC in reserves'\n    );\n    // This is because USDC has 6 decimal points, and avai has 18. 18-6+4=16\n    uint256 amountToSend = (amount * avaiRate) / (1e16);\n    uint256 fee = amount / 1e12 - amountToSend;\n\n    // Burn excess, keep fee\n    avai.burn(msg.sender, amount);\n    // Transfer amount minus fees to sender\n    usdc.safeTransfer(msg.sender, amountToSend);\n    // Transfer USDC fee to treasury\n    usdc.safeTransfer(treasury, fee);\n    emit Redeem(msg.sender, amountToSend, fee);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "apps/avai/src/contracts/VestingV2.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\n/**\n * @title ERC20VestingWallet\n * @dev This contract handles the vesting of ERC20 tokens for a given beneficiary. Custody of multiple tokens can be\n * given to this contract, which will release the token to the beneficiary following a given vesting schedule. The\n * vesting schedule is customizable through the {vestedAmount} function.\n *\n * Any token transferred to this contract will follow the vesting schedule as if they were locked from the beginning.\n * Consequently, if the vesting has already started, any amount of tokens sent to this contract will (at least partly)\n * be immediately releasable.\n */\ncontract VestingWallet is Ownable {\n  using SafeERC20 for IERC20;\n  event TokensReleased(uint256 amount, address to);\n  event PaymentReceived(address from, uint256 amount);\n  event BenefeciaryAdded(address account);\n  event Revoked();\n  uint256 private _totalReleased;\n  address private immutable _beneficiary;\n  uint256 private immutable _start;\n  uint256 private immutable _duration;\n\n  IERC20 private orca;\n  bool private _revocable;\n  bool private revoked;\n\n  /**\n   * @dev Set the beneficiary, start timestamp and vesting duration of the vesting wallet.\n   */\n  constructor(\n    address orca_,\n    address beneficiaryAddress,\n    uint256 startTimestamp,\n    uint256 durationSeconds,\n    bool revocable\n  ) {\n    require(\n      beneficiaryAddress != address(0),\n      'ERC20VestingWallet: beneficiary is zero address'\n    );\n\n    require(\n      orca_ != address(0),\n      'ERC20VestingWallet: can not have orca token as zero address'\n    );\n\n    orca = IERC20(orca_);\n    _beneficiary = beneficiaryAddress;\n    _start = startTimestamp;\n    _duration = durationSeconds;\n    _revocable = revocable;\n\n    emit BenefeciaryAdded(beneficiaryAddress);\n  }\n\n  /**\n   * @dev The ORCA received will be logged with {PaymentReceived} events.\n   */\n  function receiveToken(uint256 amount) external onlyOwner {\n    orca.safeTransferFrom(msg.sender, address(this), amount);\n    emit PaymentReceived(_msgSender(), amount);\n  }\n\n  /**\n   * @dev Getter for the beneficiary address.\n   */\n  function beneficiary() public view virtual returns (address) {\n    return _beneficiary;\n  }\n\n  /**\n   * @dev Getter for the start timestamp.\n   */\n  function start() public view virtual returns (uint256) {\n    return _start;\n  }\n\n  /**\n   * @dev Getter for the vesting duration.\n   */\n  function duration() public view virtual returns (uint256) {\n    return _duration;\n  }\n\n  /**\n   * @dev Getter for the total amount of Orca already released.\n   */\n  function totalReleased() public view returns (uint256) {\n    return _totalReleased;\n  }\n\n  /**\n   * @dev Release the tokens that have already vested.\n   *\n   * Emits a {TokensReleased} event.\n   */\n  function release() public virtual {\n    uint256 releasable = vestedAmount(block.timestamp) - totalReleased();\n    _totalReleased += releasable;\n    emit TokensReleased(releasable, beneficiary());\n    orca.safeTransfer(beneficiary(), releasable);\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\n   * remain in the contract, the rest are returned to the owner.\n   */\n  function revoke() public onlyOwner {\n    require(_revocable, 'Cannot be revoked');\n\n    uint256 balance = orca.balanceOf(address(this));\n\n    uint256 unreleased = vestedAmount(block.timestamp) - totalReleased();\n\n    uint256 refund = balance - unreleased;\n    // Send to payment splitter\n    release();\n    orca.safeTransfer(owner(), refund);\n    revoked = true;\n    emit Revoked();\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested. Default implementation is a linear vesting curve.\n   */\n  function vestedAmount(uint256 timestamp)\n    public\n    view\n    virtual\n    returns (uint256)\n  {\n    if (timestamp < start()) {\n      return 0;\n    } else if (timestamp >= start() + duration()) {\n      return _historicalBalance();\n    } else {\n      return (_historicalBalance() * (timestamp - start())) / duration();\n    }\n  }\n\n  /**\n   * @dev Calculates the historical balance (current balance + already released balance).\n   */\n  function _historicalBalance() internal view virtual returns (uint256) {\n    return orca.balanceOf(address(this)) + totalReleased();\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "apps/avai/src/contracts/Vesting.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\ncontract OrcaTeamVesting is Ownable {\n  using SafeERC20 for IERC20;\n\n  event PayeeAdded(address account, uint256 shares);\n  event PaymentReleased(address to, uint256 amount);\n  event PaymentReceived(address from, uint256 amount);\n  event Revoked();\n\n  uint256 private _totalShares;\n  uint256 private _totalReleased;\n\n  mapping(address => uint256) private _shares;\n  mapping(address => uint256) private _released;\n  address[] private _payees;\n\n  uint256 private _start;\n  uint256 private _duration;\n  bool private _revocable;\n\n  IERC20 private orca;\n\n  constructor(\n    address orca_,\n    address[] memory payees,\n    uint256[] memory shares_,\n    uint256 start_,\n    uint256 duration_,\n    bool revocable\n  ) {\n    require(\n      payees.length == shares_.length,\n      'PaymentSplitter: payees and shares length mismatch'\n    );\n    require(payees.length > 0, 'PaymentSplitter: no payees');\n    require(\n      orca_ != address(0),\n      'PaymentSplitter: can not have orca token as zero address'\n    );\n\n    orca = IERC20(orca_);\n\n    for (uint256 i = 0; i < payees.length; i++) {\n      _addPayee(payees[i], shares_[i]);\n    }\n\n    _revocable = revocable;\n    _duration = duration_;\n    _start = start_;\n  }\n\n  /**\n   * @dev The ORCA received will be logged with {PaymentReceived} events.\n   */\n  function receiveToken(uint256 amount) external onlyOwner {\n    orca.safeTransferFrom(msg.sender, address(this), amount);\n    emit PaymentReceived(_msgSender(), amount);\n  }\n\n  /**\n   * @dev Getter for the total shares held by payees.\n   */\n  function totalShares() public view returns (uint256) {\n    return _totalShares;\n  }\n\n  /**\n   * @dev Getter for the total amount of Orca already released.\n   */\n  function totalReleased() public view returns (uint256) {\n    return _totalReleased;\n  }\n\n  /**\n   * @dev Getter for the amount of shares held by an account.\n   */\n  function shares(address account) public view returns (uint256) {\n    return _shares[account];\n  }\n\n  /**\n   * @dev Getter for the amount of Orca already released to a payee.\n   */\n  function released(address account) public view returns (uint256) {\n    return _released[account];\n  }\n\n  /**\n   * @dev Getter for the address of the payee number `index`.\n   */\n  function payee(uint256 index) public view returns (address) {\n    return _payees[index];\n  }\n\n  /**\n   * @dev Getter for the start timestamp.\n   */\n  function start() public view virtual returns (uint256) {\n    return _start;\n  }\n\n  /**\n   * @dev Getter for the vesting duration.\n   */\n  function duration() public view virtual returns (uint256) {\n    return _duration;\n  }\n\n  /**\n   * @dev Triggers a transfer to `account` of the amount of Orca they are owed, according to their percentage of the\n   * total shares and their previous withdrawals.\n   */\n  function release(address account) public {\n    require(_shares[account] > 0, 'Account has no shares');\n\n    uint256 releasable = vestedAmount(account, block.timestamp) -\n      released(account);\n    require(releasable != 0, 'Account is not due payment');\n\n    _released[account] += releasable;\n    _totalReleased = _totalReleased + releasable;\n\n    orca.safeTransfer(account, releasable);\n    emit PaymentReleased(account, releasable);\n  }\n\n  /**\n   * @dev Calculates the amount that has already vested. Default implementation is a linear vesting curve.\n   */\n  function vestedAmount(address account, uint256 timestamp)\n    public\n    view\n    virtual\n    returns (uint256)\n  {\n    if (timestamp < start()) {\n      return 0;\n    } else if (timestamp >= start() + duration()) {\n      return _historicalBalance(account);\n    } else {\n      return (_historicalBalance(account) * (timestamp - start())) / duration();\n    }\n  }\n\n  /**\n   * @notice Allows the owner to revoke the vesting. Tokens already vested\n   * remain in the contract, the rest are returned to the owner.\n   */\n  function revoke() public onlyOwner {\n    require(_revocable, 'Cannot be revoked');\n\n    uint256 balance = orca.balanceOf(address(this));\n\n    uint256 unreleased = 0;\n    for (uint256 i; i < _payees.length; i++) {\n      unreleased +=\n        vestedAmount(_payees[i], block.timestamp) -\n        released(_payees[i]);\n    }\n    uint256 refund = balance - unreleased;\n\n    orca.safeTransfer(owner(), refund);\n\n    emit Revoked();\n  }\n\n  /**\n   * @dev Add a new payee to the contract.\n   * @param account The address of the payee to add.\n   * @param shares_ The number of shares owned by the payee.\n   */\n  function _addPayee(address account, uint256 shares_) private {\n    require(\n      account != address(0),\n      'PaymentSplitter: account is the zero address'\n    );\n    require(shares_ > 0, 'PaymentSplitter: shares are 0');\n    require(\n      _shares[account] == 0,\n      'PaymentSplitter: account already has shares'\n    );\n\n    _payees.push(account);\n    _shares[account] = shares_;\n    _totalShares = _totalShares + shares_;\n    emit PayeeAdded(account, shares_);\n  }\n\n  /**\n   * @dev Calculates the historical balance (current balance + already released balance).\n   */\n  function _historicalBalance(address account)\n    internal\n    view\n    virtual\n    returns (uint256)\n  {\n    return\n      ((orca.balanceOf(address(this)) + totalReleased()) * _shares[account]) /\n      _totalShares;\n  }\n}\n"
    },
    "apps/avai/src/contracts/WAVAXGateway.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './interfaces/IWAVAX.sol';\nimport './interfaces/IBank.sol';\n\ncontract WAVAXGateway is Ownable {\n  IWAVAX internal immutable WAVAX;\n\n  constructor(address wavax) {\n    assert(wavax != address(0));\n    WAVAX = IWAVAX(wavax);\n  }\n\n  /**\n   * @dev Only vault owner can do anything with this modifier\n   */\n  modifier onlyVaultOwner(uint256 vaultID, address vault) {\n    require(IBank(vault).vaultExists(vaultID), 'Vault does not exist');\n    require(\n      IBank(vault).ownerOf(vaultID) == msg.sender,\n      'Vault is not owned by you'\n    );\n    _;\n  }\n\n  /**\n   * @dev Gives permission to the vault to spend gateway's WAVAX\n   */\n  function authorizeVault(address vault) external onlyOwner {\n    WAVAX.approve(vault, type(uint256).max);\n  }\n\n  /**\n   * @dev deposits WAVAX into the vault, using native AVAX.\n   */\n  function depositAVAX(address vault, uint256 vaultID)\n    external\n    payable\n    onlyVaultOwner(vaultID, vault)\n  {\n    WAVAX.deposit{value: msg.value}();\n    IBank(vault).depositCollateral(vaultID, msg.value);\n  }\n\n  /**\n   * @dev withdraws AVAX\n   */\n  function withdrawAVAX(\n    address vault,\n    uint256 vaultID,\n    uint256 amount\n  ) external payable onlyVaultOwner(vaultID, vault) {\n    IBank(vault).withdrawCollateral(vaultID, amount);\n    WAVAX.withdraw(amount);\n    payable(msg.sender).transfer(amount);\n  }\n\n  /**\n   * @dev withdraws avax to the user upone destroying vault\n   */\n  function destroyVault(address vault, uint256 vaultID)\n    external\n    payable\n    onlyVaultOwner(vaultID, vault)\n  {\n    IBank(vault).destroyVault(vaultID);\n    uint256 balance = WAVAX.balanceOf(address(this));\n    WAVAX.withdraw(balance);\n    payable(msg.sender).transfer(balance);\n  }\n\n  /**\n   * @dev withdraws avax to the user upon destroying vault\n   */\n  function getPaid(address vault) external payable {\n    IBank(vault).getPaid(msg.sender);\n    uint256 balance = WAVAX.balanceOf(address(this));\n    WAVAX.withdraw(balance);\n    payable(msg.sender).transfer(balance);\n  }\n\n  receive() external payable {}\n}\n"
    },
    "apps/avai/src/contracts/interfaces/IWAVAX.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\ninterface IWAVAX {\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  function deposit() external payable;\n\n  function withdraw(uint256) external;\n\n  function approve(address guy, uint256 wad) external returns (bool);\n\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 wad\n  ) external returns (bool);\n}\n"
    },
    "apps/avai/src/contracts/interfaces/IBank.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\ninterface IBank is IERC721 {\n  function transferVault(uint256 vaultID, address to) external;\n\n  function vaultExists(uint256 vaultID) external view returns (bool);\n\n  function depositCollateral(uint256 vaultID, uint256 amount) external;\n\n  function withdrawCollateral(uint256 vaultID, uint256 amount) external;\n\n  function destroyVault(uint256 vaultID) external;\n\n  function getPaid(address user) external;\n\n  function changeTreasury(address to) external;\n\n  function setGainRatio(uint256 gainRatio_) external;\n\n  function setDebtRatio(uint256 debtRatio_) external;\n\n  function setDebtCeiling(uint256 debtCeiling_) external;\n\n  function setPriceSource(address priceSource_) external;\n\n  function setTokenPeg(uint256 tokenPeg_) external;\n\n  function setStabilityPool(address stabilityPool_) external;\n\n  function setGateway(address gateway_) external;\n\n  function setClosingFee(uint256 amount) external;\n\n  function setOpeningFee(uint256 amount) external;\n\n  function setTreasury(uint256 treasury_) external;\n\n  function setMinimumDebt(uint256 minimumDebt_) external;\n\n  function setMintingPaused(bool paused_) external;\n\n  function initialize(\n    uint256 minimumCollateralPercentage_,\n    address priceSource_,\n    string memory name_,\n    string memory symbol_,\n    address token_,\n    address owner\n  ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "apps/avai/src/contracts/upgrades/Stablecoin.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\n\nimport '../overrides/UpgradeableBeacon.sol';\nimport '../interfaces/IBank.sol';\n\ncontract AVAIv2 is\n  Initializable,\n  ERC20Upgradeable,\n  ERC20PermitUpgradeable,\n  PausableUpgradeable,\n  AccessControlUpgradeable,\n  UpgradeableBeacon\n{\n  // Add the library methods\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  bytes32 public constant BURNER_ROLE = keccak256('BURNER_ROLE');\n  bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\n  bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n\n  // No need for SafeMath in solidity ^0.8.0, built in overflow checking\n  // using SafeMath for uint256;\n\n  // The banks that users can use\n  address[] public banks;\n\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n  event CreateVaultType(\n    address token,\n    uint256 minimumCollateralPercentage,\n    address priceSource,\n    string name,\n    address bank\n  );\n\n  function initialize(string memory name, address vault_) public initializer {\n    __Context_init_unchained();\n    __ERC165_init_unchained();\n    __AccessControl_init_unchained();\n    __ERC20_init_unchained(name, name);\n    __Pausable_init_unchained();\n    __EIP712_init_unchained(name, '1');\n    __ERC20Permit_init_unchained(name);\n    __UpgradeableBeacon__init(vault_);\n    // Treasury\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    _setupRole(PAUSER_ROLE, _msgSender());\n  }\n\n  /**\n   * @dev check on the current number of bank types deployed\n   */\n  function bankCount() external view returns (uint256) {\n    return banks.length;\n  }\n\n  /**\n   * @dev give a burner role so that banks can burn the token upon liquidation and paying back.\n   */\n  function burn(address from, uint256 amount) external onlyRole(BURNER_ROLE) {\n    _burn(from, amount);\n  }\n\n  /**\n   * @dev give a minter role so that banks can mint upon borrowing.\n   */\n  function mint(address account, uint256 amount)\n    external\n    onlyRole(MINTER_ROLE)\n  {\n    _mint(account, amount);\n  }\n\n  /**\n   * @dev Adds a bank after creation for book keeping on the stablecoin\n   */\n  function addBank(\n    uint256 minimumCollateralPercentage_,\n    address priceSource_,\n    string calldata name_,\n    string calldata symbol_,\n    address token_\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    address bank = address(\n      new BeaconProxy(\n        address(this),\n        abi.encodeWithSignature(\n          'initialize(uint256,address,string,string,address)',\n          minimumCollateralPercentage_,\n          priceSource_,\n          name_,\n          symbol_,\n          token_\n        )\n      )\n    );\n\n    banks.push(bank);\n\n    _setupRole(BURNER_ROLE, bank);\n    // Allow the bank to burn stablecoin\n    _setupRole(MINTER_ROLE, bank);\n\n    emit CreateVaultType(\n      token_,\n      minimumCollateralPercentage_,\n      priceSource_,\n      name_,\n      bank\n    );\n  }\n\n  /**\n   * @dev Pauses all token transfers.\n   *\n   * See {ERC20Pausable} and {Pausable-_pause}.\n   *\n   * Requirements:\n   *\n   * - the caller must have the `PAUSER_ROLE`.\n   */\n  function pause() public onlyRole(PAUSER_ROLE) {\n    _pause();\n  }\n\n  /**\n   * @dev Unpauses all token transfers.\n   *\n   * See {ERC20Pausable} and {Pausable-_unpause}.\n   *\n   * Requirements:\n   *\n   * - the caller must have the `PAUSER_ROLE`.\n   */\n  function unpause() public onlyRole(PAUSER_ROLE) {\n    _unpause();\n  }\n\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal override(ERC20Upgradeable) {\n    super._beforeTokenTransfer(from, to, tokenId);\n    require(!paused(), 'Pausable: token transfer while paused');\n  }\n\n  //--------------------------------------\n  // Bank stuff\n\n  /**\n   * @dev sets the minimum debt\n   */\n  function setMinimumDebt(uint256 bankID, uint256 minimumDebt_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setMinimumDebt(minimumDebt_);\n  }\n\n  /**\n   * @dev sets the gain ratio\n   */\n  function setGainRatio(uint256 bankID, uint256 gainRatio_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setGainRatio(gainRatio_);\n  }\n\n  /**\n   * @dev sets the debt ratio\n   */\n  function setDebtRatio(uint256 bankID, uint256 debtRatio_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setDebtRatio(debtRatio_);\n  }\n\n  /**\n   * @dev Set the debt ceiling for this bank\n   */\n  function setDebtCeiling(uint256 bankID, uint256 debtCeiling_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setDebtCeiling(debtCeiling_);\n  }\n\n  /**\n   * @dev Set the price source for this bank\n   */\n  function setPriceSource(uint256 bankID, address priceSource_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setPriceSource(priceSource_);\n  }\n\n  /**\n   * @dev Set the token peg for this bank\n   */\n  function setTokenPeg(uint256 bankID, uint256 tokenPeg_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setTokenPeg(tokenPeg_);\n  }\n\n  /**\n   * @dev Set the stability pool (liquidator) for this bank\n   */\n  function setStabilityPool(uint256 bankID, address stabilityPool_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setStabilityPool(stabilityPool_);\n  }\n\n  /**\n   * @dev Set the WAVAX gateway for this bank if it needs one\n   */\n  function setGateway(uint256 bankID, address gateway_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setGateway(gateway_);\n  }\n\n  /**\n   * @dev Set the closing fee for this bank\n   */\n  function setClosingFee(uint256 bankID, uint256 amount)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setClosingFee(amount);\n  }\n\n  /**\n   * @dev Set the opening fee for this bank\n   */\n  function setOpeningFee(uint256 bankID, uint256 amount)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setOpeningFee(amount);\n  }\n\n  /**\n   * @dev Set the treasury bank for this bank\n   */\n  function setTreasury(uint256 bankID, uint256 treasury_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setTreasury(treasury_);\n  }\n\n  /**\n   * @dev Pauses minting for a bank if exploit or if deprecated\n   */\n  function setMintingPaused(uint256 bankID, bool paused_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setMintingPaused(paused_);\n  }\n\n  function getRoleMember(bytes32 role, uint256 index)\n    public\n    view\n    returns (address)\n  {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {grantRole} to track enumerable memberships\n   */\n  function grantRole(bytes32 role, address account)\n    public\n    virtual\n    override(AccessControlUpgradeable)\n  {\n    super.grantRole(role, account);\n    _roleMembers[role].add(account);\n  }\n\n  /**\n   * @dev Overload {revokeRole} to track enumerable memberships\n   */\n  function revokeRole(bytes32 role, address account)\n    public\n    virtual\n    override(AccessControlUpgradeable)\n  {\n    super.revokeRole(role, account);\n    _roleMembers[role].remove(account);\n  }\n\n  /**\n   * @dev Overload {renounceRole} to track enumerable memberships\n   */\n  function renounceRole(bytes32 role, address account)\n    public\n    virtual\n    override(AccessControlUpgradeable)\n  {\n    super.renounceRole(role, account);\n    _roleMembers[role].remove(account);\n  }\n\n  /**\n   * @dev Overload {_setupRole} to track enumerable memberships\n   */\n  function _setupRole(bytes32 role, address account) internal virtual override {\n    super._setupRole(role, account);\n    _roleMembers[role].add(account);\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal initializer {\n        __Context_init_unchained();\n        __EIP712_init_unchained(name, \"1\");\n        __ERC20Permit_init_unchained(name);\n    }\n\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\n        _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "apps/avai/src/contracts/overrides/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeaconUpgradeable, OwnableUpgradeable {\n  address private _implementation;\n\n  /**\n   * @dev Emitted when the child implementation returned by the beacon is changed.\n   */\n  event Upgraded(address indexed childImplementation);\n\n  /**\n   * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n   * beacon.\n   */\n  function __UpgradeableBeacon__init(address implementation_)\n    internal\n    initializer\n  {\n    __Ownable_init_unchained();\n    _setImplementation(implementation_);\n  }\n\n  /**\n   * @dev Returns the current implementation address.\n   */\n  function implementation() public view virtual override returns (address) {\n    return _implementation;\n  }\n\n  /**\n   * @dev Upgrades the beacon to a new implementation.\n   *\n   * Emits an {Upgraded} event.\n   *\n   * Requirements:\n   *\n   * - msg.sender must be the owner of the contract.\n   * - `newImplementation` must be a contract.\n   */\n  function upgradeToNewBank(address newImplementation)\n    public\n    virtual\n    onlyOwner\n  {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /**\n   * @dev Sets the implementation contract address for this beacon\n   *\n   * Requirements:\n   *\n   * - `newImplementation` must be a contract.\n   */\n  function _setImplementation(address newImplementation) internal {\n    require(\n      AddressUpgradeable.isContract(newImplementation),\n      'UpgradeableBeacon: implementation is not a contract'\n    );\n    _implementation = newImplementation;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal initializer {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "apps/avai/src/contracts/Stablecoin.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\n\nimport './overrides/UpgradeableBeacon.sol';\nimport './interfaces/IBank.sol';\n\ncontract AVAI is\n  Initializable,\n  ERC20Upgradeable,\n  ERC20PermitUpgradeable,\n  PausableUpgradeable,\n  AccessControlUpgradeable,\n  UpgradeableBeacon\n{\n  // Add the library methods\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  bytes32 public constant BURNER_ROLE = keccak256('BURNER_ROLE');\n  bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\n  bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n\n  // No need for SafeMath in solidity ^0.8.0, built in overflow checking\n  // using SafeMath for uint256;\n\n  // The banks that users can use\n  address[] public banks;\n\n  mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n  event CreateVaultType(\n    address token,\n    uint256 minimumCollateralPercentage,\n    address priceSource,\n    string name,\n    address bank\n  );\n\n  function initialize(string memory name, address vault_) public initializer {\n    __Context_init_unchained();\n    __ERC165_init_unchained();\n    __AccessControl_init_unchained();\n    __ERC20_init_unchained(name, name);\n    __Pausable_init_unchained();\n    __EIP712_init_unchained(name, '1');\n    __ERC20Permit_init_unchained(name);\n    __UpgradeableBeacon__init(vault_);\n    // Treasury\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    _setupRole(PAUSER_ROLE, _msgSender());\n  }\n\n  /**\n   * @dev check on the current number of bank types deployed\n   */\n  function bankCount() external view returns (uint256) {\n    return banks.length;\n  }\n\n  /**\n   * @dev give a burner role so that banks can burn the token upon liquidation and paying back.\n   */\n  function burn(address from, uint256 amount) external onlyRole(BURNER_ROLE) {\n    _burn(from, amount);\n  }\n\n  /**\n   * @dev give a minter role so that banks can mint upon borrowing.\n   */\n  function mint(address account, uint256 amount)\n    external\n    onlyRole(MINTER_ROLE)\n  {\n    _mint(account, amount);\n  }\n\n  /**\n   * @dev Adds a bank after creation for book keeping on the stablecoin\n   */\n  function addBank(\n    uint256 minimumCollateralPercentage_,\n    address priceSource_,\n    string calldata name_,\n    string calldata symbol_,\n    address token_\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n    address bank = address(\n      new BeaconProxy(\n        address(this),\n        abi.encodeWithSignature(\n          'initialize(uint256,address,string,string,address)',\n          minimumCollateralPercentage_,\n          priceSource_,\n          name_,\n          symbol_,\n          token_\n        )\n      )\n    );\n\n    banks.push(bank);\n\n    _setupRole(BURNER_ROLE, bank);\n    // Allow the bank to burn stablecoin\n    _setupRole(MINTER_ROLE, bank);\n\n    emit CreateVaultType(\n      token_,\n      minimumCollateralPercentage_,\n      priceSource_,\n      name_,\n      bank\n    );\n  }\n\n  /**\n   * @dev Pauses all token transfers.\n   *\n   * See {ERC20Pausable} and {Pausable-_pause}.\n   *\n   * Requirements:\n   *\n   * - the caller must have the `PAUSER_ROLE`.\n   */\n  function pause() public onlyRole(PAUSER_ROLE) {\n    _pause();\n  }\n\n  /**\n   * @dev Unpauses all token transfers.\n   *\n   * See {ERC20Pausable} and {Pausable-_unpause}.\n   *\n   * Requirements:\n   *\n   * - the caller must have the `PAUSER_ROLE`.\n   */\n  function unpause() public onlyRole(PAUSER_ROLE) {\n    _unpause();\n  }\n\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal override(ERC20Upgradeable) {\n    super._beforeTokenTransfer(from, to, tokenId);\n    require(!paused(), 'Pausable: token transfer while paused');\n  }\n\n  //--------------------------------------\n  // Bank stuff\n\n  /**\n   * @dev sets the minimum debt\n   */\n  function setMinimumDebt(uint256 bankID, uint256 minimumDebt_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setMinimumDebt(minimumDebt_);\n  }\n\n  /**\n   * @dev sets the gain ratio\n   */\n  function setGainRatio(uint256 bankID, uint256 gainRatio_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setGainRatio(gainRatio_);\n  }\n\n  /**\n   * @dev sets the debt ratio\n   */\n  function setDebtRatio(uint256 bankID, uint256 debtRatio_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setDebtRatio(debtRatio_);\n  }\n\n  /**\n   * @dev Set the debt ceiling for this bank\n   */\n  function setDebtCeiling(uint256 bankID, uint256 debtCeiling_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setDebtCeiling(debtCeiling_);\n  }\n\n  /**\n   * @dev Set the price source for this bank\n   */\n  function setPriceSource(uint256 bankID, address priceSource_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setPriceSource(priceSource_);\n  }\n\n  /**\n   * @dev Set the token peg for this bank\n   */\n  function setTokenPeg(uint256 bankID, uint256 tokenPeg_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setTokenPeg(tokenPeg_);\n  }\n\n  /**\n   * @dev Set the stability pool (liquidator) for this bank\n   */\n  function setStabilityPool(uint256 bankID, address stabilityPool_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setStabilityPool(stabilityPool_);\n  }\n\n  /**\n   * @dev Set the WAVAX gateway for this bank if it needs one\n   */\n  function setGateway(uint256 bankID, address gateway_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setGateway(gateway_);\n  }\n\n  /**\n   * @dev Set the closing fee for this bank\n   */\n  function setClosingFee(uint256 bankID, uint256 amount)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setClosingFee(amount);\n  }\n\n  /**\n   * @dev Set the opening fee for this bank\n   */\n  function setOpeningFee(uint256 bankID, uint256 amount)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setOpeningFee(amount);\n  }\n\n  /**\n   * @dev Set the treasury bank for this bank\n   */\n  function setTreasury(uint256 bankID, uint256 treasury_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setTreasury(treasury_);\n  }\n\n  /**\n   * @dev Pauses minting for a bank if exploit or if deprecated\n   */\n  function setMintingPaused(uint256 bankID, bool paused_)\n    external\n    onlyRole(DEFAULT_ADMIN_ROLE)\n  {\n    IBank(banks[bankID]).setMintingPaused(paused_);\n  }\n\n  function getRoleMember(bytes32 role, uint256 index)\n    public\n    view\n    returns (address)\n  {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {grantRole} to track enumerable memberships\n   */\n  function grantRole(bytes32 role, address account)\n    public\n    virtual\n    override(AccessControlUpgradeable)\n  {\n    super.grantRole(role, account);\n    _roleMembers[role].add(account);\n  }\n\n  /**\n   * @dev Overload {revokeRole} to track enumerable memberships\n   */\n  function revokeRole(bytes32 role, address account)\n    public\n    virtual\n    override(AccessControlUpgradeable)\n  {\n    super.revokeRole(role, account);\n    _roleMembers[role].remove(account);\n  }\n\n  /**\n   * @dev Overload {renounceRole} to track enumerable memberships\n   */\n  function renounceRole(bytes32 role, address account)\n    public\n    virtual\n    override(AccessControlUpgradeable)\n  {\n    super.renounceRole(role, account);\n    _roleMembers[role].remove(account);\n  }\n\n  /**\n   * @dev Overload {_setupRole} to track enumerable memberships\n   */\n  function _setupRole(bytes32 role, address account) internal virtual override {\n    super._setupRole(role, account);\n    _roleMembers[role].add(account);\n  }\n}\n"
    },
    "apps/avai/src/contracts/upgrades/Bank.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport '../interfaces/IStablecoin.sol';\n\ncontract Bankv2 is\n  Initializable,\n  ERC721Upgradeable,\n  ERC721EnumerableUpgradeable,\n  ReentrancyGuardUpgradeable,\n  AccessControlUpgradeable\n{\n  bytes32 public constant TREASURY_ROLE = keccak256('TREASURY_ROLE');\n  using SafeERC20 for IERC20Metadata;\n  using SafeERC20 for IStablecoin;\n  using CountersUpgradeable for CountersUpgradeable.Counter;\n  CountersUpgradeable.Counter private _userVaultIds;\n  /**\n   * Set all of these upon initalization\n   */\n  uint256 public minimumCollateralPercentage;\n  uint256 public debtCeiling;\n  uint256 public closingFee;\n  uint256 public openingFee;\n  uint256 public tokenPeg;\n  uint256 public totalDebt;\n  // For liquidation\n  uint256 public debtRatio;\n  uint256 public gainRatio;\n  mapping(address => uint256) public tokenDebt;\n\n  // Chainlink price source\n  AggregatorV3Interface public priceSource;\n  // Token used as collateral\n  IERC20Metadata public token;\n  // Token used as debt\n  IStablecoin internal stablecoin;\n\n  // Address that corresponds to liquidater\n  address public stabilityPool;\n  // address that corresponds to gateway, if there is one\n  address public gateway;\n  // Vault that corresponds to the treasury\n  uint256 public treasury;\n\n  // Vault information\n  mapping(uint256 => bool) private vaultExistence;\n  mapping(uint256 => uint256) public vaultCollateral;\n  mapping(uint256 => uint256) public vaultDebt;\n\n  // Minimum debt\n  uint256 public minimumDebt;\n\n  // Pausing minting AVAI for a bank if (for example) exploits occur or for deprecation purposes\n  bool public mintingPaused;\n\n  // Events for general vault operations\n  event CreateVault(uint256 vaultID, address creator);\n  event DestroyVault(uint256 vaultID);\n  event TransferVault(uint256 vaultID, address from, address to);\n\n  // Buying out a vault event\n  event LiquidateVault(\n    uint256 vaultID,\n    address owner,\n    address buyer,\n    uint256 amountPaid,\n    uint256 tokenExtract,\n    uint256 closingFee\n  );\n\n  // Events for collateral operations\n  event DepositCollateral(uint256 vaultID, uint256 amount);\n  event WithdrawCollateral(uint256 vaultID, uint256 amount);\n\n  // Events for token operations\n  event BorrowToken(uint256 vaultID, uint256 amount);\n  event PayBackToken(uint256 vaultID, uint256 amount, uint256 closingFee);\n\n  // Bank Operations\n  event GetPaid(uint256 amount, address user);\n  event ChangeGainRatio(uint256 newGainRatio);\n  event ChangeDebtRatio(uint256 newDebtRatio);\n  event NewPeg(uint256 newPew);\n  event NewDebtCeiling(uint256 newDebtCeiling);\n  event NewClosingFee(uint256 newClosingFee);\n  event NewOpeningFee(uint256 newOpeningFee);\n  event NewMinimumDebt(uint256 newMinimumDebt);\n  event NewGateway(address newGateway);\n  event NewStabilityPools(address newStabilityPool);\n  event NewPriceSource(address newPriceSource);\n  event NewTreasury(uint256 newTreasury);\n  event BankPaused(bool mintingPaused);\n\n  // Lets begin!\n  function initialize(\n    uint256 minimumCollateralPercentage_,\n    address priceSource_,\n    string memory name_,\n    string memory symbol_,\n    address token_\n  ) public initializer {\n    // Initializations\n    __Context_init_unchained();\n    __ERC165_init_unchained();\n    __ERC721_init_unchained(name_, symbol_);\n    __ERC721Enumerable_init_unchained();\n    __ReentrancyGuard_init_unchained();\n    __AccessControl_init_unchained();\n    assert(priceSource_ != address(0));\n    assert(minimumCollateralPercentage_ >= 100);\n    //Initial settings!\n    debtCeiling = 10e18; // 10 dollars\n    closingFee = 75; // 0.75%\n    openingFee = 0; // 0.0%\n    tokenPeg = 1e8; // $1\n    debtRatio = 2; // 50%\n    gainRatio = 11; // /10 so 1.1, or 10%\n    // Initially, will deploy later\n    stabilityPool = address(0);\n    gateway = address(0);\n    priceSource = AggregatorV3Interface(priceSource_);\n\n    token = IERC20Metadata(token_);\n    stablecoin = IStablecoin(msg.sender);\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _setupRole(TREASURY_ROLE, msg.sender);\n    _setRoleAdmin(TREASURY_ROLE, TREASURY_ROLE);\n\n    minimumCollateralPercentage = minimumCollateralPercentage_;\n  }\n\n  /**\n   * @dev Only vault owner can do anything with this modifier\n   */\n  modifier onlyVaultOwner(uint256 vaultID) {\n    require(vaultExistence[vaultID], 'Vault does not exist');\n    // Either owner of vault or gateway for AVAX.\n    require(\n      ownerOf(vaultID) == msg.sender || msg.sender == gateway,\n      'Vault is not owned by you'\n    );\n    _;\n  }\n  /**\n   * @dev Only liquidater can do anything with this modifier (if address === 0, then all users can liquidate)\n   */\n  modifier onlyLiquidater() {\n    require(\n      stabilityPool == address(0) || msg.sender == stabilityPool,\n      'buyRiskyVault disabled for public'\n    );\n    _;\n  }\n\n  /**\n   * @dev Only gateway allowed, or user if its not WAVAX.\n   */\n  modifier onlyUser(address user) {\n    require(\n      msg.sender == user || msg.sender == gateway,\n      'Cannot get paid if not yours'\n    );\n    _;\n  }\n\n  /**\n   * @dev For borrowing only\n   */\n  modifier mintingNotPaused() {\n    require(\n      !mintingPaused,\n      'Minting for this bank is paused. Deposits, payments, and withdrawals are all still functional'\n    );\n    _;\n  }\n\n  /**\n   * @dev allows checking if vault exists or not\n   */\n  function vaultExists(uint256 vaultID) public view returns (bool) {\n    return vaultExistence[vaultID];\n  }\n\n  /**\n   * @dev sets the gain ratio\n   */\n  function setGainRatio(uint256 gainRatio_) external onlyRole(TREASURY_ROLE) {\n    require(\n      ((1000 * gainRatio_) / debtRatio) * (10000 + closingFee) < 10000**2\n    );\n    gainRatio = gainRatio_;\n    emit ChangeGainRatio(gainRatio_);\n  }\n\n  /**\n   * @dev sets the debt ratio\n   */\n  function setDebtRatio(uint256 debtRatio_) external onlyRole(TREASURY_ROLE) {\n    require(\n      ((1000 * gainRatio) / debtRatio_) * (10000 + closingFee) < 10000**2\n    );\n    debtRatio = debtRatio_;\n    emit ChangeDebtRatio(debtRatio_);\n  }\n\n  /**\n   * @dev sets the minimum debt\n   */\n  function setMinimumDebt(uint256 minimumDebt_)\n    external\n    onlyRole(TREASURY_ROLE)\n  {\n    require(minimumDebt_ > 0, 'Minimum debt cannot be zero');\n    require(\n      minimumDebt < debtCeiling,\n      'Minimum debt cannot be greater than debt ceiling'\n    );\n    minimumDebt = minimumDebt_;\n    emit NewMinimumDebt(minimumDebt);\n  }\n\n  /**\n   * @dev Set the debt ceiling for this vault\n   */\n  function setDebtCeiling(uint256 debtCeiling_)\n    external\n    onlyRole(TREASURY_ROLE)\n  {\n    require(\n      debtCeiling <= debtCeiling_,\n      'setCeiling: Must be over the amount of current debt ceiling.'\n    );\n    debtCeiling = debtCeiling_;\n    emit NewDebtCeiling(debtCeiling_);\n  }\n\n  /**\n   * @dev Set the price source for this vault\n   */\n  function setPriceSource(address priceSource_)\n    external\n    onlyRole(TREASURY_ROLE)\n  {\n    require(priceSource_ != address(0), 'Price source cannot be zero address');\n    priceSource = AggregatorV3Interface(priceSource_);\n    emit NewPriceSource(priceSource_);\n  }\n\n  /**\n   * @dev Set the token peg for this vault\n   */\n  function setTokenPeg(uint256 tokenPeg_) external onlyRole(TREASURY_ROLE) {\n    require(tokenPeg_ > 0, 'Peg cannot be zero');\n    tokenPeg = tokenPeg_;\n    emit NewPeg(tokenPeg_);\n  }\n\n  /**\n   * @dev Set the stability pool (liquidator) for this vault\n   */\n  function setStabilityPool(address stabilityPool_)\n    external\n    onlyRole(TREASURY_ROLE)\n  {\n    require(\n      stabilityPool_ != address(0),\n      'Stability pool cannot be zero address'\n    );\n    require(\n      Address.isContract(stabilityPool_),\n      'Must be a contract to be the stability pool.'\n    );\n    stabilityPool = stabilityPool_;\n    emit NewStabilityPools(stabilityPool_);\n  }\n\n  /**\n   * @dev Set the WAVAX gateway for this vault if it needs one\n   */\n  function setGateway(address gateway_) external onlyRole(TREASURY_ROLE) {\n    require(gateway_ != address(0), 'Gateway cannot be zero address');\n    require(\n      Address.isContract(gateway_),\n      'Must be a contract to be the gateway.'\n    );\n    gateway = gateway_;\n    emit NewGateway(gateway_);\n  }\n\n  /**\n   * @dev Set the closing fee for this vault\n   */\n  function setClosingFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\n    require(amount <= 250, 'Closing fee cannot be above 1%');\n    require(((1000 * gainRatio) / debtRatio) * (10000 + amount) < 10000**2);\n    closingFee = amount;\n    emit NewClosingFee(amount);\n  }\n\n  /**\n   * @dev Set the opening fee for this vault\n   */\n  function setOpeningFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\n    openingFee = amount;\n    emit NewOpeningFee(amount);\n  }\n\n  /**\n   * @dev Set the treasury vault for this vault (vault that gets all the fees)\n   */\n  function setTreasury(uint256 treasury_) external onlyRole(TREASURY_ROLE) {\n    require(vaultExistence[treasury_], 'Vault does not exist');\n    treasury = treasury_;\n  }\n\n  /**\n   * @dev Pauses the bank minting capabalities.\n   */\n  function setMintingPaused(bool paused_) external onlyRole(TREASURY_ROLE) {\n    require(\n      paused_ == !mintingPaused,\n      'Minting paused already set to this value.'\n    );\n    mintingPaused = paused_;\n  }\n\n  /**\n    @dev returns the chainlink pricefeed price\n  */\n  function getPriceSource() public view returns (uint256) {\n    // And get the latest round data\n    (, int256 price, , , ) = priceSource.latestRoundData();\n    require(price >= 0, 'Chainlink returned a negative price');\n\n    return uint256(price);\n  }\n\n  /**\n    @dev returns the peg \n  */\n  function getPricePeg() public view returns (uint256) {\n    return tokenPeg;\n  }\n\n  /**\n   * @dev returns the current debt and collateral\n   *\n   * Requirements:\n   *\n   * - Token price cannot be zero\n   * - PEG (i.e. usdc) price cannot be zero\n   */\n  function calculateCollateralProperties(uint256 collateral, uint256 debt)\n    internal\n    view\n    returns (uint256, uint256)\n  {\n    require(getPriceSource() != 0, 'Price must be above 0');\n    require(getPricePeg() != 0, 'Peg must be above 0');\n\n    // Value of collateral on avalanche network\n    uint256 collateralValue = collateral * getPriceSource();\n\n    // Get the current debt in our token (i.e. usdc)\n    uint256 debtValue = debt * getPricePeg();\n\n    // Multiple collateral by 100\n    uint256 collateralValueTimes100 = collateralValue * 100;\n\n    return (collateralValueTimes100, debtValue);\n  }\n\n  /**\n   * @dev Checks if the current collateral is valid\n   */\n  function isValidCollateral(uint256 collateral, uint256 debt)\n    internal\n    view\n    returns (bool)\n  {\n    (\n      uint256 collateralValueTimes100,\n      uint256 debtValue\n    ) = calculateCollateralProperties(collateral, debt);\n\n    require(debtValue >= 0, 'Debt must be greater than zero');\n\n    // Get current ratio of debt\n    uint256 collateralPercentage = (collateralValueTimes100 *\n      (10**(18 - token.decimals()))) / debtValue;\n    // and check if it's above 150%\n    return collateralPercentage >= minimumCollateralPercentage;\n  }\n\n  /**\n   * @dev Create a vault for interacting with the platform\n   *\n   * Emits a CreateVault event\n   */\n  function createVault() external {\n    // Increment ID\n    _userVaultIds.increment();\n    // Assign ID to vault\n    uint256 newVaultId = _userVaultIds.current();\n\n    vaultExistence[newVaultId] = true;\n\n    emit CreateVault(newVaultId, msg.sender);\n    // mint erc721 vault (vaultId)\n    _mint(msg.sender, newVaultId);\n  }\n\n  function vaultCounts() external view returns (uint256) {\n    return _userVaultIds.current();\n  }\n\n  /**\n   * @dev User can destroy a vault. Will return all collateral upon destroying.\n   *\n   * Emits a DestroyVault event\n   *\n   * Requirements:\n   *\n   * - User must have paid off all outstanding debt first\n   */\n  function destroyVault(uint256 vaultID)\n    external\n    virtual\n    onlyVaultOwner(vaultID)\n    nonReentrant\n  {\n    require(vaultDebt[vaultID] == 0, 'Vault as outstanding debt');\n\n    uint256 collateral = vaultCollateral[vaultID];\n\n    _burn(vaultID);\n    delete vaultExistence[vaultID];\n    delete vaultCollateral[vaultID];\n    delete vaultDebt[vaultID];\n\n    if (collateral != 0) {\n      token.safeTransfer(msg.sender, collateral);\n    }\n\n    emit DestroyVault(vaultID);\n  }\n\n  /**\n   * @dev user can transfer vault to another address\n   *\n   * Emits TransferVault event\n   */\n  function transferVault(uint256 vaultID, address to)\n    external\n    onlyVaultOwner(vaultID)\n  {\n    // burn erc721 (vaultId)\n    _burn(vaultID);\n    // mint erc721 (vaultId)\n    _mint(to, vaultID);\n\n    emit TransferVault(vaultID, msg.sender, to);\n  }\n\n  /**\n   * @dev ALlows vault owner to deposit ERC20 collateral\n   *\n   * Emits Deposit Collateral event\n   *\n   */\n  function depositCollateral(uint256 vaultID, uint256 amount)\n    external\n    onlyVaultOwner(vaultID)\n  {\n    token.safeTransferFrom(msg.sender, address(this), amount);\n\n    uint256 newCollateral = vaultCollateral[vaultID] + amount;\n\n    assert(newCollateral >= vaultCollateral[vaultID]);\n\n    vaultCollateral[vaultID] = newCollateral;\n\n    emit DepositCollateral(vaultID, amount);\n  }\n\n  /**\n   * @dev Lets a vault owner borrow stablecoin against collateral\n   *\n   * Requirements:\n   * - Vault type must exist\n   * - Vault must exist\n   * - Must borrow greater than 0 stablecoin\n   * - Must be below the debt ceiling when borrowing\n   * - Must maintain minimum collateral percentage\n   *\n   * Emits BorrowToken event\n   */\n  function borrowToken(uint256 vaultID, uint256 amount)\n    external\n    onlyVaultOwner(vaultID)\n    nonReentrant\n    mintingNotPaused\n  {\n    require(amount > 0, 'Must borrow non-zero amount');\n    require(\n      totalDebt + amount <= debtCeiling,\n      'Cannot mint over debt ceiling.'\n    );\n\n    uint256 newDebt = vaultDebt[vaultID] + amount;\n\n    require(\n      isValidCollateral(vaultCollateral[vaultID], newDebt),\n      'Borrow would put vault below minimum collateral percentage'\n    );\n\n    require(\n      newDebt >= minimumDebt,\n      'Borrow needs to be larger than the minimum debt'\n    );\n\n    // Mint stable coin for the user\n    _addVaultDebt(vaultID, amount);\n    // Should have minter role\n    stablecoin.mint(msg.sender, amount);\n    emit BorrowToken(vaultID, amount);\n  }\n\n  /**\n   * @dev allows vault owner to withdraw the collateral\n   *\n   * Requirements:\n   * - Withdraw amount is less than or equal to current collateral\n   * - Collateral withdrawal amount does not put debt below minimum collateral\n   *\n   * Emits WithdrawCollateral event\n   */\n  function withdrawCollateral(uint256 vaultID, uint256 amount)\n    external\n    onlyVaultOwner(vaultID)\n    nonReentrant\n  {\n    require(\n      vaultCollateral[vaultID] >= amount,\n      'Vault does not have enough collateral'\n    );\n\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\n\n    if (vaultDebt[vaultID] != 0) {\n      require(\n        isValidCollateral(newCollateral, vaultDebt[vaultID]),\n        'Withdrawal would put vault below minimum collateral percentage'\n      );\n    }\n\n    vaultCollateral[vaultID] = newCollateral;\n\n    token.safeTransfer(msg.sender, amount);\n\n    emit WithdrawCollateral(vaultID, amount);\n  }\n\n  /**\n   * @dev Pay back the stablecoin to reduce debt\n   *\n   * Requirements:\n   * - User must have enough balance to repay `amount`\n   * - Cannot pay back more than the required debt. `amount` must be less than debt.\n   */\n  function payBackToken(uint256 vaultID, uint256 amount)\n    external\n    onlyVaultOwner(vaultID)\n    nonReentrant\n  {\n    require(\n      stablecoin.balanceOf(msg.sender) >= amount,\n      'Token balance too low'\n    );\n    require(\n      vaultDebt[vaultID] >= amount,\n      'Vault debt less than amount to pay back'\n    );\n\n    // Closing fee calculation\n    uint256 _closingFee = ((amount * closingFee) * getPricePeg()) /\n      (getPriceSource() * 10000) /\n      (10**(18 - token.decimals()));\n\n    _subVaultDebt(vaultID, amount);\n    _subVaultCollateral(vaultID, _closingFee);\n    _addVaultCollateralTreasury(_closingFee);\n\n    // Burns the stablecoin\n    stablecoin.burn(msg.sender, amount);\n\n    emit PayBackToken(vaultID, amount, _closingFee);\n  }\n\n  /*************\n   * Liquidation functions\n   ************** */\n\n  /**\n   * @dev pays the user\n   * Returns the ERC20 token that was liquidated\n   */\n  function getPaid(address user) external nonReentrant onlyUser(user) {\n    require(tokenDebt[user] != 0, 'No liquidations associated with account.');\n    uint256 amount = tokenDebt[user];\n    // Set first in case nonReentrant fails somehow\n    tokenDebt[user] = 0;\n    token.safeTransfer(msg.sender, amount);\n    emit GetPaid(amount, msg.sender);\n  }\n\n  /**\n   * @dev checks if the vault can be liquidated\n   */\n  function checkLiquidation(uint256 vaultId_) external view returns (bool) {\n    require(vaultExistence[vaultId_], 'Vault must exist');\n    (\n      uint256 collateralValueTimes100,\n      uint256 debtValue\n    ) = calculateCollateralProperties(\n        vaultCollateral[vaultId_],\n        vaultDebt[vaultId_]\n      );\n\n    require(debtValue > 0, 'Cannot have zero debt');\n\n    uint256 collateralPercentage = (collateralValueTimes100 *\n      (10**(18 - token.decimals()))) / debtValue;\n\n    if (collateralPercentage < minimumCollateralPercentage) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @dev checks cost of liquidating\n   */\n  function checkCost(uint256 vaultId_) public view returns (uint256) {\n    require(vaultExistence[vaultId_], 'Vault must exist');\n    (, uint256 debtValue) = calculateCollateralProperties(\n      vaultCollateral[vaultId_],\n      vaultDebt[vaultId_]\n    );\n    debtValue = debtValue / tokenPeg;\n\n    return debtValue / debtRatio;\n  }\n\n  /**\n   * @dev checks how much token gets extract\n   */\n  function checkExtract(uint256 vaultId_) public view returns (uint256) {\n    require(vaultExistence[vaultId_], 'Vault must exist');\n    (, uint256 debtValue) = calculateCollateralProperties(\n      vaultCollateral[vaultId_],\n      vaultDebt[vaultId_]\n    );\n\n    uint256 tokenExtract = (debtValue * gainRatio) /\n      (10 * getPriceSource() * debtRatio) /\n      (10**(18 - token.decimals()));\n\n    return tokenExtract;\n  }\n\n  /**\n   * @dev allows liquidator to buy out a risky vault\n   *\n   * Requirements:\n   * - Vault id must exist\n   * - Vault must be below minimum collateral percentage\n   * - User must have enough of the token to pay vault off\n   *\n   * Emits BuyRiskyVault event\n   */\n  function liquidateVault(uint256 vaultID_)\n    external\n    onlyLiquidater\n    nonReentrant\n  {\n    require(vaultExistence[vaultID_], 'Vault does not exist');\n    (\n      uint256 collateralValueTimes100,\n      uint256 debtValue\n    ) = calculateCollateralProperties(\n        vaultCollateral[vaultID_],\n        vaultDebt[vaultID_]\n      );\n\n    // Make sure user has debt\n    require(debtValue > 0, 'Vault has no debt');\n\n    uint256 collateralPercentage = (collateralValueTimes100 *\n      (10**(18 - token.decimals()))) / debtValue;\n\n    require(\n      collateralPercentage < minimumCollateralPercentage,\n      'Vault is not below minimum collateral percentage'\n    );\n\n    uint256 tokenExtract = checkExtract(vaultID_);\n    uint256 halfDebt = checkCost(vaultID_);\n    require(\n      stablecoin.balanceOf(msg.sender) >= halfDebt,\n      'Token balance too low to pay off outstanding debt'\n    );\n\n    stablecoin.burn(msg.sender, halfDebt);\n\n    vaultDebt[vaultID_] -= halfDebt;\n\n    uint256 _closingFee = (halfDebt * closingFee * getPricePeg()) /\n      (getPriceSource() * 10000) /\n      (10**(18 - token.decimals()));\n\n    vaultCollateral[vaultID_] -= (_closingFee + tokenExtract);\n    vaultCollateral[treasury] += _closingFee;\n\n    tokenDebt[msg.sender] += tokenExtract;\n\n    _subFromTotalDebt(halfDebt);\n\n    emit LiquidateVault(\n      vaultID_,\n      ownerOf(vaultID_),\n      msg.sender,\n      halfDebt,\n      tokenExtract,\n      _closingFee\n    );\n  }\n\n  /**\n   * @dev Adds to the vault collateral\n   *\n   */\n  function _addVaultCollateralTreasury(uint256 amount) internal {\n    uint256 newCollateral = vaultCollateral[treasury] + amount;\n    assert(newCollateral >= vaultCollateral[treasury]);\n\n    // Adjust and save it\n    vaultCollateral[treasury] = newCollateral;\n  }\n\n  /**\n   * @dev subtracts from the vault collateral\n   *\n   * Requirements:\n   * - Must be less than or equal to current collateral\n   */\n\n  function _subVaultCollateral(uint256 vaultID, uint256 amount) internal {\n    require(\n      amount <= vaultCollateral[vaultID],\n      'Cannot remove more than the deposited collateral'\n    );\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\n\n    assert(newCollateral <= vaultCollateral[vaultID]);\n\n    // Adjust and save it\n    vaultCollateral[vaultID] = newCollateral;\n  }\n\n  /**\n   * @dev Adds debt to the vault\n   *\n   * Requirements:\n   * - new user debt cannot be above debt ceiling\n   */\n  function _addVaultDebt(uint256 vaultID, uint256 amount) internal {\n    uint256 newTotalDebt = amount + totalDebt;\n\n    assert(newTotalDebt >= totalDebt);\n    require(\n      newTotalDebt <= debtCeiling,\n      'Cannot exceed debt ceiling for this vault'\n    );\n\n    uint256 userNewDebt = amount + vaultDebt[vaultID];\n    assert(userNewDebt >= vaultDebt[vaultID]);\n\n    _addToTotalDebt(amount);\n\n    vaultDebt[vaultID] = userNewDebt;\n  }\n\n  /**\n   * @dev Subs debt to the vault\n   *\n   * Requirements:\n   * - user cannot remove more than total debt\n   * - user cannot remove more than their total debt\n   */\n  function _subVaultDebt(uint256 vaultID, uint256 amount) internal {\n    require(totalDebt >= amount, 'Cannot get rid of more debt than exists.');\n\n    require(\n      vaultDebt[vaultID] >= amount,\n      'Cannot get rid of more debt than user has'\n    );\n\n    uint256 newTotalDebt = totalDebt - amount;\n    assert(newTotalDebt <= totalDebt);\n\n    uint256 userNewDebt = vaultDebt[vaultID] - amount;\n    assert(userNewDebt <= vaultDebt[vaultID]);\n\n    _subFromTotalDebt(amount);\n    vaultDebt[vaultID] = userNewDebt;\n  }\n\n  /**\n   * @dev Adds debt to the vault\n   *\n   * Requirements:\n   * - new user debt cannot be above debt ceiling\n   */\n  function _addToTotalDebt(uint256 amount) internal {\n    uint256 newDebt = totalDebt + amount;\n    require(newDebt <= debtCeiling, 'Debt can not go above debt ceiling');\n\n    totalDebt = newDebt;\n  }\n\n  /**\n   * @dev Subtract from the total debt of this vault type\n   */\n  function _subFromTotalDebt(uint256 amount) internal {\n    require(amount <= totalDebt, 'Debt can not go below 0.');\n    uint256 newDebt = totalDebt - amount;\n\n    totalDebt = newDebt;\n  }\n\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal pure override {\n    revert('transfer: disabled');\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(\n      ERC721Upgradeable,\n      ERC721EnumerableUpgradeable,\n      AccessControlUpgradeable\n    )\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\n    super._beforeTokenTransfer(from, to, tokenId);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "apps/avai/src/contracts/test/FakeUSDC.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';\n\ncontract FakeUSDC is ERC20 {\n  uint8 private constant TOKEN_DECIMALS = 6;\n\n  constructor() ERC20('USD Coin', 'USDC') {\n    _mint(msg.sender, 1000000000000);\n  }\n\n  /**\n   * Minting for all, for testnet!\n   */\n  function mint(uint256 amount) external {\n    _mint(msg.sender, amount);\n  }\n\n  function decimals() public view virtual override returns (uint8) {\n    return TOKEN_DECIMALS;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "apps/avai/src/contracts/test/FakeBTC.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';\n\ncontract FakeBTC is ERC20 {\n  uint8 private constant TOKEN_DECIMALS = 8;\n\n  constructor() ERC20('Wrapped BTC', 'WBTC.e') {\n    _mint(msg.sender, 1000000000000);\n  }\n\n  /**\n   * Minting for all, for testnet!\n   */\n  function mint(uint256 amount) external {\n    _mint(msg.sender, amount);\n  }\n\n  function decimals() public view virtual override returns (uint8) {\n    return TOKEN_DECIMALS;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return recover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return recover(hash, r, vs);\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"ECDSA: invalid signature 's' value\"\n        );\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-ERC20Permit.sol\";\nimport \"../../../utils/math/Math.sol\";\nimport \"../../../utils/math/SafeCast.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\n\n/**\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\n *\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\n *\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\n *\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\n * Enabling self-delegation can easily be done by overriding the {delegates} function. Keep in mind however that this\n * will significantly increase the base gas cost of transfers.\n *\n * _Available since v4.2._\n */\nabstract contract ERC20Votes is ERC20Permit {\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint224 votes;\n    }\n\n    bytes32 private constant _DELEGATION_TYPEHASH =\n        keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    mapping(address => address) private _delegates;\n    mapping(address => Checkpoint[]) private _checkpoints;\n    Checkpoint[] private _totalSupplyCheckpoints;\n\n    /**\n     * @dev Emitted when an account changes their delegate.\n     */\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /**\n     * @dev Emitted when a token transfer or delegate change results in changes to an account's voting power.\n     */\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /**\n     * @dev Get the `pos`-th checkpoint for `account`.\n     */\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\n        return _checkpoints[account][pos];\n    }\n\n    /**\n     * @dev Get number of checkpoints for `account`.\n     */\n    function numCheckpoints(address account) public view virtual returns (uint32) {\n        return SafeCast.toUint32(_checkpoints[account].length);\n    }\n\n    /**\n     * @dev Get the address `account` is currently delegating to.\n     */\n    function delegates(address account) public view virtual returns (address) {\n        return _delegates[account];\n    }\n\n    /**\n     * @dev Gets the current votes balance for `account`\n     */\n    function getVotes(address account) public view returns (uint256) {\n        uint256 pos = _checkpoints[account].length;\n        return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\n    }\n\n    /**\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastVotes(address account, uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_checkpoints[account], blockNumber);\n    }\n\n    /**\n     * @dev Retrieve the `totalSupply` at the end of `blockNumber`. Note, this value is the sum of all balances.\n     * It is but NOT the sum of all the delegated votes!\n     *\n     * Requirements:\n     *\n     * - `blockNumber` must have been already mined\n     */\n    function getPastTotalSupply(uint256 blockNumber) public view returns (uint256) {\n        require(blockNumber < block.number, \"ERC20Votes: block not yet mined\");\n        return _checkpointsLookup(_totalSupplyCheckpoints, blockNumber);\n    }\n\n    /**\n     * @dev Lookup a value in a list of (sorted) checkpoints.\n     */\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber) private view returns (uint256) {\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\n        //\n        // During the loop, the index of the wanted checkpoint remains in the range [low, high).\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\n        // - If the middle checkpoint is before `blockNumber`, we look in [mid+1, high)\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\n        // the same.\n        uint256 high = ckpts.length;\n        uint256 low = 0;\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n            if (ckpts[mid].fromBlock > blockNumber) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        return high == 0 ? 0 : ckpts[high - 1].votes;\n    }\n\n    /**\n     * @dev Delegate votes from the sender to `delegatee`.\n     */\n    function delegate(address delegatee) public virtual {\n        return _delegate(_msgSender(), delegatee);\n    }\n\n    /**\n     * @dev Delegates votes from signer to `delegatee`\n     */\n    function delegateBySig(\n        address delegatee,\n        uint256 nonce,\n        uint256 expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(block.timestamp <= expiry, \"ERC20Votes: signature expired\");\n        address signer = ECDSA.recover(\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\n            v,\n            r,\n            s\n        );\n        require(nonce == _useNonce(signer), \"ERC20Votes: invalid nonce\");\n        return _delegate(signer, delegatee);\n    }\n\n    /**\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\n     */\n    function _maxSupply() internal view virtual returns (uint224) {\n        return type(uint224).max;\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been increased.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        super._mint(account, amount);\n        require(totalSupply() <= _maxSupply(), \"ERC20Votes: total supply risks overflowing votes\");\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\n    }\n\n    /**\n     * @dev Snapshots the totalSupply after it has been decreased.\n     */\n    function _burn(address account, uint256 amount) internal virtual override {\n        super._burn(account, amount);\n\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\n    }\n\n    /**\n     * @dev Move voting power when tokens are transferred.\n     *\n     * Emits a {DelegateVotesChanged} event.\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._afterTokenTransfer(from, to, amount);\n\n        _moveVotingPower(delegates(from), delegates(to), amount);\n    }\n\n    /**\n     * @dev Change delegation for `delegator` to `delegatee`.\n     *\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\n     */\n    function _delegate(address delegator, address delegatee) internal virtual {\n        address currentDelegate = delegates(delegator);\n        uint256 delegatorBalance = balanceOf(delegator);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveVotingPower(\n        address src,\n        address dst,\n        uint256 amount\n    ) private {\n        if (src != dst && amount > 0) {\n            if (src != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\n            }\n\n            if (dst != address(0)) {\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        Checkpoint[] storage ckpts,\n        function(uint256, uint256) view returns (uint256) op,\n        uint256 delta\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\n        uint256 pos = ckpts.length;\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].votes;\n        newWeight = op(oldWeight, delta);\n\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\n            ckpts[pos - 1].votes = SafeCast.toUint224(newWeight);\n        } else {\n            ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(block.number), votes: SafeCast.toUint224(newWeight)}));\n        }\n    }\n\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\n        return a + b;\n    }\n\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\n        return a - b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute.\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "apps/avai/src/contracts/Orca.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol';\n\ncontract ORCA is ERC20, ERC20Permit, ERC20Votes {\n  constructor() ERC20('OrcaDAO', 'ORCA') ERC20Permit('OrcaDAO') {\n    _mint(msg.sender, 1.5e26); // 150 million to be ever minted\n  }\n\n  // The functions below are overrides required by Solidity.\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal override(ERC20, ERC20Votes) {\n    super._afterTokenTransfer(from, to, amount);\n  }\n\n  function _mint(address to, uint256 amount)\n    internal\n    override(ERC20, ERC20Votes)\n  {\n    super._mint(to, amount);\n  }\n\n  function _burn(address account, uint256 amount)\n    internal\n    override(ERC20, ERC20Votes)\n  {\n    super._burn(account, amount);\n  }\n}\n"
    },
    "apps/avai/src/contracts/OracleBridge.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\n\nimport './interfaces/IYakStrategy.sol';\n\ncontract OracleBridge is AggregatorV3Interface {\n  // Chainlink price source\n  AggregatorV3Interface public immutable priceSource;\n  IERC20Metadata public immutable underlyingToken;\n\n  // The YRT token\n  IYakStrategy public immutable shareToken;\n\n  constructor(\n    address priceSource_,\n    address underlyingToken_,\n    address shareToken_\n  ) {\n    assert(priceSource_ != address(0));\n    assert(shareToken_ != address(0));\n    assert(underlyingToken_ != address(0));\n    priceSource = AggregatorV3Interface(priceSource_);\n    underlyingToken = IERC20Metadata(underlyingToken_);\n    shareToken = IYakStrategy(shareToken_); // YRT token\n  }\n\n  function decimals() external view override returns (uint8) {\n    return priceSource.decimals();\n  }\n\n  function description() external view override returns (string memory) {\n    return priceSource.description();\n  }\n\n  function version() external view override returns (uint256) {\n    return priceSource.version();\n  }\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return priceSource.getRoundData(_roundId);\n  }\n\n  // The one we edit for compounder!\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80,\n      int256,\n      uint256,\n      uint256,\n      uint80\n    )\n  {\n    // Lets do some calcs!\n    (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    ) = priceSource.latestRoundData();\n\n    require(answer >= 0, 'Chainlink pricefeed returned bad value.');\n    // Return price of 1 YRT\n    uint256 newPrice = (shareToken.getDepositTokensForShares(\n      10**underlyingToken.decimals()\n    ) * uint256(answer)) / 10**underlyingToken.decimals();\n\n    return (roundId, int256(newPrice), startedAt, updatedAt, answeredInRound);\n  }\n}\n"
    },
    "apps/avai/src/contracts/interfaces/IYakStrategy.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\ninterface IYakStrategy is IERC20Metadata {\n  function getSharesForDepositTokens(uint256 amount)\n    external\n    view\n    returns (uint256);\n\n  function getDepositTokensForShares(uint256 amount)\n    external\n    view\n    returns (uint256);\n\n  function totalDeposits() external view returns (uint256);\n\n  function estimateReinvestReward() external view returns (uint256);\n\n  function checkReward() external view returns (uint256);\n\n  function estimateDeployedBalance() external view returns (uint256);\n}\n"
    },
    "apps/avai/src/contracts/oracles/YakAvaxAAVE.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '../OracleBridge.sol';\n\ncontract YakAvaxAAVEOracle is OracleBridge {\n  constructor(\n    address priceSource_,\n    address underlyingToken_,\n    address shareToken_\n  ) OracleBridge(priceSource_, underlyingToken_, shareToken_) {}\n}\n"
    },
    "apps/avai/src/contracts/upgrades/USDCExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\n\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '../interfaces/IStablecoin.sol';\n\ncontract USDCExchangev2 is\n  Initializable,\n  ReentrancyGuardUpgradeable,\n  OwnableUpgradeable\n{\n  using SafeERC20 for IERC20;\n  using SafeERC20 for IStablecoin;\n\n  IERC20 public usdc;\n  IStablecoin public avai;\n\n  uint256 public usdcRate;\n  uint256 public avaiRate;\n  address public treasury;\n\n  uint256 hourlyLimit;\n  mapping(uint256 => uint256) accumulatedAVAI;\n\n  event Mint(address minter, uint256 amount, uint256 fee);\n  event Redeem(address redeemer, uint256 amount, uint256 fee);\n  event ChangeTreasury(address newTreasury);\n  event ChangeHourlyLimit(uint256 newHourlyLimit);\n  event ChangeUSDCRate(uint256 newUSDCRate);\n  event ChangeAVAIRate(uint256 newAVAIRate);\n\n  function initialize(address usdc_, address avai_) public initializer {\n    __Context_init_unchained();\n    __Ownable_init_unchained();\n    __ReentrancyGuard_init_unchained();\n\n    usdc = IERC20(usdc_);\n    avai = IStablecoin(avai_);\n    avaiRate = 9925;\n    usdcRate = 10075;\n    treasury = msg.sender;\n  }\n\n  /**\n   * @dev Transfers ownership (and treasury) to new treasury address\n   */\n  function changeTreasury(address newTreasury) public onlyOwner {\n    require(newTreasury != address(0), 'Treasury can not be zero address');\n    treasury = newTreasury;\n    emit ChangeTreasury(newTreasury);\n  }\n\n  /**\n   * @dev Set the rate that USDC is traded for AVAI\n   */\n  function setUSDCRate(uint256 _rate) public onlyOwner {\n    require(_rate <= 10100 && _rate >= 10000, 'Must be 0-1% fee');\n    usdcRate = _rate;\n    emit ChangeUSDCRate(_rate);\n  }\n\n  /**\n   * @dev Set the rate that AVAI is traded for USDC\n   */\n  function setAVAIRate(uint256 _rate) public onlyOwner {\n    require(_rate <= 10000 && _rate >= 9900, 'Must be 0-1% fee');\n    avaiRate = _rate;\n    emit ChangeAVAIRate(_rate);\n  }\n\n  /**\n   * @dev Set the rate that AVAI is traded for USDC\n   */\n  function setHourlyLimit(uint256 _limit) public onlyOwner {\n    hourlyLimit = _limit;\n    emit ChangeHourlyLimit(_limit);\n  }\n\n  /**\n   * @dev Returns the current supply of USDC in the contract.\n   * @dev AVAI is minted as it goes.\n   */\n  function usdReserves() public view returns (uint256) {\n    return usdc.balanceOf(address(this));\n  }\n\n  /**\n   * @dev will mint 1 AVAI for 1.0075 USDC\n   */\n  function mint(uint256 amount) public nonReentrant {\n    require(amount != 0, 'Cannot mint 0 AVAI');\n\n    // This is because USDC has 6 decimal points, and avai has 18. USDC has 4. 18-6+4=16\n    uint256 fee = amount - (amount * 1e4) / usdcRate;\n    uint256 amountToSend = (amount * 1e16) / usdcRate;\n\n    if (avai.totalSupply() > 1000000e18) {\n      uint256 period = block.timestamp / (60 * 60); // 1 hour period\n      require(\n        accumulatedAVAI[period] + amountToSend <=\n          (avai.totalSupply() * hourlyLimit) / 10000,\n        'Too much AVAI minted this hour'\n      );\n      accumulatedAVAI[period] += amountToSend;\n    }\n\n    // Transfer USDC to contract\n    usdc.safeTransferFrom(msg.sender, address(this), amount);\n\n    // Transfer USDC fee to treasury\n    usdc.safeTransfer(treasury, fee);\n    // Transfer AVAI to sender\n    avai.mint(msg.sender, amountToSend);\n    emit Mint(msg.sender, amountToSend, fee);\n  }\n\n  /**\n   * @dev will redeem 1 AVAI for 0.9925 USDC\n   */\n  function redeem(uint256 amount) public nonReentrant {\n    require(amount != 0, 'Cannot redeem 0 USDC');\n    require(usdc.balanceOf(address(this)) != 0, 'Not enough USDC in reserves');\n    require(\n      usdc.balanceOf(address(this)) >= amount / 1e12,\n      'Not enough USDC in reserves'\n    );\n    // This is because USDC has 6 decimal points, and avai has 18. 18-6+4=16\n    uint256 amountToSend = (amount * avaiRate) / (1e16);\n    uint256 fee = amount / 1e12 - amountToSend;\n\n    // Burn excess, keep fee\n    avai.burn(msg.sender, amount);\n    // Transfer amount minus fees to sender\n    usdc.safeTransfer(msg.sender, amountToSend);\n    // Transfer USDC fee to treasury\n    usdc.safeTransfer(treasury, fee);\n    emit Redeem(msg.sender, amountToSend, fee);\n  }\n}\n"
    },
    "apps/avai/src/contracts/TeamPaymentSplit.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ncontract TeamPayment is Ownable {\n  using SafeERC20 for IERC20;\n  event PayeeAdded(address account, uint256 shares);\n  event PaymentReleased(address to, uint256 amount);\n  event PaymentReceived(address from, uint256 amount);\n\n  uint256 private _totalShares;\n  uint256 private _totalReleased;\n\n  mapping(address => uint256) private _shares;\n  mapping(address => uint256) private _released;\n  address[] private _payees;\n\n  IERC20 private orca;\n\n  constructor(\n    address orca_,\n    address[] memory payees,\n    uint256[] memory shares_\n  ) {\n    require(\n      payees.length == shares_.length,\n      'PaymentSplitter: payees and shares length mismatch'\n    );\n    require(payees.length > 0, 'PaymentSplitter: no payees');\n    require(\n      orca_ != address(0),\n      'PaymentSplitter: can not have orca token as zero address'\n    );\n\n    for (uint256 i = 0; i < payees.length; i++) {\n      _addPayee(payees[i], shares_[i]);\n    }\n\n    orca = IERC20(orca_);\n  }\n\n  /**\n   * @dev Getter for the total shares held by payees.\n   */\n  function totalShares() public view returns (uint256) {\n    return _totalShares;\n  }\n\n  /**\n   * @dev Getter for the total amount of Ether already released.\n   */\n  function totalReleased() public view returns (uint256) {\n    return _totalReleased;\n  }\n\n  /**\n   * @dev Getter for the amount of shares held by an account.\n   */\n  function shares(address account) public view returns (uint256) {\n    return _shares[account];\n  }\n\n  /**\n   * @dev Getter for the amount of Ether already released to a payee.\n   */\n  function released(address account) public view returns (uint256) {\n    return _released[account];\n  }\n\n  /**\n   * @dev Getter for the address of the payee number `index`.\n   */\n  function payee(uint256 index) public view returns (address) {\n    return _payees[index];\n  }\n\n  /**\n   * @dev Add a new payee to the contract.\n   * @param account The address of the payee to add.\n   * @param shares_ The number of shares owned by the payee.\n   */\n  function addPayee(address account, uint256 shares_) public onlyOwner {\n    _addPayee(account, shares_);\n  }\n\n  /**\n   * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n   * total shares and their previous withdrawals.\n   * @param account The account that payment can be released to\n   */\n  function release(address account) public virtual {\n    require(_shares[account] > 0, 'PaymentSplitter: account has no shares');\n\n    uint256 totalReceived = orca.balanceOf(address(this)) + _totalReleased;\n    uint256 payment = (totalReceived * _shares[account]) /\n      _totalShares -\n      _released[account];\n\n    require(payment != 0, 'PaymentSplitter: account is not due payment');\n\n    _released[account] = _released[account] + payment;\n    _totalReleased = _totalReleased + payment;\n\n    orca.safeTransfer(account, payment);\n    emit PaymentReleased(account, payment);\n  }\n\n  /**\n   * @dev Add a new payee to the contract.\n   * @param account The address of the payee to add.\n   * @param shares_ The number of shares owned by the payee.\n   */\n  function _addPayee(address account, uint256 shares_) private {\n    require(\n      account != address(0),\n      'PaymentSplitter: account is the zero address'\n    );\n    require(shares_ > 0, 'PaymentSplitter: shares are 0');\n    require(\n      _shares[account] == 0,\n      'PaymentSplitter: account already has shares'\n    );\n\n    _payees.push(account);\n    _shares[account] = shares_;\n    _totalShares = _totalShares + shares_;\n    emit PayeeAdded(account, shares_);\n  }\n}\n"
    },
    "apps/avai/src/contracts/PodLeader.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\n// Built off Yak's MasterYak, with alterations to allow for transfers of ERC20 instead of AVAX.\n// Good luck and have fun\ncontract PodLeader is Ownable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n\n  /// @notice Info of each user.\n  struct UserInfo {\n    uint256 amount; // How many tokens the user has provided.\n    uint256 rewardTokenDebt; // Reward debt for reward token. See explanation below.\n    //\n    // We do some fancy math here. Basically, any point in time, the amount of reward tokens\n    // entitled to a user but is pending to be distributed is:\n    //\n    //   pending reward = (user.amount * pool.accRewardsPerShare) - user.rewardDebt\n    //\n    // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\n    //   1. The pool's `accRewardsPerShare` (and `lastRewardTimestamp`) gets updated.\n    //   2. User receives the pending reward sent to his/her address.\n    //   3. User's `amount` gets updated.\n    //   4. User's `rewardDebt` gets updated.\n  }\n\n  /// @notice Info of each pool.\n  struct PoolInfo {\n    IERC20 token; // Address of token contract.\n    uint256 allocPoint; // How many allocation points assigned to this pool. Reward tokens to distribute per second.\n    uint256 lastRewardTimestamp; // Last timestamp where reward tokens were distributed.\n    uint256 accRewardsPerShare; // Accumulated reward tokens per share, times 1e12. See below.\n    uint256 totalStaked; // Total amount of token staked via Rewards Manager\n    uint16 depositFeeBP; // Deposit fee in basis points\n  }\n\n  IERC20 public orca;\n\n  /// @notice Rewards rewarded per second\n  uint256 public rewardsPerSecond;\n\n  /// @notice Info of each pool.\n  PoolInfo[] public poolInfo;\n\n  /// @notice Info of each user that stakes tokens\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n  // Treasury address\n  address public treasury;\n\n  /// @notice Total allocation points. Must be the sum of all allocation points in all pools.\n  uint256 public totalAllocPoint;\n\n  /// @notice The timestamp when rewards start.\n  uint256 public startTimestamp;\n\n  /// @notice The timestamp when rewards end.\n  uint256 public endTimestamp;\n\n  /// @notice Event emitted when a user deposits funds in the rewards manager\n  event Deposit(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount,\n    uint256 fee\n  );\n\n  /// @notice Event emitted when a user withdraws their original funds + rewards from the rewards manager\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n  /// @notice Event emitted when a user withdraws their original funds from the rewards manager without claiming rewards\n  event EmergencyWithdraw(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount\n  );\n\n  /// @notice Event emitted when new pool is added to the rewards manager\n  event PoolAdded(\n    uint256 indexed pid,\n    address indexed token,\n    uint256 allocPoints,\n    uint256 totalAllocPoints,\n    uint256 rewardStartTimestamp,\n    uint16 depositFeeBP\n  );\n\n  /// @notice Event emitted when pool allocation points are updated\n  event PoolUpdated(\n    uint256 indexed pid,\n    uint256 oldAllocPoints,\n    uint256 newAllocPoints,\n    uint256 newTotalAllocPoints\n  );\n\n  /// @notice Event emitted when the owner of the rewards manager contract is updated\n  event ChangedTreasury(\n    address indexed oldTreasury,\n    address indexed newTreasury\n  );\n\n  /// @notice Event emitted when the amount of reward tokens per seconds is updated\n  event ChangedRewardsPerSecond(\n    uint256 indexed oldRewardsPerSecond,\n    uint256 indexed newRewardsPerSecond\n  );\n\n  /// @notice Event emitted when the rewards start timestamp is set\n  event SetRewardsStartTimestamp(uint256 indexed startTimestamp);\n\n  /// @notice Event emitted when the rewards end timestamp is updated\n  event ChangedRewardsEndTimestamp(\n    uint256 indexed oldEndTimestamp,\n    uint256 indexed newEndTimestamp\n  );\n\n  /// @notice Event emitted when contract address is changed\n  event ChangedAddress(\n    string indexed addressType,\n    address indexed oldAddress,\n    address indexed newAddress\n  );\n\n  /// @notice Event emitted when deposit fee is updated\n  event DepositFeeUpdated(uint256 indexed pid, uint16 oldFee, uint16 newFee);\n\n  /**\n   * @notice Create a new Rewards Manager contract\n   * @param _startTimestamp timestamp when rewards will start\n   * @param _rewardsPerSecond initial amount of reward tokens to be distributed per second\n   */\n  constructor(\n    IERC20 _orca,\n    uint256 _startTimestamp,\n    uint256 _rewardsPerSecond,\n    address _treasury\n  ) {\n    startTimestamp = _startTimestamp == 0 ? block.timestamp : _startTimestamp;\n    emit SetRewardsStartTimestamp(startTimestamp);\n\n    rewardsPerSecond = _rewardsPerSecond;\n    emit ChangedRewardsPerSecond(0, _rewardsPerSecond);\n\n    // Set orca token address\n    orca = _orca;\n\n    treasury = _treasury;\n    emit ChangedTreasury(address(0), _treasury);\n  }\n\n  receive() external payable {}\n\n  /**\n   * @notice Sets the treasury where fees will go to\n   */\n  function setTreasury(address _treasury) public onlyOwner {\n    address oldTreasury = treasury;\n    treasury = _treasury;\n    emit ChangedTreasury(oldTreasury, _treasury);\n  }\n\n  /**\n   * @notice View function to see current poolInfo array length\n   * @return pool length\n   */\n  function poolLength() external view returns (uint256) {\n    return poolInfo.length;\n  }\n\n  /**\n   * @notice Add rewards to contract\n   * @dev Can only be called by the owner\n   */\n  function addRewardsBalance(uint256 amount) external onlyOwner {\n    orca.safeTransferFrom(msg.sender, address(this), amount);\n    _setRewardsEndTimestamp();\n  }\n\n  /**\n   * @notice Add a new reward token to the pool\n   * @dev Can only be called by the owner. DO NOT add the same token more than once. Rewards will be messed up if you do.\n   * @param allocPoint Number of allocation points to allot to this token/pool\n   * @param token The token that will be staked for rewards\n   * @param withUpdate if specified, update all pools before adding new pool\n   * @param _depositFeeBp If true, users get voting power for deposits\n   */\n  function add(\n    uint256 allocPoint,\n    address token,\n    bool withUpdate,\n    uint16 _depositFeeBp\n  ) external onlyOwner {\n    if (withUpdate) {\n      massUpdatePools();\n    }\n    uint256 rewardStartTimestamp = block.timestamp > startTimestamp\n      ? block.timestamp\n      : startTimestamp;\n    if (totalAllocPoint == 0) {\n      _setRewardsEndTimestamp();\n    }\n    totalAllocPoint = totalAllocPoint + allocPoint;\n    poolInfo.push(\n      PoolInfo({\n        token: IERC20(token),\n        allocPoint: allocPoint,\n        lastRewardTimestamp: rewardStartTimestamp,\n        accRewardsPerShare: 0,\n        totalStaked: 0,\n        depositFeeBP: _depositFeeBp\n      })\n    );\n    emit PoolAdded(\n      poolInfo.length - 1,\n      token,\n      allocPoint,\n      totalAllocPoint,\n      rewardStartTimestamp,\n      _depositFeeBp\n    );\n  }\n\n  /**\n   * @notice Update the given pool's allocation points\n   * @dev Can only be called by the owner\n   * @param pid The RewardManager pool id\n   * @param allocPoint New number of allocation points for pool\n   * @param withUpdate if specified, update all pools before setting allocation points\n   */\n  function set(\n    uint256 pid,\n    uint256 allocPoint,\n    bool withUpdate\n  ) external onlyOwner {\n    if (withUpdate) {\n      massUpdatePools();\n    }\n    totalAllocPoint = totalAllocPoint - poolInfo[pid].allocPoint + allocPoint;\n    emit PoolUpdated(\n      pid,\n      poolInfo[pid].allocPoint,\n      allocPoint,\n      totalAllocPoint\n    );\n    poolInfo[pid].allocPoint = allocPoint;\n  }\n\n  /**\n   * @notice Update the given pool's deposit fee\n   * @dev Can only be called by the owner\n   * @param pid The RewardManager pool id\n   * @param depositFee New deposit fee for the pool, in basis points\n   * @param withUpdate if specified, update all pools before updated deposit fee\n   */\n  function updateDepositFee(\n    uint256 pid,\n    uint16 depositFee,\n    bool withUpdate\n  ) external onlyOwner {\n    if (withUpdate) {\n      massUpdatePools();\n    }\n\n    emit DepositFeeUpdated(pid, poolInfo[pid].depositFeeBP, depositFee);\n    poolInfo[pid].depositFeeBP = depositFee;\n  }\n\n  /**\n   * @notice Returns true if rewards are actively being accumulated\n   */\n  function rewardsActive() public view returns (bool) {\n    return\n      block.timestamp >= startTimestamp &&\n        block.timestamp <= endTimestamp &&\n        totalAllocPoint > 0\n        ? true\n        : false;\n  }\n\n  /**\n   * @notice Return reward multiplier over the given from to to timestamp.\n   * @param from From timestamp\n   * @param to To timestamp\n   * @return multiplier\n   */\n  function getMultiplier(uint256 from, uint256 to)\n    public\n    view\n    returns (uint256)\n  {\n    uint256 toTimestamp = to > endTimestamp ? endTimestamp : to;\n    return toTimestamp > from ? toTimestamp - from : 0;\n  }\n\n  /**\n   * @notice View function to see pending rewards on frontend.\n   * @param pid pool id\n   * @param account user account to check\n   * @return pending rewards\n   */\n  function pendingRewards(uint256 pid, address account)\n    external\n    view\n    returns (uint256)\n  {\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][account];\n    uint256 accRewardsPerShare = pool.accRewardsPerShare;\n    uint256 tokenSupply = pool.totalStaked;\n    if (block.timestamp > pool.lastRewardTimestamp && tokenSupply != 0) {\n      uint256 multiplier = getMultiplier(\n        pool.lastRewardTimestamp,\n        block.timestamp\n      );\n      uint256 totalReward = (multiplier * rewardsPerSecond * pool.allocPoint) /\n        (totalAllocPoint);\n      accRewardsPerShare =\n        accRewardsPerShare +\n        ((totalReward * 1e12) / tokenSupply);\n    }\n\n    uint256 accumulatedRewards = (user.amount * accRewardsPerShare) / 1e12;\n\n    if (accumulatedRewards < user.rewardTokenDebt) {\n      return 0;\n    }\n\n    return accumulatedRewards - user.rewardTokenDebt;\n  }\n\n  /**\n   * @notice Update reward variables for all pools\n   * @dev Be careful of gas spending!\n   */\n  function massUpdatePools() public {\n    for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\n      updatePool(pid);\n    }\n  }\n\n  /**\n   * @notice Update reward variables of the given pool to be up-to-date\n   * @param pid pool id\n   */\n  function updatePool(uint256 pid) public {\n    PoolInfo storage pool = poolInfo[pid];\n    if (block.timestamp <= pool.lastRewardTimestamp) {\n      return;\n    }\n\n    uint256 tokenSupply = pool.totalStaked;\n    if (tokenSupply == 0) {\n      pool.lastRewardTimestamp = block.timestamp;\n      return;\n    }\n    uint256 multiplier = getMultiplier(\n      pool.lastRewardTimestamp,\n      block.timestamp\n    );\n    uint256 totalReward = (multiplier * rewardsPerSecond * pool.allocPoint) /\n      totalAllocPoint;\n    pool.accRewardsPerShare =\n      pool.accRewardsPerShare +\n      ((totalReward * 1e12) / tokenSupply);\n\n    pool.lastRewardTimestamp = block.timestamp;\n  }\n\n  /**\n   * @notice Deposit tokens to PodLeader for rewards allocation.\n   * @param pid pool id\n   * @param amount number of tokens to deposit\n   */\n  function deposit(uint256 pid, uint256 amount) external nonReentrant {\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][msg.sender];\n    _deposit(pid, amount, pool, user);\n  }\n\n  /**\n   * @notice Withdraw tokens from PodLeader, claiming rewards.\n   * @param pid pool id\n   * @param amount number of tokens to withdraw\n   */\n  function withdraw(uint256 pid, uint256 amount) external nonReentrant {\n    require(amount > 0, 'PodLeader::withdraw: amount must be > 0');\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][msg.sender];\n    _withdraw(pid, amount, pool, user);\n  }\n\n  /**\n   * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n   * @param pid pool id\n   */\n  function emergencyWithdraw(uint256 pid) external nonReentrant {\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][msg.sender];\n\n    if (user.amount > 0) {\n      pool.totalStaked = pool.totalStaked - user.amount;\n      pool.token.safeTransfer(msg.sender, user.amount);\n\n      emit EmergencyWithdraw(msg.sender, pid, user.amount);\n\n      user.amount = 0;\n      user.rewardTokenDebt = 0;\n    }\n  }\n\n  /**\n   * @notice Set new rewards per second\n   * @dev Can only be called by the owner\n   * @param newRewardsPerSecond new amount of rewards to reward each second\n   */\n  function setRewardsPerSecond(uint256 newRewardsPerSecond) external onlyOwner {\n    emit ChangedRewardsPerSecond(rewardsPerSecond, newRewardsPerSecond);\n    rewardsPerSecond = newRewardsPerSecond;\n    _setRewardsEndTimestamp();\n  }\n\n  /**\n   * @notice Internal implementation of deposit\n   * @param pid pool id\n   * @param amount number of tokens to deposit\n   * @param pool the pool info\n   * @param user the user info\n   */\n  function _deposit(\n    uint256 pid,\n    uint256 amount,\n    PoolInfo storage pool,\n    UserInfo storage user\n  ) internal {\n    updatePool(pid);\n\n    if (user.amount > 0) {\n      uint256 pendingRewardAmount = (user.amount * pool.accRewardsPerShare) /\n        1e12 -\n        user.rewardTokenDebt;\n\n      if (pendingRewardAmount > 0) {\n        _safeRewardsTransfer(msg.sender, pendingRewardAmount);\n      }\n    }\n\n    pool.token.safeTransferFrom(msg.sender, address(this), amount);\n\n    uint256 depositFee = (amount * pool.depositFeeBP) / 10000;\n    if (depositFee > 0) {\n      pool.token.safeTransfer(treasury, depositFee);\n      pool.totalStaked = pool.totalStaked + amount - depositFee;\n      user.amount = user.amount + amount - depositFee;\n    } else {\n      pool.totalStaked = pool.totalStaked + amount;\n      user.amount = user.amount + amount;\n    }\n\n    user.rewardTokenDebt = (user.amount * pool.accRewardsPerShare) / 1e12;\n\n    emit Deposit(msg.sender, pid, amount, depositFee);\n  }\n\n  /**\n   * @notice Internal implementation of withdraw\n   * @param pid pool id\n   * @param amount number of tokens to withdraw\n   * @param pool the pool info\n   * @param user the user info\n   */\n  function _withdraw(\n    uint256 pid,\n    uint256 amount,\n    PoolInfo storage pool,\n    UserInfo storage user\n  ) internal {\n    require(\n      user.amount >= amount,\n      'PodLeader::_withdraw: amount > user balance'\n    );\n\n    updatePool(pid);\n\n    uint256 pendingRewardAmount = (user.amount * pool.accRewardsPerShare) /\n      1e12 -\n      user.rewardTokenDebt;\n    user.amount = user.amount - amount;\n    user.rewardTokenDebt = (user.amount * pool.accRewardsPerShare) / 1e12;\n\n    if (pendingRewardAmount > 0) {\n      _safeRewardsTransfer(msg.sender, pendingRewardAmount);\n    }\n\n    pool.totalStaked = pool.totalStaked - amount;\n    pool.token.safeTransfer(msg.sender, amount);\n\n    emit Withdraw(msg.sender, pid, amount);\n  }\n\n  /**\n   * @notice Safe reward transfer function, just in case if rounding error causes pool to not have enough reward token.\n   * @param to account that is receiving rewards\n   * @param amount amount of rewards to send\n   */\n  function _safeRewardsTransfer(address to, uint256 amount) internal {\n    uint256 rewardTokenBalance = orca.balanceOf(address(this));\n    if (amount > rewardTokenBalance) {\n      orca.safeTransfer(to, rewardTokenBalance);\n    } else {\n      orca.safeTransfer(to, amount);\n    }\n  }\n\n  /**\n   * @notice Internal function that updates rewards end timestamp based on rewards per second and the balance of the contract\n   */\n  function _setRewardsEndTimestamp() internal {\n    if (rewardsPerSecond > 0) {\n      uint256 rewardFromTimestamp = block.timestamp >= startTimestamp\n        ? block.timestamp\n        : startTimestamp;\n      uint256 newEndTimestamp = rewardFromTimestamp +\n        (orca.balanceOf(address(this)) / rewardsPerSecond);\n      if (\n        newEndTimestamp > rewardFromTimestamp && newEndTimestamp != endTimestamp\n      ) {\n        emit ChangedRewardsEndTimestamp(endTimestamp, newEndTimestamp);\n        endTimestamp = newEndTimestamp;\n      }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "apps/avai/src/contracts/SingleStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\n// Built off Yak's MasterYak, with alterations to allow for transfers of ERC20 instead of AVAX.\n// Good luck and have fun\ncontract SingleStaking is Ownable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n\n  /// @notice Info of each user.\n  struct UserInfo {\n    uint256 amount; // How many tokens the user has provided.\n    uint256 rewardTokenDebt; // Reward debt for reward token. See explanation below.\n    //\n    // We do some fancy math here. Basically, any point in time, the amount of reward tokens\n    // entitled to a user but is pending to be distributed is:\n    //\n    //   pending reward = (user.amount * pool.accRewardsPerShare) - user.rewardDebt\n    //\n    // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\n    //   1. The pool's `accRewardsPerShare` (and `lastRewardTimestamp`) gets updated.\n    //   2. User receives the pending reward sent to his/her address.\n    //   3. User's `amount` gets updated.\n    //   4. User's `rewardDebt` gets updated.\n  }\n\n  /// @notice Info of each pool.\n  struct PoolInfo {\n    IERC20 token; // Address of token contract.\n    uint256 allocPoint; // How many allocation points assigned to this pool. Reward tokens to distribute per second.\n    uint256 lastRewardTimestamp; // Last timestamp where reward tokens were distributed.\n    uint256 accRewardsPerShare; // Accumulated reward tokens per share, times 1e12. See below.\n    uint256 totalStaked; // Total amount of token staked via Rewards Manager\n  }\n\n  IERC20 public immutable rewardToken;\n\n  /// @notice Rewards rewarded per second\n  uint256 public rewardsPerSecond;\n\n  /// @notice Info of each pool.\n  PoolInfo[] public poolInfo;\n\n  /// @notice Info of each user that stakes tokens\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n  /// @notice Total allocation points. Must be the sum of all allocation points in all pools.\n  uint256 public totalAllocPoint;\n\n  /// @notice The timestamp when rewards start.\n  uint256 public startTimestamp;\n\n  /// @notice The timestamp when rewards end.\n  uint256 public endTimestamp;\n\n  /// @notice Event emitted when a user deposits funds in the rewards manager\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n\n  /// @notice Event emitted when a user withdraws their original funds + rewards from the rewards manager\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n  /// @notice Event emitted when a user withdraws their original funds from the rewards manager without claiming rewards\n  event EmergencyWithdraw(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount\n  );\n\n  /// @notice Event emitted when new pool is added to the rewards manager\n  event PoolAdded(\n    uint256 indexed pid,\n    address indexed token,\n    uint256 allocPoints,\n    uint256 totalAllocPoints,\n    uint256 rewardStartTimestamp\n  );\n\n  /// @notice Event emitted when pool allocation points are updated\n  event PoolUpdated(\n    uint256 indexed pid,\n    uint256 oldAllocPoints,\n    uint256 newAllocPoints,\n    uint256 newTotalAllocPoints\n  );\n\n  /// @notice Event emitted when the amount of reward tokens per seconds is updated\n  event ChangedRewardsPerSecond(\n    uint256 indexed oldRewardsPerSecond,\n    uint256 indexed newRewardsPerSecond\n  );\n\n  /// @notice Event emitted when the rewards start timestamp is set\n  event SetRewardsStartTimestamp(uint256 indexed startTimestamp);\n\n  /// @notice Event emitted when the rewards end timestamp is updated\n  event ChangedRewardsEndTimestamp(\n    uint256 indexed oldEndTimestamp,\n    uint256 indexed newEndTimestamp\n  );\n\n  /**\n   * @notice Create a new Rewards Manager contract\n   * @param _startTimestamp timestamp when rewards will start\n   * @param _rewardsPerSecond initial amount of reward tokens to be distributed per second\n   */\n  constructor(\n    IERC20 _rewardToken,\n    uint256 _startTimestamp,\n    uint256 _rewardsPerSecond\n  ) {\n    startTimestamp = _startTimestamp == 0 ? block.timestamp : _startTimestamp;\n    emit SetRewardsStartTimestamp(startTimestamp);\n\n    rewardsPerSecond = _rewardsPerSecond;\n    emit ChangedRewardsPerSecond(0, _rewardsPerSecond);\n\n    // Set orca token address\n    rewardToken = _rewardToken;\n  }\n\n  /**\n   * @notice View function to see current poolInfo array length\n   * @return pool length\n   */\n  function poolLength() external view returns (uint256) {\n    return poolInfo.length;\n  }\n\n  /**\n   * @notice Add rewards to contract\n   * @dev Can only be called by the owner\n   */\n  function addRewardsBalance(uint256 amount) external onlyOwner {\n    massUpdatePools();\n    rewardToken.safeTransferFrom(msg.sender, address(this), amount);\n    _setRewardsEndTimestamp();\n  }\n\n  /**\n   * @notice Add a new reward token to the pool\n   * @dev Can only be called by the owner.\n   * @param allocPoint Number of allocation points to allot to this token/pool\n   * @param token The token that will be staked for rewards\n   * @param withUpdate if specified, update all pools before adding new pool\n   */\n  function add(\n    uint256 allocPoint,\n    address token,\n    bool withUpdate\n  ) external onlyOwner {\n    if (withUpdate) {\n      massUpdatePools();\n    }\n    uint256 rewardStartTimestamp = block.timestamp > startTimestamp\n      ? block.timestamp\n      : startTimestamp;\n    if (totalAllocPoint == 0) {\n      _setRewardsEndTimestamp();\n    }\n    totalAllocPoint = totalAllocPoint + allocPoint;\n    poolInfo.push(\n      PoolInfo({\n        token: IERC20(token),\n        allocPoint: allocPoint,\n        lastRewardTimestamp: rewardStartTimestamp,\n        accRewardsPerShare: 0,\n        totalStaked: 0\n      })\n    );\n    emit PoolAdded(\n      poolInfo.length - 1,\n      token,\n      allocPoint,\n      totalAllocPoint,\n      rewardStartTimestamp\n    );\n  }\n\n  /**\n   * @notice Update the given pool's allocation points\n   * @dev Can only be called by the owner\n   * @param pid The RewardManager pool id\n   * @param allocPoint New number of allocation points for pool\n   * @param withUpdate if specified, update all pools before setting allocation points\n   */\n  function set(\n    uint256 pid,\n    uint256 allocPoint,\n    bool withUpdate\n  ) external onlyOwner {\n    if (withUpdate) {\n      massUpdatePools();\n    }\n    totalAllocPoint = totalAllocPoint - poolInfo[pid].allocPoint + allocPoint;\n    emit PoolUpdated(\n      pid,\n      poolInfo[pid].allocPoint,\n      allocPoint,\n      totalAllocPoint\n    );\n    poolInfo[pid].allocPoint = allocPoint;\n  }\n\n  /**\n   * @notice Returns true if rewards are actively being accumulated\n   */\n  function rewardsActive() public view returns (bool) {\n    return\n      block.timestamp >= startTimestamp &&\n        block.timestamp <= endTimestamp &&\n        totalAllocPoint > 0\n        ? true\n        : false;\n  }\n\n  /**\n   * @notice Return reward multiplier over the given from to to timestamp.\n   * @param from From timestamp\n   * @param to To timestamp\n   * @return multiplier\n   */\n  function getMultiplier(uint256 from, uint256 to)\n    public\n    view\n    returns (uint256)\n  {\n    uint256 toTimestamp = to > endTimestamp ? endTimestamp : to;\n    return toTimestamp > from ? toTimestamp - from : 0;\n  }\n\n  /**\n   * @notice View function to see pending rewards on frontend.\n   * @param pid pool id\n   * @param account user account to check\n   * @return pending rewards\n   */\n  function pendingRewards(uint256 pid, address account)\n    external\n    view\n    returns (uint256)\n  {\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][account];\n    uint256 accRewardsPerShare = pool.accRewardsPerShare;\n    uint256 tokenSupply = pool.totalStaked;\n    if (\n      block.timestamp > pool.lastRewardTimestamp &&\n      tokenSupply != 0 &&\n      totalAllocPoint != 0\n    ) {\n      uint256 multiplier = getMultiplier(\n        pool.lastRewardTimestamp,\n        block.timestamp\n      );\n      uint256 totalReward = (multiplier * rewardsPerSecond * pool.allocPoint) /\n        (totalAllocPoint);\n      accRewardsPerShare =\n        accRewardsPerShare +\n        ((totalReward * 1e12) / tokenSupply);\n    }\n\n    uint256 accumulatedRewards = (user.amount * accRewardsPerShare) / 1e12;\n\n    if (accumulatedRewards < user.rewardTokenDebt) {\n      return 0;\n    }\n\n    return accumulatedRewards - user.rewardTokenDebt;\n  }\n\n  /**\n   * @notice Update reward variables for all pools\n   * @dev Be careful of gas spending!\n   */\n  function massUpdatePools() public {\n    for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\n      updatePool(pid);\n    }\n  }\n\n  /**\n   * @notice Update reward variables of the given pool to be up-to-date\n   * @param pid pool id\n   */\n  function updatePool(uint256 pid) public {\n    PoolInfo storage pool = poolInfo[pid];\n    if (block.timestamp <= pool.lastRewardTimestamp) {\n      return;\n    }\n\n    uint256 tokenSupply = pool.totalStaked;\n    if (tokenSupply == 0) {\n      pool.lastRewardTimestamp = block.timestamp;\n      return;\n    }\n    uint256 multiplier = getMultiplier(\n      pool.lastRewardTimestamp,\n      block.timestamp\n    );\n    uint256 totalReward = (multiplier * rewardsPerSecond * pool.allocPoint) /\n      totalAllocPoint;\n    pool.accRewardsPerShare =\n      pool.accRewardsPerShare +\n      ((totalReward * 1e12) / tokenSupply);\n\n    pool.lastRewardTimestamp = block.timestamp;\n  }\n\n  /**\n   * @notice Deposit tokens to PodLeader for rewards allocation.\n   * @param pid pool id\n   * @param amount number of tokens to deposit\n   */\n  function deposit(uint256 pid, uint256 amount) external nonReentrant {\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][msg.sender];\n    _deposit(pid, amount, pool, user);\n  }\n\n  /**\n   * @notice Withdraw tokens from PodLeader, claiming rewards.\n   * @param pid pool id\n   * @param amount number of tokens to withdraw\n   */\n  function withdraw(uint256 pid, uint256 amount) external nonReentrant {\n    require(amount > 0, 'PodLeader::withdraw: amount must be > 0');\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][msg.sender];\n    _withdraw(pid, amount, pool, user);\n  }\n\n  /**\n   * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n   * @param pid pool id\n   */\n  function emergencyWithdraw(uint256 pid) external nonReentrant {\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][msg.sender];\n\n    if (user.amount > 0) {\n      pool.totalStaked = pool.totalStaked - user.amount;\n      pool.token.safeTransfer(msg.sender, user.amount);\n\n      emit EmergencyWithdraw(msg.sender, pid, user.amount);\n\n      user.amount = 0;\n      user.rewardTokenDebt = 0;\n    }\n  }\n\n  /**\n   * @notice Set new rewards per second\n   * @dev Can only be called by the owner\n   * @param newRewardsPerSecond new amount of rewards to reward each second\n   */\n  function setRewardsPerSecond(uint256 newRewardsPerSecond) external onlyOwner {\n    massUpdatePools();\n    emit ChangedRewardsPerSecond(rewardsPerSecond, newRewardsPerSecond);\n    rewardsPerSecond = newRewardsPerSecond;\n    _setRewardsEndTimestamp();\n  }\n\n  /**\n   * @notice Internal implementation of deposit\n   * @param pid pool id\n   * @param amount number of tokens to deposit\n   * @param pool the pool info\n   * @param user the user info\n   */\n  function _deposit(\n    uint256 pid,\n    uint256 amount,\n    PoolInfo storage pool,\n    UserInfo storage user\n  ) internal {\n    updatePool(pid);\n\n    if (user.amount > 0) {\n      uint256 pendingRewardAmount = (user.amount * pool.accRewardsPerShare) /\n        1e12 -\n        user.rewardTokenDebt;\n\n      if (pendingRewardAmount > 0) {\n        _safeRewardsTransfer(msg.sender, pendingRewardAmount);\n      }\n    }\n\n    pool.token.safeTransferFrom(msg.sender, address(this), amount);\n\n    pool.totalStaked = pool.totalStaked + amount;\n    user.amount = user.amount + amount;\n\n    user.rewardTokenDebt = (user.amount * pool.accRewardsPerShare) / 1e12;\n\n    emit Deposit(msg.sender, pid, amount);\n  }\n\n  /**\n   * @notice Internal implementation of withdraw\n   * @param pid pool id\n   * @param amount number of tokens to withdraw\n   * @param pool the pool info\n   * @param user the user info\n   */\n  function _withdraw(\n    uint256 pid,\n    uint256 amount,\n    PoolInfo storage pool,\n    UserInfo storage user\n  ) internal {\n    require(\n      user.amount >= amount,\n      'PodLeader::_withdraw: amount > user balance'\n    );\n\n    updatePool(pid);\n\n    uint256 pendingRewardAmount = (user.amount * pool.accRewardsPerShare) /\n      1e12 -\n      user.rewardTokenDebt;\n    user.amount = user.amount - amount;\n    user.rewardTokenDebt = (user.amount * pool.accRewardsPerShare) / 1e12;\n\n    if (pendingRewardAmount > 0) {\n      _safeRewardsTransfer(msg.sender, pendingRewardAmount);\n    }\n\n    pool.totalStaked = pool.totalStaked - amount;\n    pool.token.safeTransfer(msg.sender, amount);\n\n    emit Withdraw(msg.sender, pid, amount);\n  }\n\n  /**\n   * @notice Safe reward transfer function, just in case if rounding error causes pool to not have enough reward token.\n   * @param to account that is receiving rewards\n   * @param amount amount of rewards to send\n   */\n  function _safeRewardsTransfer(address to, uint256 amount) internal {\n    uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\n    if (amount > rewardTokenBalance) {\n      rewardToken.safeTransfer(to, rewardTokenBalance);\n    } else {\n      rewardToken.safeTransfer(to, amount);\n    }\n  }\n\n  /**\n   * @notice Internal function that updates rewards end timestamp based on rewards per second and the balance of the contract\n   */\n  function _setRewardsEndTimestamp() internal {\n    if (rewardsPerSecond > 0) {\n      uint256 rewardFromTimestamp = block.timestamp >= startTimestamp\n        ? block.timestamp\n        : startTimestamp;\n\n      uint256 newEndTimestamp = rewardFromTimestamp +\n        (rewardToken.balanceOf(address(this))) /\n        rewardsPerSecond;\n\n      if (\n        newEndTimestamp > rewardFromTimestamp && newEndTimestamp != endTimestamp\n      ) {\n        emit ChangedRewardsEndTimestamp(endTimestamp, newEndTimestamp);\n        endTimestamp = newEndTimestamp;\n      }\n    }\n  }\n}\n"
    },
    "apps/avai/src/contracts/Partner/Storm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '../SingleStaking.sol';\n\ncontract StormSingleStaking is SingleStaking {\n  constructor(\n    IERC20 _rewardToken,\n    uint256 _startTimestamp,\n    uint256 _rewardsPerSecond\n  ) SingleStaking(_rewardToken, _startTimestamp, _rewardsPerSecond) {}\n}\n"
    },
    "apps/avai/src/contracts/OrcaStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\n// Altered from PodLeader for single staking and no fee\ncontract OrcaStaking is Ownable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n\n  /// @notice Info of each user.\n  struct UserInfo {\n    uint256 amount; // How many tokens the user has provided.\n    uint256 rewardTokenDebt; // Reward debt for reward token. See explanation below.\n    //\n    // We do some fancy math here. Basically, any point in time, the amount of reward tokens\n    // entitled to a user but is pending to be distributed is:\n    //\n    //   pending reward = (user.amount * pool.accRewardsPerShare) - user.rewardDebt\n    //\n    // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\n    //   1. The pool's `accRewardsPerShare` (and `lastRewardTimestamp`) gets updated.\n    //   2. User receives the pending reward sent to his/her address.\n    //   3. User's `amount` gets updated.\n    //   4. User's `rewardDebt` gets updated.\n  }\n\n  /// @notice Info of each pool.\n  struct PoolInfo {\n    IERC20 token; // Address of token contract.\n    uint256 allocPoint; // How many allocation points assigned to this pool. Reward tokens to distribute per second.\n    uint256 lastRewardTimestamp; // Last timestamp where reward tokens were distributed.\n    uint256 accRewardsPerShare; // Accumulated reward tokens per share, times 1e12. See below.\n    uint256 totalStaked; // Total amount of token staked via Rewards Manager\n  }\n\n  /// @notice Rewards rewarded per second\n  uint256 public rewardsPerSecond;\n\n  /// @notice Info of each pool.\n  PoolInfo[] public poolInfo;\n\n  /// @notice Info of each user that stakes tokens\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n  // Treasury address\n  address public treasury;\n\n  /// @notice Total allocation points. Must be the sum of all allocation points in all pools.\n  uint256 public totalAllocPoint;\n\n  /// @notice The timestamp when rewards start.\n  uint256 public startTimestamp;\n\n  /// @notice The timestamp when rewards end.\n  uint256 public endTimestamp;\n\n  /// @notice Event emitted when a user deposits funds in the rewards manager\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n\n  /// @notice Event emitted when a user withdraws their original funds + rewards from the rewards manager\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n  /// @notice Event emitted when a user withdraws their original funds from the rewards manager without claiming rewards\n  event EmergencyWithdraw(\n    address indexed user,\n    uint256 indexed pid,\n    uint256 amount\n  );\n\n  /// @notice Event emitted when new pool is added to the rewards manager\n  event PoolAdded(\n    uint256 indexed pid,\n    address indexed token,\n    uint256 allocPoints,\n    uint256 totalAllocPoints,\n    uint256 rewardStartTimestamp\n  );\n\n  /// @notice Event emitted when pool allocation points are updated\n  event PoolUpdated(\n    uint256 indexed pid,\n    uint256 oldAllocPoints,\n    uint256 newAllocPoints,\n    uint256 newTotalAllocPoints\n  );\n\n  /// @notice Event emitted when the owner of the rewards manager contract is updated\n  event ChangedTreasury(\n    address indexed oldTreasury,\n    address indexed newTreasury\n  );\n\n  /// @notice Event emitted when the amount of reward tokens per seconds is updated\n  event ChangedRewardsPerSecond(\n    uint256 indexed oldRewardsPerSecond,\n    uint256 indexed newRewardsPerSecond\n  );\n\n  /// @notice Event emitted when the rewards start timestamp is set\n  event SetRewardsStartTimestamp(uint256 indexed startTimestamp);\n\n  /// @notice Event emitted when the rewards end timestamp is updated\n  event ChangedRewardsEndTimestamp(\n    uint256 indexed oldEndTimestamp,\n    uint256 indexed newEndTimestamp\n  );\n\n  /// @notice Event emitted when contract address is changed\n  event ChangedAddress(\n    string indexed addressType,\n    address indexed oldAddress,\n    address indexed newAddress\n  );\n\n  /**\n   * @notice Create a new Rewards Manager contract\n   * @param _startTimestamp timestamp when rewards will start\n   * @param _rewardsPerSecond initial amount of reward tokens to be distributed per second\n   */\n  constructor(\n    uint256 _startTimestamp,\n    uint256 _rewardsPerSecond,\n    address _treasury\n  ) {\n    startTimestamp = _startTimestamp == 0 ? block.timestamp : _startTimestamp;\n    emit SetRewardsStartTimestamp(startTimestamp);\n\n    rewardsPerSecond = _rewardsPerSecond;\n    emit ChangedRewardsPerSecond(0, _rewardsPerSecond);\n\n    treasury = _treasury;\n    emit ChangedTreasury(address(0), _treasury);\n  }\n\n  /**\n   * @dev Only relayer or owner can add to this\n   */\n  modifier onlyTreasuryOrOwner() {\n    require(\n      owner() == msg.sender || msg.sender == treasury,\n      'Cannot do this, not owner or treasury.'\n    );\n    _;\n  }\n\n  receive() external payable {}\n\n  /**\n   * @notice Sets the treasury where fees will go to\n   */\n  function setTreasury(address _treasury) public onlyOwner {\n    address oldTreasury = treasury;\n    treasury = _treasury;\n    emit ChangedTreasury(oldTreasury, _treasury);\n  }\n\n  /**\n   * @notice View function to see current poolInfo array length\n   * @return pool length\n   */\n  function poolLength() external view returns (uint256) {\n    return poolInfo.length;\n  }\n\n  /**\n   * @notice Add rewards to contract\n   * @dev Can only be called by the owner\n   */\n  function addRewardsBalance() external payable onlyTreasuryOrOwner {\n    _setRewardsEndTimestamp();\n  }\n\n  /**\n   * @notice Add a new reward token to the pool\n   * @dev Can only be called by the owner. DO NOT add the same token more than once. Rewards will be messed up if you do.\n   * @param allocPoint Number of allocation points to allot to this token/pool\n   * @param token The token that will be staked for rewards\n   * @param withUpdate if specified, update all pools before adding new pool\n   */\n  function add(\n    uint256 allocPoint,\n    address token,\n    bool withUpdate\n  ) external onlyOwner {\n    if (withUpdate) {\n      massUpdatePools();\n    }\n    uint256 rewardStartTimestamp = block.timestamp > startTimestamp\n      ? block.timestamp\n      : startTimestamp;\n    if (totalAllocPoint == 0) {\n      _setRewardsEndTimestamp();\n    }\n    totalAllocPoint = totalAllocPoint + allocPoint;\n    poolInfo.push(\n      PoolInfo({\n        token: IERC20(token),\n        allocPoint: allocPoint,\n        lastRewardTimestamp: rewardStartTimestamp,\n        accRewardsPerShare: 0,\n        totalStaked: 0\n      })\n    );\n    emit PoolAdded(\n      poolInfo.length - 1,\n      token,\n      allocPoint,\n      totalAllocPoint,\n      rewardStartTimestamp\n    );\n  }\n\n  /**\n   * @notice Update the given pool's allocation points\n   * @dev Can only be called by the owner\n   * @param pid The RewardManager pool id\n   * @param allocPoint New number of allocation points for pool\n   * @param withUpdate if specified, update all pools before setting allocation points\n   */\n  function set(\n    uint256 pid,\n    uint256 allocPoint,\n    bool withUpdate\n  ) external onlyOwner {\n    if (withUpdate) {\n      massUpdatePools();\n    }\n    totalAllocPoint = totalAllocPoint - poolInfo[pid].allocPoint + allocPoint;\n    emit PoolUpdated(\n      pid,\n      poolInfo[pid].allocPoint,\n      allocPoint,\n      totalAllocPoint\n    );\n    poolInfo[pid].allocPoint = allocPoint;\n  }\n\n  /**\n   * @notice Returns true if rewards are actively being accumulated\n   */\n  function rewardsActive() public view returns (bool) {\n    return\n      block.timestamp >= startTimestamp &&\n        block.timestamp <= endTimestamp &&\n        totalAllocPoint > 0\n        ? true\n        : false;\n  }\n\n  /**\n   * @notice Return reward multiplier over the given from to to timestamp.\n   * @param from From timestamp\n   * @param to To timestamp\n   * @return multiplier\n   */\n  function getMultiplier(uint256 from, uint256 to)\n    public\n    view\n    returns (uint256)\n  {\n    uint256 toTimestamp = to > endTimestamp ? endTimestamp : to;\n    return toTimestamp > from ? toTimestamp - from : 0;\n  }\n\n  /**\n   * @notice View function to see pending rewards on frontend.\n   * @param pid pool id\n   * @param account user account to check\n   * @return pending rewards\n   */\n  function pendingRewards(uint256 pid, address account)\n    external\n    view\n    returns (uint256)\n  {\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][account];\n    uint256 accRewardsPerShare = pool.accRewardsPerShare;\n    uint256 tokenSupply = pool.totalStaked;\n    if (block.timestamp > pool.lastRewardTimestamp && tokenSupply != 0) {\n      uint256 multiplier = getMultiplier(\n        pool.lastRewardTimestamp,\n        block.timestamp\n      );\n      uint256 totalReward = (multiplier * rewardsPerSecond * pool.allocPoint) /\n        (totalAllocPoint);\n      accRewardsPerShare =\n        accRewardsPerShare +\n        ((totalReward * 1e12) / tokenSupply);\n    }\n\n    uint256 accumulatedRewards = (user.amount * accRewardsPerShare) / 1e12;\n\n    if (accumulatedRewards < user.rewardTokenDebt) {\n      return 0;\n    }\n\n    return accumulatedRewards - user.rewardTokenDebt;\n  }\n\n  /**\n   * @notice Update reward variables for all pools\n   * @dev Be careful of gas spending!\n   */\n  function massUpdatePools() public {\n    for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\n      updatePool(pid);\n    }\n  }\n\n  /**\n   * @notice Update reward variables of the given pool to be up-to-date\n   * @param pid pool id\n   */\n  function updatePool(uint256 pid) public {\n    PoolInfo storage pool = poolInfo[pid];\n    if (block.timestamp <= pool.lastRewardTimestamp) {\n      return;\n    }\n\n    uint256 tokenSupply = pool.totalStaked;\n    if (tokenSupply == 0) {\n      pool.lastRewardTimestamp = block.timestamp;\n      return;\n    }\n    uint256 multiplier = getMultiplier(\n      pool.lastRewardTimestamp,\n      block.timestamp\n    );\n    uint256 totalReward = (multiplier * rewardsPerSecond * pool.allocPoint) /\n      totalAllocPoint;\n    pool.accRewardsPerShare =\n      pool.accRewardsPerShare +\n      ((totalReward * 1e12) / tokenSupply);\n\n    pool.lastRewardTimestamp = block.timestamp;\n  }\n\n  /**\n   * @notice Deposit tokens to Staking for rewards allocation.\n   * @param pid pool id\n   * @param amount number of tokens to deposit\n   */\n  function deposit(uint256 pid, uint256 amount) external nonReentrant {\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][msg.sender];\n    _deposit(pid, amount, pool, user);\n  }\n\n  /**\n   * @notice Withdraw tokens from Staking, claiming rewards.\n   * @param pid pool id\n   * @param amount number of tokens to withdraw\n   */\n  function withdraw(uint256 pid, uint256 amount) external nonReentrant {\n    require(amount > 0, 'Staking::withdraw: amount must be > 0');\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][msg.sender];\n    _withdraw(pid, amount, pool, user);\n  }\n\n  /**\n   * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n   * @param pid pool id\n   */\n  function emergencyWithdraw(uint256 pid) external nonReentrant {\n    PoolInfo storage pool = poolInfo[pid];\n    UserInfo storage user = userInfo[pid][msg.sender];\n\n    if (user.amount > 0) {\n      pool.totalStaked = pool.totalStaked - user.amount;\n      pool.token.safeTransfer(msg.sender, user.amount);\n\n      emit EmergencyWithdraw(msg.sender, pid, user.amount);\n\n      user.amount = 0;\n      user.rewardTokenDebt = 0;\n    }\n  }\n\n  /**\n   * @notice Set new rewards per second\n   * @dev Can only be called by the owner or relayer, for autotasks\n   * @param newRewardsPerSecond new amount of rewards to reward each second\n   */\n  function setRewardsPerSecond(uint256 newRewardsPerSecond)\n    external\n    onlyTreasuryOrOwner\n  {\n    emit ChangedRewardsPerSecond(rewardsPerSecond, newRewardsPerSecond);\n    rewardsPerSecond = newRewardsPerSecond;\n    _setRewardsEndTimestamp();\n  }\n\n  /**\n   * @notice Internal implementation of deposit\n   * @param pid pool id\n   * @param amount number of tokens to deposit\n   * @param pool the pool info\n   * @param user the user info\n   */\n  function _deposit(\n    uint256 pid,\n    uint256 amount,\n    PoolInfo storage pool,\n    UserInfo storage user\n  ) internal {\n    updatePool(pid);\n\n    if (user.amount > 0) {\n      uint256 pendingRewardAmount = (user.amount * pool.accRewardsPerShare) /\n        1e12 -\n        user.rewardTokenDebt;\n\n      if (pendingRewardAmount > 0) {\n        _safeRewardsTransfer(payable(msg.sender), pendingRewardAmount);\n      }\n    }\n\n    pool.token.safeTransferFrom(msg.sender, address(this), amount);\n\n    pool.totalStaked = pool.totalStaked + amount;\n    user.amount = user.amount + amount;\n\n    user.rewardTokenDebt = (user.amount * pool.accRewardsPerShare) / 1e12;\n\n    emit Deposit(msg.sender, pid, amount);\n  }\n\n  /**\n   * @notice Internal implementation of withdraw\n   * @param pid pool id\n   * @param amount number of tokens to withdraw\n   * @param pool the pool info\n   * @param user the user info\n   */\n  function _withdraw(\n    uint256 pid,\n    uint256 amount,\n    PoolInfo storage pool,\n    UserInfo storage user\n  ) internal {\n    require(user.amount >= amount, 'Staking::_withdraw: amount > user balance');\n\n    updatePool(pid);\n\n    uint256 pendingRewardAmount = (user.amount * pool.accRewardsPerShare) /\n      1e12 -\n      user.rewardTokenDebt;\n    user.amount = user.amount - amount;\n    user.rewardTokenDebt = (user.amount * pool.accRewardsPerShare) / 1e12;\n\n    if (pendingRewardAmount > 0) {\n      _safeRewardsTransfer(payable(msg.sender), pendingRewardAmount);\n    }\n\n    pool.totalStaked = pool.totalStaked - amount;\n    pool.token.safeTransfer(msg.sender, amount);\n\n    emit Withdraw(msg.sender, pid, amount);\n  }\n\n  /**\n   * @notice Safe reward transfer function, just in case if rounding error causes pool to not have enough reward token.\n   * @param to account that is receiving rewards\n   * @param amount amount of rewards to send\n   */\n  function _safeRewardsTransfer(address payable to, uint256 amount) internal {\n    uint256 rewardTokenBalance = address(this).balance;\n    if (amount > rewardTokenBalance) {\n      to.transfer(rewardTokenBalance);\n    } else {\n      to.transfer(amount);\n    }\n  }\n\n  /**\n   * @notice Internal function that updates rewards end timestamp based on rewards per second and the balance of the contract\n   */\n  function _setRewardsEndTimestamp() internal {\n    if (rewardsPerSecond > 0) {\n      uint256 rewardFromTimestamp = block.timestamp >= startTimestamp\n        ? block.timestamp\n        : startTimestamp;\n      uint256 newEndTimestamp = rewardFromTimestamp +\n        (address(this).balance / rewardsPerSecond);\n      if (\n        newEndTimestamp > rewardFromTimestamp && newEndTimestamp != endTimestamp\n      ) {\n        emit ChangedRewardsEndTimestamp(endTimestamp, newEndTimestamp);\n        endTimestamp = newEndTimestamp;\n      }\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
