{
  "address": "0x0E801D84Fa97b50751Dbf25036d067dCf18858bF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_podleader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_orca",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "podLeaderVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "stakingPoolVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb51a81c8e8a8eba56a0d9e665a670a623364b6566e3335ef04e6c397b404c4f8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0E801D84Fa97b50751Dbf25036d067dCf18858bF",
    "transactionIndex": 0,
    "gasUsed": "577409",
    "logsBloom": "0x
    "blockHash": "0x80398625bbc7ad53af3ca85ed42a91dd749652ed90ba180ac19ca9277d1dbf14",
    "transactionHash": "0xb51a81c8e8a8eba56a0d9e665a670a623364b6566e3335ef04e6c397b404c4f8",
    "logs": [],
    "blockNumber": 8844475,
    "cumulativeGasUsed": "577409",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA3654801Ba6FB21d5A984F9a857441395dDeccFb",
    "0x111E1E97435b57467E79d4930acc4B7EB3d478ad",
    "0x8B1d98A91F853218ddbb066F20b8c63E782e2430"
  ],
  "solcInputHash": "bbcb4ebf9cbf96bbf468531e4c749b7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_podleader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_orca\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"podLeaderVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakingPoolVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"apps/avai/src/contracts/snapshot/SnapshotBridge.sol\":\"SnapshotBridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"apps/avai/src/contracts/PodLeader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n// Built off Yak's MasterYak, with alterations to allow for transfers of ERC20 instead of AVAX.\\n// Good luck and have fun\\ncontract PodLeader is Ownable, ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice Info of each user.\\n  struct UserInfo {\\n    uint256 amount; // How many tokens the user has provided.\\n    uint256 rewardTokenDebt; // Reward debt for reward token. See explanation below.\\n    //\\n    // We do some fancy math here. Basically, any point in time, the amount of reward tokens\\n    // entitled to a user but is pending to be distributed is:\\n    //\\n    //   pending reward = (user.amount * pool.accRewardsPerShare) - user.rewardDebt\\n    //\\n    // Whenever a user deposits or withdraws tokens to a pool. Here's what happens:\\n    //   1. The pool's `accRewardsPerShare` (and `lastRewardTimestamp`) gets updated.\\n    //   2. User receives the pending reward sent to his/her address.\\n    //   3. User's `amount` gets updated.\\n    //   4. User's `rewardDebt` gets updated.\\n  }\\n\\n  /// @notice Info of each pool.\\n  struct PoolInfo {\\n    IERC20 token; // Address of token contract.\\n    uint256 allocPoint; // How many allocation points assigned to this pool. Reward tokens to distribute per second.\\n    uint256 lastRewardTimestamp; // Last timestamp where reward tokens were distributed.\\n    uint256 accRewardsPerShare; // Accumulated reward tokens per share, times 1e12. See below.\\n    uint256 totalStaked; // Total amount of token staked via Rewards Manager\\n    uint16 depositFeeBP; // Deposit fee in basis points\\n  }\\n\\n  IERC20 public orca;\\n\\n  /// @notice Rewards rewarded per second\\n  uint256 public rewardsPerSecond;\\n\\n  /// @notice Info of each pool.\\n  PoolInfo[] public poolInfo;\\n\\n  /// @notice Info of each user that stakes tokens\\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n  // Treasury address\\n  address public treasury;\\n\\n  /// @notice Total allocation points. Must be the sum of all allocation points in all pools.\\n  uint256 public totalAllocPoint;\\n\\n  /// @notice The timestamp when rewards start.\\n  uint256 public startTimestamp;\\n\\n  /// @notice The timestamp when rewards end.\\n  uint256 public endTimestamp;\\n\\n  /// @notice Event emitted when a user deposits funds in the rewards manager\\n  event Deposit(\\n    address indexed user,\\n    uint256 indexed pid,\\n    uint256 amount,\\n    uint256 fee\\n  );\\n\\n  /// @notice Event emitted when a user withdraws their original funds + rewards from the rewards manager\\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n  /// @notice Event emitted when a user withdraws their original funds from the rewards manager without claiming rewards\\n  event EmergencyWithdraw(\\n    address indexed user,\\n    uint256 indexed pid,\\n    uint256 amount\\n  );\\n\\n  /// @notice Event emitted when new pool is added to the rewards manager\\n  event PoolAdded(\\n    uint256 indexed pid,\\n    address indexed token,\\n    uint256 allocPoints,\\n    uint256 totalAllocPoints,\\n    uint256 rewardStartTimestamp,\\n    uint16 depositFeeBP\\n  );\\n\\n  /// @notice Event emitted when pool allocation points are updated\\n  event PoolUpdated(\\n    uint256 indexed pid,\\n    uint256 oldAllocPoints,\\n    uint256 newAllocPoints,\\n    uint256 newTotalAllocPoints\\n  );\\n\\n  /// @notice Event emitted when the owner of the rewards manager contract is updated\\n  event ChangedTreasury(\\n    address indexed oldTreasury,\\n    address indexed newTreasury\\n  );\\n\\n  /// @notice Event emitted when the amount of reward tokens per seconds is updated\\n  event ChangedRewardsPerSecond(\\n    uint256 indexed oldRewardsPerSecond,\\n    uint256 indexed newRewardsPerSecond\\n  );\\n\\n  /// @notice Event emitted when the rewards start timestamp is set\\n  event SetRewardsStartTimestamp(uint256 indexed startTimestamp);\\n\\n  /// @notice Event emitted when the rewards end timestamp is updated\\n  event ChangedRewardsEndTimestamp(\\n    uint256 indexed oldEndTimestamp,\\n    uint256 indexed newEndTimestamp\\n  );\\n\\n  /// @notice Event emitted when contract address is changed\\n  event ChangedAddress(\\n    string indexed addressType,\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  /// @notice Event emitted when deposit fee is updated\\n  event DepositFeeUpdated(uint256 indexed pid, uint16 oldFee, uint16 newFee);\\n\\n  /**\\n   * @notice Create a new Rewards Manager contract\\n   * @param _startTimestamp timestamp when rewards will start\\n   * @param _rewardsPerSecond initial amount of reward tokens to be distributed per second\\n   */\\n  constructor(\\n    IERC20 _orca,\\n    uint256 _startTimestamp,\\n    uint256 _rewardsPerSecond,\\n    address _treasury\\n  ) {\\n    startTimestamp = _startTimestamp == 0 ? block.timestamp : _startTimestamp;\\n    emit SetRewardsStartTimestamp(startTimestamp);\\n\\n    rewardsPerSecond = _rewardsPerSecond;\\n    emit ChangedRewardsPerSecond(0, _rewardsPerSecond);\\n\\n    // Set orca token address\\n    orca = _orca;\\n\\n    treasury = _treasury;\\n    emit ChangedTreasury(address(0), _treasury);\\n  }\\n\\n  receive() external payable {}\\n\\n  /**\\n   * @notice Sets the treasury where fees will go to\\n   */\\n  function setTreasury(address _treasury) public onlyOwner {\\n    address oldTreasury = treasury;\\n    treasury = _treasury;\\n    emit ChangedTreasury(oldTreasury, _treasury);\\n  }\\n\\n  /**\\n   * @notice View function to see current poolInfo array length\\n   * @return pool length\\n   */\\n  function poolLength() external view returns (uint256) {\\n    return poolInfo.length;\\n  }\\n\\n  /**\\n   * @notice Add rewards to contract\\n   * @dev Can only be called by the owner\\n   */\\n  function addRewardsBalance(uint256 amount) external onlyOwner {\\n    orca.safeTransferFrom(msg.sender, address(this), amount);\\n    _setRewardsEndTimestamp();\\n  }\\n\\n  /**\\n   * @notice Add a new reward token to the pool\\n   * @dev Can only be called by the owner. DO NOT add the same token more than once. Rewards will be messed up if you do.\\n   * @param allocPoint Number of allocation points to allot to this token/pool\\n   * @param token The token that will be staked for rewards\\n   * @param withUpdate if specified, update all pools before adding new pool\\n   * @param _depositFeeBp If true, users get voting power for deposits\\n   */\\n  function add(\\n    uint256 allocPoint,\\n    address token,\\n    bool withUpdate,\\n    uint16 _depositFeeBp\\n  ) external onlyOwner {\\n    if (withUpdate) {\\n      massUpdatePools();\\n    }\\n    uint256 rewardStartTimestamp = block.timestamp > startTimestamp\\n      ? block.timestamp\\n      : startTimestamp;\\n    if (totalAllocPoint == 0) {\\n      _setRewardsEndTimestamp();\\n    }\\n    totalAllocPoint = totalAllocPoint + allocPoint;\\n    poolInfo.push(\\n      PoolInfo({\\n        token: IERC20(token),\\n        allocPoint: allocPoint,\\n        lastRewardTimestamp: rewardStartTimestamp,\\n        accRewardsPerShare: 0,\\n        totalStaked: 0,\\n        depositFeeBP: _depositFeeBp\\n      })\\n    );\\n    emit PoolAdded(\\n      poolInfo.length - 1,\\n      token,\\n      allocPoint,\\n      totalAllocPoint,\\n      rewardStartTimestamp,\\n      _depositFeeBp\\n    );\\n  }\\n\\n  /**\\n   * @notice Update the given pool's allocation points\\n   * @dev Can only be called by the owner\\n   * @param pid The RewardManager pool id\\n   * @param allocPoint New number of allocation points for pool\\n   * @param withUpdate if specified, update all pools before setting allocation points\\n   */\\n  function set(\\n    uint256 pid,\\n    uint256 allocPoint,\\n    bool withUpdate\\n  ) external onlyOwner {\\n    if (withUpdate) {\\n      massUpdatePools();\\n    }\\n    totalAllocPoint = totalAllocPoint - poolInfo[pid].allocPoint + allocPoint;\\n    emit PoolUpdated(\\n      pid,\\n      poolInfo[pid].allocPoint,\\n      allocPoint,\\n      totalAllocPoint\\n    );\\n    poolInfo[pid].allocPoint = allocPoint;\\n  }\\n\\n  /**\\n   * @notice Update the given pool's deposit fee\\n   * @dev Can only be called by the owner\\n   * @param pid The RewardManager pool id\\n   * @param depositFee New deposit fee for the pool, in basis points\\n   * @param withUpdate if specified, update all pools before updated deposit fee\\n   */\\n  function updateDepositFee(\\n    uint256 pid,\\n    uint16 depositFee,\\n    bool withUpdate\\n  ) external onlyOwner {\\n    if (withUpdate) {\\n      massUpdatePools();\\n    }\\n\\n    emit DepositFeeUpdated(pid, poolInfo[pid].depositFeeBP, depositFee);\\n    poolInfo[pid].depositFeeBP = depositFee;\\n  }\\n\\n  /**\\n   * @notice Returns true if rewards are actively being accumulated\\n   */\\n  function rewardsActive() public view returns (bool) {\\n    return\\n      block.timestamp >= startTimestamp &&\\n        block.timestamp <= endTimestamp &&\\n        totalAllocPoint > 0\\n        ? true\\n        : false;\\n  }\\n\\n  /**\\n   * @notice Return reward multiplier over the given from to to timestamp.\\n   * @param from From timestamp\\n   * @param to To timestamp\\n   * @return multiplier\\n   */\\n  function getMultiplier(uint256 from, uint256 to)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    uint256 toTimestamp = to > endTimestamp ? endTimestamp : to;\\n    return toTimestamp > from ? toTimestamp - from : 0;\\n  }\\n\\n  /**\\n   * @notice View function to see pending rewards on frontend.\\n   * @param pid pool id\\n   * @param account user account to check\\n   * @return pending rewards\\n   */\\n  function pendingRewards(uint256 pid, address account)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    PoolInfo storage pool = poolInfo[pid];\\n    UserInfo storage user = userInfo[pid][account];\\n    uint256 accRewardsPerShare = pool.accRewardsPerShare;\\n    uint256 tokenSupply = pool.totalStaked;\\n    if (block.timestamp > pool.lastRewardTimestamp && tokenSupply != 0) {\\n      uint256 multiplier = getMultiplier(\\n        pool.lastRewardTimestamp,\\n        block.timestamp\\n      );\\n      uint256 totalReward = (multiplier * rewardsPerSecond * pool.allocPoint) /\\n        (totalAllocPoint);\\n      accRewardsPerShare =\\n        accRewardsPerShare +\\n        ((totalReward * 1e12) / tokenSupply);\\n    }\\n\\n    uint256 accumulatedRewards = (user.amount * accRewardsPerShare) / 1e12;\\n\\n    if (accumulatedRewards < user.rewardTokenDebt) {\\n      return 0;\\n    }\\n\\n    return accumulatedRewards - user.rewardTokenDebt;\\n  }\\n\\n  /**\\n   * @notice Update reward variables for all pools\\n   * @dev Be careful of gas spending!\\n   */\\n  function massUpdatePools() public {\\n    for (uint256 pid = 0; pid < poolInfo.length; ++pid) {\\n      updatePool(pid);\\n    }\\n  }\\n\\n  /**\\n   * @notice Update reward variables of the given pool to be up-to-date\\n   * @param pid pool id\\n   */\\n  function updatePool(uint256 pid) public {\\n    PoolInfo storage pool = poolInfo[pid];\\n    if (block.timestamp <= pool.lastRewardTimestamp) {\\n      return;\\n    }\\n\\n    uint256 tokenSupply = pool.totalStaked;\\n    if (tokenSupply == 0) {\\n      pool.lastRewardTimestamp = block.timestamp;\\n      return;\\n    }\\n    uint256 multiplier = getMultiplier(\\n      pool.lastRewardTimestamp,\\n      block.timestamp\\n    );\\n    uint256 totalReward = (multiplier * rewardsPerSecond * pool.allocPoint) /\\n      totalAllocPoint;\\n    pool.accRewardsPerShare =\\n      pool.accRewardsPerShare +\\n      ((totalReward * 1e12) / tokenSupply);\\n\\n    pool.lastRewardTimestamp = block.timestamp;\\n  }\\n\\n  /**\\n   * @notice Deposit tokens to PodLeader for rewards allocation.\\n   * @param pid pool id\\n   * @param amount number of tokens to deposit\\n   */\\n  function deposit(uint256 pid, uint256 amount) external nonReentrant {\\n    PoolInfo storage pool = poolInfo[pid];\\n    UserInfo storage user = userInfo[pid][msg.sender];\\n    _deposit(pid, amount, pool, user);\\n  }\\n\\n  /**\\n   * @notice Withdraw tokens from PodLeader, claiming rewards.\\n   * @param pid pool id\\n   * @param amount number of tokens to withdraw\\n   */\\n  function withdraw(uint256 pid, uint256 amount) external nonReentrant {\\n    require(amount > 0, 'PodLeader::withdraw: amount must be > 0');\\n    PoolInfo storage pool = poolInfo[pid];\\n    UserInfo storage user = userInfo[pid][msg.sender];\\n    _withdraw(pid, amount, pool, user);\\n  }\\n\\n  /**\\n   * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n   * @param pid pool id\\n   */\\n  function emergencyWithdraw(uint256 pid) external nonReentrant {\\n    PoolInfo storage pool = poolInfo[pid];\\n    UserInfo storage user = userInfo[pid][msg.sender];\\n\\n    if (user.amount > 0) {\\n      pool.totalStaked = pool.totalStaked - user.amount;\\n      pool.token.safeTransfer(msg.sender, user.amount);\\n\\n      emit EmergencyWithdraw(msg.sender, pid, user.amount);\\n\\n      user.amount = 0;\\n      user.rewardTokenDebt = 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Set new rewards per second\\n   * @dev Can only be called by the owner\\n   * @param newRewardsPerSecond new amount of rewards to reward each second\\n   */\\n  function setRewardsPerSecond(uint256 newRewardsPerSecond) external onlyOwner {\\n    emit ChangedRewardsPerSecond(rewardsPerSecond, newRewardsPerSecond);\\n    rewardsPerSecond = newRewardsPerSecond;\\n    _setRewardsEndTimestamp();\\n  }\\n\\n  /**\\n   * @notice Internal implementation of deposit\\n   * @param pid pool id\\n   * @param amount number of tokens to deposit\\n   * @param pool the pool info\\n   * @param user the user info\\n   */\\n  function _deposit(\\n    uint256 pid,\\n    uint256 amount,\\n    PoolInfo storage pool,\\n    UserInfo storage user\\n  ) internal {\\n    updatePool(pid);\\n\\n    if (user.amount > 0) {\\n      uint256 pendingRewardAmount = (user.amount * pool.accRewardsPerShare) /\\n        1e12 -\\n        user.rewardTokenDebt;\\n\\n      if (pendingRewardAmount > 0) {\\n        _safeRewardsTransfer(msg.sender, pendingRewardAmount);\\n      }\\n    }\\n\\n    pool.token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n    uint256 depositFee = (amount * pool.depositFeeBP) / 10000;\\n    if (depositFee > 0) {\\n      pool.token.safeTransfer(treasury, depositFee);\\n      pool.totalStaked = pool.totalStaked + amount - depositFee;\\n      user.amount = user.amount + amount - depositFee;\\n    } else {\\n      pool.totalStaked = pool.totalStaked + amount;\\n      user.amount = user.amount + amount;\\n    }\\n\\n    user.rewardTokenDebt = (user.amount * pool.accRewardsPerShare) / 1e12;\\n\\n    emit Deposit(msg.sender, pid, amount, depositFee);\\n  }\\n\\n  /**\\n   * @notice Internal implementation of withdraw\\n   * @param pid pool id\\n   * @param amount number of tokens to withdraw\\n   * @param pool the pool info\\n   * @param user the user info\\n   */\\n  function _withdraw(\\n    uint256 pid,\\n    uint256 amount,\\n    PoolInfo storage pool,\\n    UserInfo storage user\\n  ) internal {\\n    require(\\n      user.amount >= amount,\\n      'PodLeader::_withdraw: amount > user balance'\\n    );\\n\\n    updatePool(pid);\\n\\n    uint256 pendingRewardAmount = (user.amount * pool.accRewardsPerShare) /\\n      1e12 -\\n      user.rewardTokenDebt;\\n    user.amount = user.amount - amount;\\n    user.rewardTokenDebt = (user.amount * pool.accRewardsPerShare) / 1e12;\\n\\n    if (pendingRewardAmount > 0) {\\n      _safeRewardsTransfer(msg.sender, pendingRewardAmount);\\n    }\\n\\n    pool.totalStaked = pool.totalStaked - amount;\\n    pool.token.safeTransfer(msg.sender, amount);\\n\\n    emit Withdraw(msg.sender, pid, amount);\\n  }\\n\\n  /**\\n   * @notice Safe reward transfer function, just in case if rounding error causes pool to not have enough reward token.\\n   * @param to account that is receiving rewards\\n   * @param amount amount of rewards to send\\n   */\\n  function _safeRewardsTransfer(address to, uint256 amount) internal {\\n    uint256 rewardTokenBalance = orca.balanceOf(address(this));\\n    if (amount > rewardTokenBalance) {\\n      orca.safeTransfer(to, rewardTokenBalance);\\n    } else {\\n      orca.safeTransfer(to, amount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Internal function that updates rewards end timestamp based on rewards per second and the balance of the contract\\n   */\\n  function _setRewardsEndTimestamp() internal {\\n    if (rewardsPerSecond > 0) {\\n      uint256 rewardFromTimestamp = block.timestamp >= startTimestamp\\n        ? block.timestamp\\n        : startTimestamp;\\n      uint256 newEndTimestamp = rewardFromTimestamp +\\n        (orca.balanceOf(address(this)) / rewardsPerSecond);\\n      if (\\n        newEndTimestamp > rewardFromTimestamp && newEndTimestamp != endTimestamp\\n      ) {\\n        emit ChangedRewardsEndTimestamp(endTimestamp, newEndTimestamp);\\n        endTimestamp = newEndTimestamp;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x90df65284e3dba4e109c874fb0af56b9a117e18f3e3fb648d1edd802a11ecf93\",\"license\":\"MIT\"},\"apps/avai/src/contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x3b6e30eb451543cc8de710f219eec53cb273b557fa0e5ceeda89b0b21c9ca999\",\"license\":\"MIT\"},\"apps/avai/src/contracts/snapshot/SnapshotBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../PodLeader.sol';\\nimport '../interfaces/IPair.sol';\\n\\ncontract SnapshotBridge {\\n  PodLeader staking;\\n  PodLeader podLeader;\\n  IERC20 orca;\\n\\n  constructor(\\n    address payable _staking,\\n    address payable _podleader,\\n    address _orca\\n  ) {\\n    staking = PodLeader(_staking);\\n    podLeader = PodLeader(_podleader);\\n    orca = IERC20(_orca);\\n  }\\n\\n  function stakingPoolVote(uint256 pid, address user)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    (uint256 amount, ) = staking.userInfo(pid, user);\\n    return amount;\\n  }\\n\\n  function podLeaderVote(uint256 pid, address user)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    (IERC20 token, , , , , ) = podLeader.poolInfo(pid);\\n    (uint256 amount, ) = podLeader.userInfo(pid, user);\\n\\n    IPair pool = IPair(address(token));\\n    address token0 = pool.token0();\\n    uint256 totalSupply = pool.totalSupply();\\n    uint256 decimals = pool.decimals();\\n\\n    (uint256 reserves0, uint256 reserves1, ) = pool.getReserves();\\n    require(totalSupply > 0, 'Cannot divide by zero');\\n    if (address(orca) == token0) {\\n      uint256 tokensPerLP = (reserves0 * 10**decimals) / totalSupply;\\n      uint256 tokenCount = (amount * tokensPerLP) / (10**decimals);\\n      return tokenCount;\\n    } else {\\n      uint256 tokensPerLP = (reserves1 * 10**decimals) / totalSupply;\\n      uint256 tokenCount = (amount * tokensPerLP) / (10**decimals);\\n      return tokenCount;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbeac15a1f49ded7b6fb0cc0ba87637d5bee9dc96f87c61f47fa607934ac0460c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161091b38038061091b83398101604081905261002f91610071565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556100d5565b600080600060608486031215610085578283fd5b8351610090816100bd565b60208501519093506100a1816100bd565b60408501519092506100b2816100bd565b809150509250925092565b6001600160a01b03811681146100d257600080fd5b50565b610837806100e46000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806397ae44e51461003b578063ce03505214610060575b600080fd5b61004e610049366004610636565b610073565b60405190815260200160405180910390f35b61004e61006e366004610636565b610498565b6001546040517f1526fe270000000000000000000000000000000000000000000000000000000081526004810184905260009182916001600160a01b0390911690631526fe279060240160c06040518083038186803b1580156100d557600080fd5b505afa1580156100e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010d919061056b565b50506001546040516393f1a40b60e01b8152600481018a90526001600160a01b03898116602483015295965060009590911693506393f1a40b92506044019050604080518083038186803b15801561016457600080fd5b505afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c9190610665565b50905060008290506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156101df57600080fd5b505afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102179190610548565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561025457600080fd5b505afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c919061061e565b90506000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c957600080fd5b505afa1580156102dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103019190610688565b60ff169050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561034257600080fd5b505afa158015610356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037a91906105d0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000841161040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f43616e6e6f7420646976696465206279207a65726f0000000000000000000000604482015260640160405180910390fd5b6002546001600160a01b038681169116141561047a5760008461043185600a61070c565b61043b90856107b4565b61044591906106a9565b9050600061045485600a61070c565b61045e838b6107b4565b61046891906106a9565b9a506104929950505050505050505050565b60008461048885600a61070c565b61043b90846107b4565b92915050565b600080546040516393f1a40b60e01b8152600481018590526001600160a01b038481166024830152839216906393f1a40b90604401604080518083038186803b1580156104e457600080fd5b505afa1580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c9190610665565b50949350505050565b80516dffffffffffffffffffffffffffff8116811461054357600080fd5b919050565b600060208284031215610559578081fd5b8151610564816107e9565b9392505050565b60008060008060008060c08789031215610583578182fd5b865161058e816107e9565b809650506020870151945060408701519350606087015192506080870151915060a087015161ffff811681146105c2578182fd5b809150509295509295509295565b6000806000606084860312156105e4578283fd5b6105ed84610525565b92506105fb60208501610525565b9150604084015163ffffffff81168114610613578182fd5b809150509250925092565b60006020828403121561062f578081fd5b5051919050565b60008060408385031215610648578182fd5b82359150602083013561065a816107e9565b809150509250929050565b60008060408385031215610677578182fd5b505080516020909101519092909150565b600060208284031215610699578081fd5b815160ff81168114610564578182fd5b6000826106c457634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156107045781600019048211156106ea576106ea6107d3565b808516156106f757918102915b93841c93908002906106ce565b509250929050565b6000610564838360008261072257506001610492565b8161072f57506000610492565b8160018114610745576002811461074f5761076b565b6001915050610492565b60ff841115610760576107606107d3565b50506001821b610492565b5060208310610133831016604e8410600b841016171561078e575081810a610492565b61079883836106c9565b80600019048211156107ac576107ac6107d3565b029392505050565b60008160001904831182151516156107ce576107ce6107d3565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146107fe57600080fd5b5056fea26469706673582212208a774f626fe20b9b691263964212d32f63f31edeed13bd6814fa98389915f8e164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806397ae44e51461003b578063ce03505214610060575b600080fd5b61004e610049366004610636565b610073565b60405190815260200160405180910390f35b61004e61006e366004610636565b610498565b6001546040517f1526fe270000000000000000000000000000000000000000000000000000000081526004810184905260009182916001600160a01b0390911690631526fe279060240160c06040518083038186803b1580156100d557600080fd5b505afa1580156100e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010d919061056b565b50506001546040516393f1a40b60e01b8152600481018a90526001600160a01b03898116602483015295965060009590911693506393f1a40b92506044019050604080518083038186803b15801561016457600080fd5b505afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c9190610665565b50905060008290506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156101df57600080fd5b505afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102179190610548565b90506000826001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561025457600080fd5b505afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c919061061e565b90506000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c957600080fd5b505afa1580156102dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103019190610688565b60ff169050600080856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561034257600080fd5b505afa158015610356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037a91906105d0565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000841161040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f43616e6e6f7420646976696465206279207a65726f0000000000000000000000604482015260640160405180910390fd5b6002546001600160a01b038681169116141561047a5760008461043185600a61070c565b61043b90856107b4565b61044591906106a9565b9050600061045485600a61070c565b61045e838b6107b4565b61046891906106a9565b9a506104929950505050505050505050565b60008461048885600a61070c565b61043b90846107b4565b92915050565b600080546040516393f1a40b60e01b8152600481018590526001600160a01b038481166024830152839216906393f1a40b90604401604080518083038186803b1580156104e457600080fd5b505afa1580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c9190610665565b50949350505050565b80516dffffffffffffffffffffffffffff8116811461054357600080fd5b919050565b600060208284031215610559578081fd5b8151610564816107e9565b9392505050565b60008060008060008060c08789031215610583578182fd5b865161058e816107e9565b809650506020870151945060408701519350606087015192506080870151915060a087015161ffff811681146105c2578182fd5b809150509295509295509295565b6000806000606084860312156105e4578283fd5b6105ed84610525565b92506105fb60208501610525565b9150604084015163ffffffff81168114610613578182fd5b809150509250925092565b60006020828403121561062f578081fd5b5051919050565b60008060408385031215610648578182fd5b82359150602083013561065a816107e9565b809150509250929050565b60008060408385031215610677578182fd5b505080516020909101519092909150565b600060208284031215610699578081fd5b815160ff81168114610564578182fd5b6000826106c457634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156107045781600019048211156106ea576106ea6107d3565b808516156106f757918102915b93841c93908002906106ce565b509250929050565b6000610564838360008261072257506001610492565b8161072f57506000610492565b8160018114610745576002811461074f5761076b565b6001915050610492565b60ff841115610760576107606107d3565b50506001821b610492565b5060208310610133831016604e8410600b841016171561078e575081810a610492565b61079883836106c9565b80600019048211156107ac576107ac6107d3565b029392505050565b60008160001904831182151516156107ce576107ce6107d3565b500290565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146107fe57600080fd5b5056fea26469706673582212208a774f626fe20b9b691263964212d32f63f31edeed13bd6814fa98389915f8e164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21029,
        "contract": "apps/avai/src/contracts/snapshot/SnapshotBridge.sol:SnapshotBridge",
        "label": "staking",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PodLeader)15071"
      },
      {
        "astId": 21032,
        "contract": "apps/avai/src/contracts/snapshot/SnapshotBridge.sol:SnapshotBridge",
        "label": "podLeader",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(PodLeader)15071"
      },
      {
        "astId": 21035,
        "contract": "apps/avai/src/contracts/snapshot/SnapshotBridge.sol:SnapshotBridge",
        "label": "orca",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)5519"
      }
    ],
    "types": {
      "t_contract(IERC20)5519": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(PodLeader)15071": {
        "encoding": "inplace",
        "label": "contract PodLeader",
        "numberOfBytes": "20"
      }
    }
  }
}