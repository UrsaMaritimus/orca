{
  "address": "0x320418854e77531064f9c89714dd27F524B84aB0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceSource1_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceSource2_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlyingToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "shareToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceSource1",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceSource2",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareToken",
      "outputs": [
        {
          "internalType": "contract IYakStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "contract IPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6665c11d15b1ad85b9771237f273ba4a61b6003f86e56ce0ab37c4c611870733",
  "receipt": {
    "to": null,
    "from": "0x9F8A5B35f5508071cf2304A670EAB0803F3737aa",
    "contractAddress": "0x320418854e77531064f9c89714dd27F524B84aB0",
    "transactionIndex": 0,
    "gasUsed": "1210429",
    "logsBloom": "0x
    "blockHash": "0xddb070345a0af19882f90c5c088e6f1cd7917d967deea5d578000699036c9a5f",
    "transactionHash": "0x6665c11d15b1ad85b9771237f273ba4a61b6003f86e56ce0ab37c4c611870733",
    "logs": [],
    "blockNumber": 8757477,
    "cumulativeGasUsed": "1210429",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0A77230d17318075983913bC2145DB16C7366156",
    "0x36E039e6391A5E7A7267650979fdf613f659be5D",
    "0xE530dC2095Ef5653205CF5ea79F8979a7028065c",
    "0x0835269bb6943779765937ebEF17e5dC37d68775"
  ],
  "solcInputHash": "bbcb4ebf9cbf96bbf468531e4c749b7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceSource1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceSource2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shareToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSource1\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSource2\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareToken\",\"outputs\":[{\"internalType\":\"contract IYakStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"contract IPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"apps/avai/src/contracts/oracles/YakOracleLP.sol\":\"YakOracleLPBridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"apps/avai/src/contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x3b6e30eb451543cc8de710f219eec53cb273b557fa0e5ceeda89b0b21c9ca999\",\"license\":\"MIT\"},\"apps/avai/src/contracts/interfaces/IYakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\ninterface IYakStrategy is IERC20Metadata {\\n  function getSharesForDepositTokens(uint256 amount)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function getDepositTokensForShares(uint256 amount)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function totalDeposits() external view returns (uint256);\\n\\n  function estimateReinvestReward() external view returns (uint256);\\n\\n  function checkReward() external view returns (uint256);\\n\\n  function estimateDeployedBalance() external view returns (uint256);\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function deposit(uint256 amount) external;\\n\\n  function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x1c88aad8989f1d9ede97d7e6e0c7fac7a150eb0b067a65641fbc0473c68e4999\",\"license\":\"MIT\"},\"apps/avai/src/contracts/oracles/YakOracleLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\n\\nimport '../interfaces/IYakStrategy.sol';\\nimport '../interfaces/IPair.sol';\\n\\ncontract YakOracleLPBridge is AggregatorV3Interface {\\n  // Chainlink price source\\n  AggregatorV3Interface public immutable priceSource1;\\n  AggregatorV3Interface public immutable priceSource2;\\n\\n  IPair public immutable underlyingToken;\\n\\n  // The YRT token\\n  IYakStrategy public immutable shareToken;\\n\\n  constructor(\\n    address priceSource1_,\\n    address priceSource2_,\\n    address underlyingToken_,\\n    address shareToken_\\n  ) {\\n    assert(priceSource1_ != address(0));\\n    assert(priceSource2_ != address(0));\\n    assert(shareToken_ != address(0));\\n    assert(underlyingToken_ != address(0));\\n    priceSource1 = AggregatorV3Interface(priceSource1_);\\n    priceSource2 = AggregatorV3Interface(priceSource2_);\\n    underlyingToken = IPair(underlyingToken_);\\n    shareToken = IYakStrategy(shareToken_); // YRT token\\n  }\\n\\n  function sqrt(uint256 x) internal pure returns (uint128) {\\n    if (x == 0) return 0;\\n    uint256 xx = x;\\n    uint256 r = 1;\\n    if (xx >= 0x100000000000000000000000000000000) {\\n      xx >>= 128;\\n      r <<= 64;\\n    }\\n    if (xx >= 0x10000000000000000) {\\n      xx >>= 64;\\n      r <<= 32;\\n    }\\n    if (xx >= 0x100000000) {\\n      xx >>= 32;\\n      r <<= 16;\\n    }\\n    if (xx >= 0x10000) {\\n      xx >>= 16;\\n      r <<= 8;\\n    }\\n    if (xx >= 0x100) {\\n      xx >>= 8;\\n      r <<= 4;\\n    }\\n    if (xx >= 0x10) {\\n      xx >>= 4;\\n      r <<= 2;\\n    }\\n    if (xx >= 0x8) {\\n      r <<= 1;\\n    }\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1; // Seven iterations should be enough\\n    uint256 r1 = x / r;\\n    return uint128(r < r1 ? r : r1);\\n  }\\n\\n  function decimals() external pure override returns (uint8) {\\n    return 8;\\n  }\\n\\n  function description() external view override returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(priceSource1.description(), priceSource2.description())\\n      );\\n  }\\n\\n  function version() external view override returns (uint256) {\\n    return priceSource1.version();\\n  }\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return priceSource1.getRoundData(_roundId);\\n  }\\n\\n  function calculateLPPrice(int256 answer1, int256 answer2)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    // get reserves\\n    (uint256 reserve0, uint256 reserve1, ) = underlyingToken.getReserves();\\n\\n    // Normalize everything to 18 decimals (useful for usdc, btc)\\n    uint256 normalizedReserve0 = reserve0 *\\n      (10**(18 - IERC20Metadata(underlyingToken.token0()).decimals()));\\n    uint256 normalizedReserve1 = reserve1 *\\n      (10**(18 - IERC20Metadata(underlyingToken.token1()).decimals()));\\n\\n    // Fair pricing, based off: https://blog.alphafinance.io/fair-lp-token-pricing/\\n    uint256 k = sqrt(normalizedReserve0 * normalizedReserve1);\\n    // Calculate the fair price\\n    uint256 totalValue = (2 *\\n      k *\\n      sqrt(\\n        uint256(answer1 * answer2) *\\n          10**(36 - priceSource1.decimals() - priceSource2.decimals())\\n      )) / underlyingToken.totalSupply();\\n    return totalValue / 1e10;\\n  }\\n\\n  // The one we edit for compounder!\\n  function latestRoundData()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint80,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint80\\n    )\\n  {\\n    // Lets do some calcs!\\n    (\\n      uint80 roundId,\\n      int256 answer1,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    ) = priceSource1.latestRoundData();\\n    // Lets do some calcs!\\n    (, int256 answer2, , , ) = priceSource2.latestRoundData();\\n\\n    require(answer1 >= 0, 'Chainlink pricefeed 1 returned bad value.');\\n    require(answer2 >= 0, 'Chainlink pricefeed 2 returned bad value.');\\n    uint256 totalValue = calculateLPPrice(answer1, answer2);\\n    uint256 newPrice = (shareToken.getDepositTokensForShares(\\n      10**underlyingToken.decimals()\\n    ) * uint256(totalValue)) / 10**underlyingToken.decimals();\\n    return (roundId, int256(newPrice), startedAt, updatedAt, answeredInRound);\\n  }\\n}\\n\",\"keccak256\":\"0xf7d23c0a5e027fe0e37ef87da1e879f85f4d0e1c19f268cd34c13387b98dff58\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200170638038062001706833981016040819052620000359162000116565b6001600160a01b0384166200005a57634e487b7160e01b600052600160045260246000fd5b6001600160a01b0383166200007f57634e487b7160e01b600052600160045260246000fd5b6001600160a01b038116620000a457634e487b7160e01b600052600160045260246000fd5b6001600160a01b038216620000c957634e487b7160e01b600052600160045260246000fd5b6001600160601b0319606094851b811660805292841b831660a05290831b821660c05290911b1660e05262000172565b80516001600160a01b03811681146200011157600080fd5b919050565b600080600080608085870312156200012c578384fd5b6200013785620000f9565b93506200014760208601620000f9565b92506200015760408601620000f9565b91506200016760608601620000f9565b905092959194509250565b60805160601c60a05160601c60c05160601c60e05160601c6114e6620002206000396000818161013d015261076c01526000818160ad015281816106cf0152818161079b015281816108d50152818161098d01528181610ab20152610bff0152600081816101c30152818161031e0152818161055d0152610c93015260008181610116015281816101f10152818161028901528181610423015281816104c00152610d2401526114e66000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80636c9fa59e116100765780639a6fc8f51161005b5780639a6fc8f514610174578063b487ab30146101be578063feaf968c146101e557600080fd5b80636c9fa59e146101385780637284e4161461015f57600080fd5b80632495a599146100a8578063313ce567146100ec57806354fd4d50146100fb57806361d8f23014610111575b600080fd5b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b604051600881526020016100e3565b6101036101ed565b6040519081526020016100e3565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b610167610285565b6040516100e391906111e6565b610187610182366004611123565b6103d6565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100e3565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6101876104af565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561024857600080fd5b505afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610280919061110b565b905090565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b1580156102e057600080fd5b505afa1580156102f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261031c9190810190611014565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561037557600080fd5b505afa158015610389573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103b19190810190611014565b6040516020016103c29291906111b7565b604051602081830303815290604052905090565b6040517f9a6fc8f500000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff8216600482015260009081908190819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639a6fc8f59060240160a06040518083038186803b15801561046557600080fd5b505afa158015610479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049d919061113f565b939a9299509097509550909350915050565b6000806000806000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561051757600080fd5b505afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f919061113f565b9450945094509450945060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105b457600080fd5b505afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec919061113f565b505050915050600085121561065a5760405162461bcd60e51b815260206004820152602960248201527f436861696e6c696e6b2070726963656665656420312072657475726e6564206260448201526830b2103b30b63ab29760b91b60648201526084015b60405180910390fd5b60008112156106bd5760405162461bcd60e51b815260206004820152602960248201527f436861696e6c696e6b2070726963656665656420322072657475726e6564206260448201526830b2103b30b63ab29760b91b6064820152608401610651565b60006106c986836108ce565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561072657600080fd5b505afa15801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e9190611196565b61076990600a611294565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eab89a5a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f257600080fd5b505afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a9190611196565b61083590600a611294565b6040518263ffffffff1660e01b815260040161085391815260200190565b60206040518083038186803b15801561086b57600080fd5b505afa15801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a3919061110b565b6108ad91906113f7565b6108b79190611231565b979d979c50949a5092985090965093945050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561092c57600080fd5b505afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096491906110bd565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e457600080fd5b505afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190610fe6565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5457600080fd5b505afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c9190611196565b610a97906012611416565b610aa290600a611294565b610aac90846113f7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b419190610fe6565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7957600080fd5b505afa158015610b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb19190611196565b610bbc906012611416565b610bc790600a611294565b610bd190846113f7565b90506000610be7610be283856113f7565b610e38565b6fffffffffffffffffffffffffffffffff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5657600080fd5b505afa158015610c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8e919061110b565b610de77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d229190611196565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db39190611196565b610dbe906024611416565b610dc89190611416565b610dd390600a611294565b610ddd8b8d61133f565b610be291906113f7565b6fffffffffffffffffffffffffffffffff16610e048460026113f7565b610e0e91906113f7565b610e189190611231565b9050610e296402540be40082611231565b96505050505050505b92915050565b600081610e4757506000919050565b8160017001000000000000000000000000000000008210610e6d5760809190911c9060401b5b680100000000000000008210610e885760409190911c9060201b5b6401000000008210610e9f5760209190911c9060101b5b620100008210610eb45760109190911c9060081b5b6101008210610ec85760089190911c9060041b5b60108210610edb5760049190911c9060021b5b60088210610ee75760011b5b6001610ef38286611231565b610efd9083611219565b901c90506001610f0d8286611231565b610f179083611219565b901c90506001610f278286611231565b610f319083611219565b901c90506001610f418286611231565b610f4b9083611219565b901c90506001610f5b8286611231565b610f659083611219565b901c90506001610f758286611231565b610f7f9083611219565b901c90506001610f8f8286611231565b610f999083611219565b901c90506000610fa98286611231565b9050808210610fb85780610fba565b815b95945050505050565b80516dffffffffffffffffffffffffffff81168114610fe157600080fd5b919050565b600060208284031215610ff7578081fd5b81516001600160a01b038116811461100d578182fd5b9392505050565b600060208284031215611025578081fd5b815167ffffffffffffffff8082111561103c578283fd5b818401915084601f83011261104f578283fd5b8151818111156110615761106161147f565b604051601f8201601f19908116603f011681019083821181831017156110895761108961147f565b816040528281528760208487010111156110a1578586fd5b6110b2836020830160208801611439565b979650505050505050565b6000806000606084860312156110d1578182fd5b6110da84610fc3565b92506110e860208501610fc3565b9150604084015163ffffffff81168114611100578182fd5b809150509250925092565b60006020828403121561111c578081fd5b5051919050565b600060208284031215611134578081fd5b813561100d81611495565b600080600080600060a08688031215611156578081fd5b855161116181611495565b80955050602086015193506040860151925060608601519150608086015161118881611495565b809150509295509295909350565b6000602082840312156111a7578081fd5b815160ff8116811461100d578182fd5b600083516111c9818460208801611439565b8351908301906111dd818360208801611439565b01949350505050565b6020815260008251806020840152611205816040850160208701611439565b601f01601f19169190910160400192915050565b6000821982111561122c5761122c611469565b500190565b60008261124c57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561128c57816000190482111561127257611272611469565b8085161561127f57918102915b93841c9390800290611256565b509250929050565b600061100d60ff8416836000826112ad57506001610e32565b816112ba57506000610e32565b81600181146112d057600281146112da576112f6565b6001915050610e32565b60ff8411156112eb576112eb611469565b50506001821b610e32565b5060208310610133831016604e8410600b8410161715611319575081810a610e32565b6113238383611251565b806000190482111561133757611337611469565b029392505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8184138284138583048511828216161561137e5761137e611469565b7f8000000000000000000000000000000000000000000000000000000000000000848712868205881281841616156113b8576113b8611469565b8587129250878205871284841616156113d3576113d3611469565b878505871281841616156113e9576113e9611469565b505050929093029392505050565b600081600019048311821515161561141157611411611469565b500290565b600060ff821660ff84168082101561143057611430611469565b90039392505050565b60005b8381101561145457818101518382015260200161143c565b83811115611463576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b69ffffffffffffffffffff811681146114ad57600080fd5b5056fea2646970667358221220728bf9d6a0b88c3d9efb09939cb5b13254a84ba46ea7a9e5a066b4b93c6f34fe64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80636c9fa59e116100765780639a6fc8f51161005b5780639a6fc8f514610174578063b487ab30146101be578063feaf968c146101e557600080fd5b80636c9fa59e146101385780637284e4161461015f57600080fd5b80632495a599146100a8578063313ce567146100ec57806354fd4d50146100fb57806361d8f23014610111575b600080fd5b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b604051600881526020016100e3565b6101036101ed565b6040519081526020016100e3565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b610167610285565b6040516100e391906111e6565b610187610182366004611123565b6103d6565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100e3565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6101876104af565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561024857600080fd5b505afa15801561025c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610280919061110b565b905090565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b1580156102e057600080fd5b505afa1580156102f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261031c9190810190611014565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561037557600080fd5b505afa158015610389573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103b19190810190611014565b6040516020016103c29291906111b7565b604051602081830303815290604052905090565b6040517f9a6fc8f500000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff8216600482015260009081908190819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639a6fc8f59060240160a06040518083038186803b15801561046557600080fd5b505afa158015610479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049d919061113f565b939a9299509097509550909350915050565b6000806000806000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561051757600080fd5b505afa15801561052b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054f919061113f565b9450945094509450945060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156105b457600080fd5b505afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec919061113f565b505050915050600085121561065a5760405162461bcd60e51b815260206004820152602960248201527f436861696e6c696e6b2070726963656665656420312072657475726e6564206260448201526830b2103b30b63ab29760b91b60648201526084015b60405180910390fd5b60008112156106bd5760405162461bcd60e51b815260206004820152602960248201527f436861696e6c696e6b2070726963656665656420322072657475726e6564206260448201526830b2103b30b63ab29760b91b6064820152608401610651565b60006106c986836108ce565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561072657600080fd5b505afa15801561073a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075e9190611196565b61076990600a611294565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eab89a5a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f257600080fd5b505afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a9190611196565b61083590600a611294565b6040518263ffffffff1660e01b815260040161085391815260200190565b60206040518083038186803b15801561086b57600080fd5b505afa15801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a3919061110b565b6108ad91906113f7565b6108b79190611231565b979d979c50949a5092985090965093945050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561092c57600080fd5b505afa158015610940573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096491906110bd565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e457600080fd5b505afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190610fe6565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5457600080fd5b505afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c9190611196565b610a97906012611416565b610aa290600a611294565b610aac90846113f7565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0957600080fd5b505afa158015610b1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b419190610fe6565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7957600080fd5b505afa158015610b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb19190611196565b610bbc906012611416565b610bc790600a611294565b610bd190846113f7565b90506000610be7610be283856113f7565b610e38565b6fffffffffffffffffffffffffffffffff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5657600080fd5b505afa158015610c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8e919061110b565b610de77f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610cea57600080fd5b505afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d229190611196565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db39190611196565b610dbe906024611416565b610dc89190611416565b610dd390600a611294565b610ddd8b8d61133f565b610be291906113f7565b6fffffffffffffffffffffffffffffffff16610e048460026113f7565b610e0e91906113f7565b610e189190611231565b9050610e296402540be40082611231565b96505050505050505b92915050565b600081610e4757506000919050565b8160017001000000000000000000000000000000008210610e6d5760809190911c9060401b5b680100000000000000008210610e885760409190911c9060201b5b6401000000008210610e9f5760209190911c9060101b5b620100008210610eb45760109190911c9060081b5b6101008210610ec85760089190911c9060041b5b60108210610edb5760049190911c9060021b5b60088210610ee75760011b5b6001610ef38286611231565b610efd9083611219565b901c90506001610f0d8286611231565b610f179083611219565b901c90506001610f278286611231565b610f319083611219565b901c90506001610f418286611231565b610f4b9083611219565b901c90506001610f5b8286611231565b610f659083611219565b901c90506001610f758286611231565b610f7f9083611219565b901c90506001610f8f8286611231565b610f999083611219565b901c90506000610fa98286611231565b9050808210610fb85780610fba565b815b95945050505050565b80516dffffffffffffffffffffffffffff81168114610fe157600080fd5b919050565b600060208284031215610ff7578081fd5b81516001600160a01b038116811461100d578182fd5b9392505050565b600060208284031215611025578081fd5b815167ffffffffffffffff8082111561103c578283fd5b818401915084601f83011261104f578283fd5b8151818111156110615761106161147f565b604051601f8201601f19908116603f011681019083821181831017156110895761108961147f565b816040528281528760208487010111156110a1578586fd5b6110b2836020830160208801611439565b979650505050505050565b6000806000606084860312156110d1578182fd5b6110da84610fc3565b92506110e860208501610fc3565b9150604084015163ffffffff81168114611100578182fd5b809150509250925092565b60006020828403121561111c578081fd5b5051919050565b600060208284031215611134578081fd5b813561100d81611495565b600080600080600060a08688031215611156578081fd5b855161116181611495565b80955050602086015193506040860151925060608601519150608086015161118881611495565b809150509295509295909350565b6000602082840312156111a7578081fd5b815160ff8116811461100d578182fd5b600083516111c9818460208801611439565b8351908301906111dd818360208801611439565b01949350505050565b6020815260008251806020840152611205816040850160208701611439565b601f01601f19169190910160400192915050565b6000821982111561122c5761122c611469565b500190565b60008261124c57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561128c57816000190482111561127257611272611469565b8085161561127f57918102915b93841c9390800290611256565b509250929050565b600061100d60ff8416836000826112ad57506001610e32565b816112ba57506000610e32565b81600181146112d057600281146112da576112f6565b6001915050610e32565b60ff8411156112eb576112eb611469565b50506001821b610e32565b5060208310610133831016604e8410600b8410161715611319575081810a610e32565b6113238383611251565b806000190482111561133757611337611469565b029392505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8184138284138583048511828216161561137e5761137e611469565b7f8000000000000000000000000000000000000000000000000000000000000000848712868205881281841616156113b8576113b8611469565b8587129250878205871284841616156113d3576113d3611469565b878505871281841616156113e9576113e9611469565b505050929093029392505050565b600081600019048311821515161561141157611411611469565b500290565b600060ff821660ff84168082101561143057611430611469565b90039392505050565b60005b8381101561145457818101518382015260200161143c565b83811115611463576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b69ffffffffffffffffffff811681146114ad57600080fd5b5056fea2646970667358221220728bf9d6a0b88c3d9efb09939cb5b13254a84ba46ea7a9e5a066b4b93c6f34fe64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}