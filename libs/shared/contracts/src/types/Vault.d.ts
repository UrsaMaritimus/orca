/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VaultInterface extends ethers.utils.Interface {
  functions: {
    "addVaultCollateral(uint256,uint256)": FunctionFragment;
    "addVaultDebt(uint256,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "createVaultType(address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBase(uint256)": FunctionFragment;
    "getClosingFee(uint256)": FunctionFragment;
    "getDebtCeiling(uint256)": FunctionFragment;
    "getMinimumCollateralPercentage(uint256)": FunctionFragment;
    "getOpeningFee(uint256)": FunctionFragment;
    "getPriceSource(uint256)": FunctionFragment;
    "getTokenPriceSource(uint256)": FunctionFragment;
    "getTotalDebt(uint256)": FunctionFragment;
    "getVaultCollateral(uint256)": FunctionFragment;
    "getVaultDebt(uint256)": FunctionFragment;
    "getVaultOwner(uint256)": FunctionFragment;
    "getVaultVaultType(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isKnownVault(uint256)": FunctionFragment;
    "knownVault(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBase(uint256,address)": FunctionFragment;
    "setClosingFee(uint256,uint256)": FunctionFragment;
    "setDebtCeiling(uint256,uint256)": FunctionFragment;
    "setMinimumCollateralPercentage(uint256,uint256)": FunctionFragment;
    "setOpeningFee(uint256,uint256)": FunctionFragment;
    "setPriceSource(uint256,address)": FunctionFragment;
    "setTokenPricePeg(uint256,uint256)": FunctionFragment;
    "subVaultCollateral(uint256,uint256)": FunctionFragment;
    "subVaultDebt(uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultTypes(uint256)": FunctionFragment;
    "vaults(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addVaultCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addVaultDebt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createVaultType",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClosingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtCeiling",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumCollateralPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOpeningFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceSource",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceSource",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultVaultType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "knownVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBase",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosingFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtCeiling",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumCollateralPercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpeningFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceSource",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPricePeg",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subVaultCollateral",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subVaultDebt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addVaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVaultDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVaultType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClosingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumCollateralPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultVaultType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "knownVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClosingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtCeiling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumCollateralPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPricePeg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subVaultCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subVaultDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultTypes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CreateVault(uint256,address)": EventFragment;
    "CreateVaultType(uint256,string)": EventFragment;
    "DestroyVault(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferVault(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVaultType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DestroyVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferVault"): EventFragment;
}

export class Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VaultInterface;

  functions: {
    addVaultCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVaultDebt(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    createVaultType(
      base: string,
      debtCeiling: BigNumberish,
      closingFee: BigNumberish,
      openingFee: BigNumberish,
      tokenPeg: BigNumberish,
      avaxPriceSourceAddress: string,
      minimumCollateralPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBase(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClosingFee(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebtCeiling(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumCollateralPercentage(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOpeningFee(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceSource(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenPriceSource(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDebt(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultCollateral(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultDebt(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVaultOwner(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVaultVaultType(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKnownVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    knownVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBase(
      vaultType: BigNumberish,
      _base: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClosingFee(
      vaultType: BigNumberish,
      _closingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebtCeiling(
      vaultType: BigNumberish,
      _debtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimumCollateralPercentage(
      vaultType: BigNumberish,
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpeningFee(
      vaultType: BigNumberish,
      _openingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceSource(
      vaultType: BigNumberish,
      _avaxPriceSourceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenPricePeg(
      vaultType: BigNumberish,
      _tokenPeg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subVaultCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subVaultDebt(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        base: string;
        debtCeiling: BigNumber;
        totalDebt: BigNumber;
        closingFee: BigNumber;
        openingFee: BigNumber;
        tokenPeg: BigNumber;
        avaxPriceSourceAddress: string;
        minimumCollateralPercentage: BigNumber;
      }
    >;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        collateral: BigNumber;
        debt: BigNumber;
        vaultType: BigNumber;
      }
    >;
  };

  addVaultCollateral(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVaultDebt(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  createVaultType(
    base: string,
    debtCeiling: BigNumberish,
    closingFee: BigNumberish,
    openingFee: BigNumberish,
    tokenPeg: BigNumberish,
    avaxPriceSourceAddress: string,
    minimumCollateralPercentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBase(vaultType: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getClosingFee(
    vaultType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebtCeiling(
    vaultType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumCollateralPercentage(
    vaultType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOpeningFee(
    vaultType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceSource(
    vaultType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenPriceSource(
    vaultType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDebt(
    vaultType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultCollateral(
    vaultID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultDebt(
    vaultID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVaultOwner(
    vaultID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultVaultType(
    vaultID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKnownVault(
    vaultID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  knownVault(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBase(
    vaultType: BigNumberish,
    _base: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClosingFee(
    vaultType: BigNumberish,
    _closingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebtCeiling(
    vaultType: BigNumberish,
    _debtCeiling: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimumCollateralPercentage(
    vaultType: BigNumberish,
    _percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpeningFee(
    vaultType: BigNumberish,
    _openingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceSource(
    vaultType: BigNumberish,
    _avaxPriceSourceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenPricePeg(
    vaultType: BigNumberish,
    _tokenPeg: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subVaultCollateral(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subVaultDebt(
    vaultID: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultTypes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber
    ] & {
      base: string;
      debtCeiling: BigNumber;
      totalDebt: BigNumber;
      closingFee: BigNumber;
      openingFee: BigNumber;
      tokenPeg: BigNumber;
      avaxPriceSourceAddress: string;
      minimumCollateralPercentage: BigNumber;
    }
  >;

  vaults(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      collateral: BigNumber;
      debt: BigNumber;
      vaultType: BigNumber;
    }
  >;

  callStatic: {
    addVaultCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addVaultDebt(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    createVaultType(
      base: string,
      debtCeiling: BigNumberish,
      closingFee: BigNumberish,
      openingFee: BigNumberish,
      tokenPeg: BigNumberish,
      avaxPriceSourceAddress: string,
      minimumCollateralPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBase(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getClosingFee(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtCeiling(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumCollateralPercentage(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningFee(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceSource(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPriceSource(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebt(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateral(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDebt(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultOwner(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultVaultType(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKnownVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    knownVault(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBase(
      vaultType: BigNumberish,
      _base: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosingFee(
      vaultType: BigNumberish,
      _closingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDebtCeiling(
      vaultType: BigNumberish,
      _debtCeiling: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumCollateralPercentage(
      vaultType: BigNumberish,
      _percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpeningFee(
      vaultType: BigNumberish,
      _openingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceSource(
      vaultType: BigNumberish,
      _avaxPriceSourceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenPricePeg(
      vaultType: BigNumberish,
      _tokenPeg: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subVaultCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subVaultDebt(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        base: string;
        debtCeiling: BigNumber;
        totalDebt: BigNumber;
        closingFee: BigNumber;
        openingFee: BigNumber;
        tokenPeg: BigNumber;
        avaxPriceSourceAddress: string;
        minimumCollateralPercentage: BigNumber;
      }
    >;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        collateral: BigNumber;
        debt: BigNumber;
        vaultType: BigNumber;
      }
    >;
  };

  filters: {
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    CreateVault(
      vaultID?: null,
      creator?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { vaultID: BigNumber; creator: string }
    >;

    CreateVaultType(
      vaultID?: null,
      name?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { vaultID: BigNumber; name: string }
    >;

    DestroyVault(
      vaultID?: null
    ): TypedEventFilter<[BigNumber], { vaultID: BigNumber }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    TransferVault(
      vaultID?: null,
      from?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { vaultID: BigNumber; from: string; to: string }
    >;
  };

  estimateGas: {
    addVaultCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVaultDebt(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    createVaultType(
      base: string,
      debtCeiling: BigNumberish,
      closingFee: BigNumberish,
      openingFee: BigNumberish,
      tokenPeg: BigNumberish,
      avaxPriceSourceAddress: string,
      minimumCollateralPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBase(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClosingFee(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtCeiling(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumCollateralPercentage(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOpeningFee(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceSource(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPriceSource(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebt(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultCollateral(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultDebt(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultOwner(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultVaultType(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKnownVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    knownVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBase(
      vaultType: BigNumberish,
      _base: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClosingFee(
      vaultType: BigNumberish,
      _closingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebtCeiling(
      vaultType: BigNumberish,
      _debtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimumCollateralPercentage(
      vaultType: BigNumberish,
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpeningFee(
      vaultType: BigNumberish,
      _openingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceSource(
      vaultType: BigNumberish,
      _avaxPriceSourceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenPricePeg(
      vaultType: BigNumberish,
      _tokenPeg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subVaultCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subVaultDebt(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addVaultCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVaultDebt(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createVaultType(
      base: string,
      debtCeiling: BigNumberish,
      closingFee: BigNumberish,
      openingFee: BigNumberish,
      tokenPeg: BigNumberish,
      avaxPriceSourceAddress: string,
      minimumCollateralPercentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBase(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClosingFee(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtCeiling(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumCollateralPercentage(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpeningFee(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceSource(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPriceSource(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebt(
      vaultType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultCollateral(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultDebt(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultOwner(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultVaultType(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    knownVault(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBase(
      vaultType: BigNumberish,
      _base: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClosingFee(
      vaultType: BigNumberish,
      _closingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebtCeiling(
      vaultType: BigNumberish,
      _debtCeiling: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumCollateralPercentage(
      vaultType: BigNumberish,
      _percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpeningFee(
      vaultType: BigNumberish,
      _openingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceSource(
      vaultType: BigNumberish,
      _avaxPriceSourceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenPricePeg(
      vaultType: BigNumberish,
      _tokenPeg: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subVaultCollateral(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subVaultDebt(
      vaultID: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
