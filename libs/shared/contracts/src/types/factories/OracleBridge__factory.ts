/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OracleBridge, OracleBridgeInterface } from "../OracleBridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceSource_",
        type: "address",
      },
      {
        internalType: "address",
        name: "underlyingToken_",
        type: "address",
      },
      {
        internalType: "address",
        name: "shareToken_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceSource",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "shareToken",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingToken",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e060405234801561001057600080fd5b5060405161080538038061080583398101604081905261002f916100de565b6001600160a01b03831661005357634e487b7160e01b600052600160045260246000fd5b6001600160a01b03821661007757634e487b7160e01b600052600160045260246000fd5b6001600160a01b03811661009b57634e487b7160e01b600052600160045260246000fd5b6001600160601b0319606093841b811660805291831b821660a05290911b1660c052610120565b80516001600160a01b03811681146100d957600080fd5b919050565b6000806000606084860312156100f2578283fd5b6100fb846100c2565b9250610109602085016100c2565b9150610117604085016100c2565b90509250925092565b60805160601c60a05160601c60c05160601c610693610172600039600061012d0152600060d60152600081816092015281816101bd01528181610255015281816102e801526103c801526106936000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636c9fa59e1161005b5780636c9fa59e146101285780637284e4161461014f5780639a6fc8f514610164578063feaf968c146101ae57600080fd5b806320531bc91461008d5780632495a599146100d1578063313ce567146100f857806354fd4d5014610112575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101006101b9565b60405160ff90911681526020016100c8565b61011a610251565b6040519081526020016100c8565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6101576102e4565b6040516100c891906105b0565b610177610172366004610515565b61037b565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100c8565b600080808080610177565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561021457600080fd5b505afa158015610228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024c919061058f565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102ac57600080fd5b505afa1580156102c0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024c91906104fd565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561033f57600080fd5b505afa158015610353573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261024c9190810190610454565b6040517f9a6fc8f500000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff8216600482015260009081908190819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639a6fc8f59060240160a06040518083038186803b15801561040a57600080fd5b505afa15801561041e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104429190610538565b939a9299509097509550909350915050565b600060208284031215610465578081fd5b815167ffffffffffffffff8082111561047c578283fd5b818401915084601f83011261048f578283fd5b8151818111156104a1576104a1610613565b604051601f8201601f19908116603f011681019083821181831017156104c9576104c9610613565b816040528281528760208487010111156104e1578586fd5b6104f28360208301602088016105e3565b979650505050505050565b60006020828403121561050e578081fd5b5051919050565b600060208284031215610526578081fd5b813561053181610642565b9392505050565b600080600080600060a0868803121561054f578081fd5b855161055a81610642565b80955050602086015193506040860151925060608601519150608086015161058181610642565b809150509295509295909350565b6000602082840312156105a0578081fd5b815160ff81168114610531578182fd5b60208152600082518060208401526105cf8160408501602087016105e3565b601f01601f19169190910160400192915050565b60005b838110156105fe5781810151838201526020016105e6565b8381111561060d576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b69ffffffffffffffffffff8116811461065a57600080fd5b5056fea264697066735822122028af0e8fe2cbde394062d8cb65d0f38689541dea14f58e5004a73ddaa7606bf164736f6c63430008040033";

export class OracleBridge__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    priceSource_: string,
    underlyingToken_: string,
    shareToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleBridge> {
    return super.deploy(
      priceSource_,
      underlyingToken_,
      shareToken_,
      overrides || {}
    ) as Promise<OracleBridge>;
  }
  getDeployTransaction(
    priceSource_: string,
    underlyingToken_: string,
    shareToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      priceSource_,
      underlyingToken_,
      shareToken_,
      overrides || {}
    );
  }
  attach(address: string): OracleBridge {
    return super.attach(address) as OracleBridge;
  }
  connect(signer: Signer): OracleBridge__factory {
    return super.connect(signer) as OracleBridge__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleBridgeInterface {
    return new utils.Interface(_abi) as OracleBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleBridge {
    return new Contract(address, _abi, signerOrProvider) as OracleBridge;
  }
}
