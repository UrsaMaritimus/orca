/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IBaseVaultInterface extends ethers.utils.Interface {
  functions: {
    "createVault()": FunctionFragment;
    "destroyVault(uint256)": FunctionFragment;
    "transferVault(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "destroyVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVault",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "destroyVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVault",
    data: BytesLike
  ): Result;

  events: {
    "BorrowToken(uint256,uint256)": EventFragment;
    "CreateVault(uint256,address)": EventFragment;
    "DepositCollateral(uint256,uint256)": EventFragment;
    "DestroyVault(uint256)": EventFragment;
    "LiquidateVault(uint256,address,address,uint256)": EventFragment;
    "PayBackToken(uint256,uint256,uint256)": EventFragment;
    "TransferVault(uint256,address,address)": EventFragment;
    "WithdrawCollateral(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DestroyVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayBackToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCollateral"): EventFragment;
}

export class IBaseVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBaseVaultInterface;

  functions: {
    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createVault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroyVault(
    vaultID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferVault(
    vaultID: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createVault(overrides?: CallOverrides): Promise<void>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BorrowToken(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    CreateVault(
      vaultID?: null,
      creator?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { vaultID: BigNumber; creator: string }
    >;

    DepositCollateral(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;

    DestroyVault(
      vaultID?: null
    ): TypedEventFilter<[BigNumber], { vaultID: BigNumber }>;

    LiquidateVault(
      vaultID?: null,
      owner?: null,
      buyer?: null,
      amountPaid?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        vaultID: BigNumber;
        owner: string;
        buyer: string;
        amountPaid: BigNumber;
      }
    >;

    PayBackToken(
      vaultID?: null,
      amount?: null,
      closingFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber; closingFee: BigNumber }
    >;

    TransferVault(
      vaultID?: null,
      from?: null,
      to?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { vaultID: BigNumber; from: string; to: string }
    >;

    WithdrawCollateral(
      vaultID?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { vaultID: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createVault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroyVault(
      vaultID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferVault(
      vaultID: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
