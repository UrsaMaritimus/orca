{
  "address": "0x7f8F0822d0440eE7FfB6058fe42ba9DC98ea7be3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mintingPaused",
          "type": "bool"
        }
      ],
      "name": "BankPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BorrowToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebtRatio",
          "type": "uint256"
        }
      ],
      "name": "ChangeDebtRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newGainRatio",
          "type": "uint256"
        }
      ],
      "name": "ChangeGainRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CreateVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "DestroyVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "GetPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenExtract",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closingFee",
          "type": "uint256"
        }
      ],
      "name": "LiquidateVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newClosingFee",
          "type": "uint256"
        }
      ],
      "name": "NewClosingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebtCeiling",
          "type": "uint256"
        }
      ],
      "name": "NewDebtCeiling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGateway",
          "type": "address"
        }
      ],
      "name": "NewGateway",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimumCollateralPercentage",
          "type": "uint256"
        }
      ],
      "name": "NewMinimumCollateralPercentage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimumDebt",
          "type": "uint256"
        }
      ],
      "name": "NewMinimumDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOpeningFee",
          "type": "uint256"
        }
      ],
      "name": "NewOpeningFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPew",
          "type": "uint256"
        }
      ],
      "name": "NewPeg",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPriceSource",
          "type": "address"
        }
      ],
      "name": "NewPriceSource",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newStabilityPool",
          "type": "address"
        }
      ],
      "name": "NewStabilityPools",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTreasury",
          "type": "uint256"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closingFee",
          "type": "uint256"
        }
      ],
      "name": "PayBackToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCollateral",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId_",
          "type": "uint256"
        }
      ],
      "name": "checkCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId_",
          "type": "uint256"
        }
      ],
      "name": "checkExtract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId_",
          "type": "uint256"
        }
      ],
      "name": "checkLiquidation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "destroyVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gainRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPaid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceSource",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumCollateralPercentage_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "priceSource_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID_",
          "type": "uint256"
        }
      ],
      "name": "liquidateVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumCollateralPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintingPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payBackToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceSource",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setClosingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debtCeiling_",
          "type": "uint256"
        }
      ],
      "name": "setDebtCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "name": "setDebtRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gainRatio_",
          "type": "uint256"
        }
      ],
      "name": "setGainRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        }
      ],
      "name": "setGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mcp_",
          "type": "uint256"
        }
      ],
      "name": "setMinimumCollateralPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumDebt_",
          "type": "uint256"
        }
      ],
      "name": "setMinimumDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "paused_",
          "type": "bool"
        }
      ],
      "name": "setMintingPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setOpeningFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceSource_",
          "type": "address"
        }
      ],
      "name": "setPriceSource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stabilityPool_",
          "type": "address"
        }
      ],
      "name": "setStabilityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenPeg_",
          "type": "uint256"
        }
      ],
      "name": "setTokenPeg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasury_",
          "type": "uint256"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "vaultExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3e04ee48bb3ce84c3801f91dd09c2b326a9fced0fc54708b481e3b74bfec39d",
  "receipt": {
    "to": null,
    "from": "0x9F8A5B35f5508071cf2304A670EAB0803F3737aa",
    "contractAddress": "0x7f8F0822d0440eE7FfB6058fe42ba9DC98ea7be3",
    "transactionIndex": 0,
    "gasUsed": "5323664",
    "logsBloom": "0x
    "blockHash": "0x4147f40ab90c9ebc1010ab038609cb9e801941be8405283c2fbed319a2670acc",
    "transactionHash": "0xe3e04ee48bb3ce84c3801f91dd09c2b326a9fced0fc54708b481e3b74bfec39d",
    "logs": [],
    "blockNumber": 2225478,
    "cumulativeGasUsed": "5323664",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "0362a30f408783f78770a41688806232",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintingPaused\",\"type\":\"bool\"}],\"name\":\"BankPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtRatio\",\"type\":\"uint256\"}],\"name\":\"ChangeDebtRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGainRatio\",\"type\":\"uint256\"}],\"name\":\"ChangeGainRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreateVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"DestroyVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GetPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenExtract\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"LiquidateVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingFee\",\"type\":\"uint256\"}],\"name\":\"NewClosingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"NewDebtCeiling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGateway\",\"type\":\"address\"}],\"name\":\"NewGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumCollateralPercentage\",\"type\":\"uint256\"}],\"name\":\"NewMinimumCollateralPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumDebt\",\"type\":\"uint256\"}],\"name\":\"NewMinimumDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOpeningFee\",\"type\":\"uint256\"}],\"name\":\"NewOpeningFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPew\",\"type\":\"uint256\"}],\"name\":\"NewPeg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPriceSource\",\"type\":\"address\"}],\"name\":\"NewPriceSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStabilityPool\",\"type\":\"address\"}],\"name\":\"NewStabilityPools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasury\",\"type\":\"uint256\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"PayBackToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId_\",\"type\":\"uint256\"}],\"name\":\"checkCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId_\",\"type\":\"uint256\"}],\"name\":\"checkExtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId_\",\"type\":\"uint256\"}],\"name\":\"checkLiquidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"destroyVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gainRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceSource\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumCollateralPercentage_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceSource_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID_\",\"type\":\"uint256\"}],\"name\":\"liquidateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCollateralPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payBackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSource\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setClosingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtCeiling_\",\"type\":\"uint256\"}],\"name\":\"setDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"name\":\"setDebtRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gainRatio_\",\"type\":\"uint256\"}],\"name\":\"setGainRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mcp_\",\"type\":\"uint256\"}],\"name\":\"setMinimumCollateralPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumDebt_\",\"type\":\"uint256\"}],\"name\":\"setMinimumDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused_\",\"type\":\"bool\"}],\"name\":\"setMintingPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setOpeningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceSource_\",\"type\":\"address\"}],\"name\":\"setPriceSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilityPool_\",\"type\":\"address\"}],\"name\":\"setStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPeg_\",\"type\":\"uint256\"}],\"name\":\"setTokenPeg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasury_\",\"type\":\"uint256\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"vaultExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"borrowToken(uint256,uint256)\":{\"details\":\"Lets a vault owner borrow stablecoin against collateral Requirements: - Vault type must exist - Vault must exist - Must borrow greater than 0 stablecoin - Must be below the debt ceiling when borrowing - Must maintain minimum collateral percentage Emits BorrowToken event\"},\"checkCost(uint256)\":{\"details\":\"checks cost of liquidating\"},\"checkExtract(uint256)\":{\"details\":\"checks how much token gets extract\"},\"checkLiquidation(uint256)\":{\"details\":\"checks if the vault can be liquidated\"},\"createVault()\":{\"details\":\"Create a vault for interacting with the platform Emits a CreateVault event\"},\"depositCollateral(uint256,uint256)\":{\"details\":\"ALlows vault owner to deposit ERC20 collateral Emits Deposit Collateral event\"},\"destroyVault(uint256)\":{\"details\":\"User can destroy a vault. Will return all collateral upon destroying. Emits a DestroyVault event Requirements: - User must have paid off all outstanding debt first\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getPaid(address)\":{\"details\":\"pays the user Returns the ERC20 token that was liquidated\"},\"getPricePeg()\":{\"details\":\"returns the peg \"},\"getPriceSource()\":{\"details\":\"returns the chainlink pricefeed price\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"liquidateVault(uint256)\":{\"details\":\"allows liquidator to buy out a risky vault Requirements: - Vault id must exist - Vault must be below minimum collateral percentage - User must have enough of the token to pay vault off Emits BuyRiskyVault event\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"payBackToken(uint256,uint256)\":{\"details\":\"Pay back the stablecoin to reduce debt Requirements: - User must have enough balance to repay `amount` - Cannot pay back more than the required debt. `amount` must be less than debt.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setClosingFee(uint256)\":{\"details\":\"Set the closing fee for this vault\"},\"setDebtCeiling(uint256)\":{\"details\":\"Set the debt ceiling for this vault\"},\"setDebtRatio(uint256)\":{\"details\":\"sets the debt ratio\"},\"setGainRatio(uint256)\":{\"details\":\"sets the gain ratio\"},\"setGateway(address)\":{\"details\":\"Set the WAVAX gateway for this vault if it needs one\"},\"setMinimumCollateralPercentage(uint256)\":{\"details\":\"sets the minimum collateral percentage\"},\"setMinimumDebt(uint256)\":{\"details\":\"sets the minimum debt\"},\"setMintingPaused(bool)\":{\"details\":\"Pauses the bank minting capabalities.\"},\"setOpeningFee(uint256)\":{\"details\":\"Set the opening fee for this vault\"},\"setPriceSource(address)\":{\"details\":\"Set the price source for this vault\"},\"setStabilityPool(address)\":{\"details\":\"Set the stability pool (liquidator) for this vault\"},\"setTokenPeg(uint256)\":{\"details\":\"Set the token peg for this vault\"},\"setTreasury(uint256)\":{\"details\":\"Set the treasury vault for this vault (vault that gets all the fees)\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferVault(uint256,address)\":{\"details\":\"user can transfer vault to another address Emits TransferVault event\"},\"vaultExists(uint256)\":{\"details\":\"allows checking if vault exists or not\"},\"withdrawCollateral(uint256,uint256)\":{\"details\":\"allows vault owner to withdraw the collateral Requirements: - Withdraw amount is less than or equal to current collateral - Collateral withdrawal amount does not put debt below minimum collateral Emits WithdrawCollateral event\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"minimumCollateralPercentage()\":{\"notice\":\"Set all of these upon initalization\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"apps/avai/src/contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x3b68fc053bbad44644adcdddff840106591364bbc0879aac5505756b67fab974\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x54b0a0b80c447749f769f37fec206cdee23e7466511802191248e95c8250ff9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"apps/avai/src/contracts/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './interfaces/IStablecoin.sol';\\n\\ncontract Bank is\\n  Initializable,\\n  ERC721Upgradeable,\\n  ERC721EnumerableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  AccessControlUpgradeable\\n{\\n  bytes32 public constant TREASURY_ROLE = keccak256('TREASURY_ROLE');\\n  using SafeERC20 for IERC20Metadata;\\n  using SafeERC20 for IStablecoin;\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\n  CountersUpgradeable.Counter private _userVaultIds;\\n  /**\\n   * Set all of these upon initalization\\n   */\\n  uint256 public minimumCollateralPercentage;\\n  uint256 public debtCeiling;\\n  uint256 public closingFee;\\n  uint256 public openingFee;\\n  uint256 public tokenPeg;\\n  uint256 public totalDebt;\\n  // For liquidation\\n  uint256 public debtRatio;\\n  uint256 public gainRatio;\\n  mapping(address => uint256) public tokenDebt;\\n\\n  // Chainlink price source\\n  AggregatorV3Interface public priceSource;\\n  // Token used as collateral\\n  IERC20Metadata public token;\\n  // Token used as debt\\n  IStablecoin internal stablecoin;\\n\\n  // Address that corresponds to liquidater\\n  address public stabilityPool;\\n  // address that corresponds to gateway, if there is one\\n  address public gateway;\\n  // Vault that corresponds to the treasury\\n  uint256 public treasury;\\n\\n  // Vault information\\n  mapping(uint256 => bool) private vaultExistence;\\n  mapping(uint256 => uint256) public vaultCollateral;\\n  mapping(uint256 => uint256) public vaultDebt;\\n\\n  // Minimum debt\\n  uint256 public minimumDebt;\\n\\n  // Pausing minting AVAI for a bank if (for example) exploits occur or for deprecation purposes\\n  bool public mintingPaused;\\n\\n  // Events for general vault operations\\n  event CreateVault(uint256 vaultID, address creator);\\n  event DestroyVault(uint256 vaultID);\\n  event TransferVault(uint256 vaultID, address from, address to);\\n\\n  // Buying out a vault event\\n  event LiquidateVault(\\n    uint256 vaultID,\\n    address owner,\\n    address buyer,\\n    uint256 amountPaid,\\n    uint256 tokenExtract,\\n    uint256 closingFee\\n  );\\n\\n  // Events for collateral operations\\n  event DepositCollateral(uint256 vaultID, uint256 amount);\\n  event WithdrawCollateral(uint256 vaultID, uint256 amount);\\n\\n  // Events for token operations\\n  event BorrowToken(uint256 vaultID, uint256 amount);\\n  event PayBackToken(uint256 vaultID, uint256 amount, uint256 closingFee);\\n\\n  // Bank Operations\\n  event GetPaid(uint256 amount, address user);\\n  event ChangeGainRatio(uint256 newGainRatio);\\n  event ChangeDebtRatio(uint256 newDebtRatio);\\n  event NewPeg(uint256 newPew);\\n  event NewDebtCeiling(uint256 newDebtCeiling);\\n  event NewClosingFee(uint256 newClosingFee);\\n  event NewOpeningFee(uint256 newOpeningFee);\\n  event NewMinimumDebt(uint256 newMinimumDebt);\\n  event NewGateway(address newGateway);\\n  event NewStabilityPools(address newStabilityPool);\\n  event NewPriceSource(address newPriceSource);\\n  event NewTreasury(uint256 newTreasury);\\n  event BankPaused(bool mintingPaused);\\n  event NewMinimumCollateralPercentage(uint256 newMinimumCollateralPercentage);\\n\\n  // Lets begin!\\n  function initialize(\\n    uint256 minimumCollateralPercentage_,\\n    address priceSource_,\\n    string memory name_,\\n    string memory symbol_,\\n    address token_\\n  ) public initializer {\\n    // Initializations\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __ERC721_init_unchained(name_, symbol_);\\n    __ERC721Enumerable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n    __AccessControl_init_unchained();\\n    assert(priceSource_ != address(0));\\n    assert(minimumCollateralPercentage_ >= 100);\\n    //Initial settings!\\n    debtCeiling = 10e18; // 10 dollars\\n    closingFee = 75; // 0.75%\\n    openingFee = 0; // 0.0%\\n    tokenPeg = 1e8; // $1\\n    debtRatio = 2; // 50%\\n    gainRatio = 11; // /10 so 1.1, or 10%\\n    // Initially, will deploy later\\n    stabilityPool = address(0);\\n    gateway = address(0);\\n    priceSource = AggregatorV3Interface(priceSource_);\\n\\n    token = IERC20Metadata(token_);\\n    stablecoin = IStablecoin(msg.sender);\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(TREASURY_ROLE, msg.sender);\\n    _setRoleAdmin(TREASURY_ROLE, TREASURY_ROLE);\\n\\n    minimumCollateralPercentage = minimumCollateralPercentage_;\\n  }\\n\\n  /**\\n   * @dev Only vault owner can do anything with this modifier\\n   */\\n  modifier onlyVaultOwner(uint256 vaultID) {\\n    require(vaultExistence[vaultID], 'Vault does not exist');\\n    // Either owner of vault or gateway for AVAX.\\n    require(\\n      ownerOf(vaultID) == msg.sender || msg.sender == gateway,\\n      'Vault is not owned by you'\\n    );\\n    _;\\n  }\\n  /**\\n   * @dev Only liquidater can do anything with this modifier (if address === 0, then all users can liquidate)\\n   */\\n  modifier onlyLiquidater() {\\n    require(\\n      stabilityPool == address(0) || msg.sender == stabilityPool,\\n      'buyRiskyVault disabled for public'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Only gateway allowed, or user if its not WAVAX.\\n   */\\n  modifier onlyUser(address user) {\\n    require(\\n      msg.sender == user || msg.sender == gateway,\\n      'Cannot get paid if not yours'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev For borrowing only\\n   */\\n  modifier mintingNotPaused() {\\n    require(\\n      !mintingPaused,\\n      'Minting for this bank is paused. Deposits, payments, and withdrawals are all still functional'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev allows checking if vault exists or not\\n   */\\n  function vaultExists(uint256 vaultID) public view returns (bool) {\\n    return vaultExistence[vaultID];\\n  }\\n\\n  /**\\n   * @dev sets the gain ratio\\n   */\\n  function setGainRatio(uint256 gainRatio_) external onlyRole(TREASURY_ROLE) {\\n    require(\\n      ((1000 * gainRatio_) / debtRatio) * (10000 + closingFee) < 10000**2\\n    );\\n    gainRatio = gainRatio_;\\n    emit ChangeGainRatio(gainRatio_);\\n  }\\n\\n  /**\\n   * @dev sets the debt ratio\\n   */\\n  function setDebtRatio(uint256 debtRatio_) external onlyRole(TREASURY_ROLE) {\\n    require(\\n      ((1000 * gainRatio) / debtRatio_) * (10000 + closingFee) < 10000**2\\n    );\\n    debtRatio = debtRatio_;\\n    emit ChangeDebtRatio(debtRatio_);\\n  }\\n\\n  /**\\n   * @dev sets the minimum collateral percentage\\n   */\\n  function setMinimumCollateralPercentage(uint256 mcp_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(\\n      mcp_ >= 110 && mcp_ <= 400,\\n      'Minimum collateral percentage must be within range 110-400'\\n    );\\n    minimumCollateralPercentage = mcp_;\\n  }\\n\\n  /**\\n   * @dev sets the minimum debt\\n   */\\n  function setMinimumDebt(uint256 minimumDebt_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(minimumDebt_ > 0, 'Minimum debt cannot be zero');\\n    require(\\n      minimumDebt < debtCeiling,\\n      'Minimum debt cannot be greater than debt ceiling'\\n    );\\n    minimumDebt = minimumDebt_;\\n    emit NewMinimumDebt(minimumDebt);\\n  }\\n\\n  /**\\n   * @dev Set the debt ceiling for this vault\\n   */\\n  function setDebtCeiling(uint256 debtCeiling_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(\\n      debtCeiling <= debtCeiling_,\\n      'setCeiling: Must be over the amount of current debt ceiling.'\\n    );\\n    debtCeiling = debtCeiling_;\\n    emit NewDebtCeiling(debtCeiling_);\\n  }\\n\\n  /**\\n   * @dev Set the price source for this vault\\n   */\\n  function setPriceSource(address priceSource_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(priceSource_ != address(0), 'Price source cannot be zero address');\\n    priceSource = AggregatorV3Interface(priceSource_);\\n    emit NewPriceSource(priceSource_);\\n  }\\n\\n  /**\\n   * @dev Set the token peg for this vault\\n   */\\n  function setTokenPeg(uint256 tokenPeg_) external onlyRole(TREASURY_ROLE) {\\n    require(tokenPeg_ > 0, 'Peg cannot be zero');\\n    tokenPeg = tokenPeg_;\\n    emit NewPeg(tokenPeg_);\\n  }\\n\\n  /**\\n   * @dev Set the stability pool (liquidator) for this vault\\n   */\\n  function setStabilityPool(address stabilityPool_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(\\n      stabilityPool_ != address(0),\\n      'Stability pool cannot be zero address'\\n    );\\n    require(\\n      Address.isContract(stabilityPool_),\\n      'Must be a contract to be the stability pool.'\\n    );\\n    stabilityPool = stabilityPool_;\\n    emit NewStabilityPools(stabilityPool_);\\n  }\\n\\n  /**\\n   * @dev Set the WAVAX gateway for this vault if it needs one\\n   */\\n  function setGateway(address gateway_) external onlyRole(TREASURY_ROLE) {\\n    require(gateway_ != address(0), 'Gateway cannot be zero address');\\n    require(\\n      Address.isContract(gateway_),\\n      'Must be a contract to be the gateway.'\\n    );\\n    gateway = gateway_;\\n    emit NewGateway(gateway_);\\n  }\\n\\n  /**\\n   * @dev Set the closing fee for this vault\\n   */\\n  function setClosingFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\\n    require(amount <= 250, 'Closing fee cannot be above 1%');\\n    require(((1000 * gainRatio) / debtRatio) * (10000 + amount) < 10000**2);\\n    closingFee = amount;\\n    emit NewClosingFee(amount);\\n  }\\n\\n  /**\\n   * @dev Set the opening fee for this vault\\n   */\\n  function setOpeningFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\\n    openingFee = amount;\\n    emit NewOpeningFee(amount);\\n  }\\n\\n  /**\\n   * @dev Set the treasury vault for this vault (vault that gets all the fees)\\n   */\\n  function setTreasury(uint256 treasury_) external onlyRole(TREASURY_ROLE) {\\n    require(vaultExistence[treasury_], 'Vault does not exist');\\n    treasury = treasury_;\\n  }\\n\\n  /**\\n   * @dev Pauses the bank minting capabalities.\\n   */\\n  function setMintingPaused(bool paused_) external onlyRole(TREASURY_ROLE) {\\n    require(\\n      paused_ == !mintingPaused,\\n      'Minting paused already set to this value.'\\n    );\\n    mintingPaused = paused_;\\n  }\\n\\n  /**\\n    @dev returns the chainlink pricefeed price\\n  */\\n  function getPriceSource() public view returns (uint256) {\\n    // And get the latest round data\\n    (, int256 price, , , ) = priceSource.latestRoundData();\\n    require(price >= 0, 'Chainlink returned a negative price');\\n\\n    return uint256(price);\\n  }\\n\\n  /**\\n    @dev returns the peg \\n  */\\n  function getPricePeg() public view returns (uint256) {\\n    return tokenPeg;\\n  }\\n\\n  /**\\n   * @dev returns the current debt and collateral\\n   *\\n   * Requirements:\\n   *\\n   * - Token price cannot be zero\\n   * - PEG (i.e. usdc) price cannot be zero\\n   */\\n  function calculateCollateralProperties(uint256 collateral, uint256 debt)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    require(getPriceSource() != 0, 'Price must be above 0');\\n    require(getPricePeg() != 0, 'Peg must be above 0');\\n\\n    // Value of collateral on avalanche network\\n    uint256 collateralValue = collateral * getPriceSource();\\n\\n    // Get the current debt in our token (i.e. usdc)\\n    uint256 debtValue = debt * getPricePeg();\\n\\n    // Multiple collateral by 100\\n    uint256 collateralValueTimes100 = collateralValue * 100;\\n\\n    return (collateralValueTimes100, debtValue);\\n  }\\n\\n  /**\\n   * @dev Checks if the current collateral is valid\\n   */\\n  function isValidCollateral(uint256 collateral, uint256 debt)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    (\\n      uint256 collateralValueTimes100,\\n      uint256 debtValue\\n    ) = calculateCollateralProperties(collateral, debt);\\n\\n    require(debtValue >= 0, 'Debt must be greater than zero');\\n\\n    // Get current ratio of debt\\n    uint256 collateralPercentage = (collateralValueTimes100 *\\n      (10**(18 - token.decimals()))) / debtValue;\\n    // and check if it's above 150%\\n    return collateralPercentage >= minimumCollateralPercentage;\\n  }\\n\\n  /**\\n   * @dev Create a vault for interacting with the platform\\n   *\\n   * Emits a CreateVault event\\n   */\\n  function createVault() external {\\n    // Increment ID\\n    _userVaultIds.increment();\\n    // Assign ID to vault\\n    uint256 newVaultId = _userVaultIds.current();\\n\\n    vaultExistence[newVaultId] = true;\\n\\n    emit CreateVault(newVaultId, msg.sender);\\n    // mint erc721 vault (vaultId)\\n    _mint(msg.sender, newVaultId);\\n  }\\n\\n  function vaultCounts() external view returns (uint256) {\\n    return _userVaultIds.current();\\n  }\\n\\n  /**\\n   * @dev User can destroy a vault. Will return all collateral upon destroying.\\n   *\\n   * Emits a DestroyVault event\\n   *\\n   * Requirements:\\n   *\\n   * - User must have paid off all outstanding debt first\\n   */\\n  function destroyVault(uint256 vaultID)\\n    external\\n    virtual\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(vaultDebt[vaultID] == 0, 'Vault as outstanding debt');\\n\\n    uint256 collateral = vaultCollateral[vaultID];\\n\\n    _burn(vaultID);\\n    delete vaultExistence[vaultID];\\n    delete vaultCollateral[vaultID];\\n    delete vaultDebt[vaultID];\\n\\n    if (collateral != 0) {\\n      token.safeTransfer(msg.sender, collateral);\\n    }\\n\\n    emit DestroyVault(vaultID);\\n  }\\n\\n  /**\\n   * @dev user can transfer vault to another address\\n   *\\n   * Emits TransferVault event\\n   */\\n  function transferVault(uint256 vaultID, address to)\\n    external\\n    onlyVaultOwner(vaultID)\\n  {\\n    // burn erc721 (vaultId)\\n    _burn(vaultID);\\n    // mint erc721 (vaultId)\\n    _mint(to, vaultID);\\n\\n    emit TransferVault(vaultID, msg.sender, to);\\n  }\\n\\n  /**\\n   * @dev ALlows vault owner to deposit ERC20 collateral\\n   *\\n   * Emits Deposit Collateral event\\n   *\\n   */\\n  function depositCollateral(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n  {\\n    token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n    uint256 newCollateral = vaultCollateral[vaultID] + amount;\\n\\n    assert(newCollateral >= vaultCollateral[vaultID]);\\n\\n    vaultCollateral[vaultID] = newCollateral;\\n\\n    emit DepositCollateral(vaultID, amount);\\n  }\\n\\n  /**\\n   * @dev Lets a vault owner borrow stablecoin against collateral\\n   *\\n   * Requirements:\\n   * - Vault type must exist\\n   * - Vault must exist\\n   * - Must borrow greater than 0 stablecoin\\n   * - Must be below the debt ceiling when borrowing\\n   * - Must maintain minimum collateral percentage\\n   *\\n   * Emits BorrowToken event\\n   */\\n  function borrowToken(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n    mintingNotPaused\\n  {\\n    require(amount > 0, 'Must borrow non-zero amount');\\n    require(\\n      totalDebt + amount <= debtCeiling,\\n      'Cannot mint over debt ceiling.'\\n    );\\n\\n    uint256 newDebt = vaultDebt[vaultID] + amount;\\n\\n    require(\\n      isValidCollateral(vaultCollateral[vaultID], newDebt),\\n      'Borrow would put vault below minimum collateral percentage'\\n    );\\n\\n    require(\\n      newDebt >= minimumDebt,\\n      'Borrow needs to be larger than the minimum debt'\\n    );\\n\\n    // Mint stable coin for the user\\n    _addVaultDebt(vaultID, amount);\\n    // Should have minter role\\n    stablecoin.mint(msg.sender, amount);\\n    emit BorrowToken(vaultID, amount);\\n  }\\n\\n  /**\\n   * @dev allows vault owner to withdraw the collateral\\n   *\\n   * Requirements:\\n   * - Withdraw amount is less than or equal to current collateral\\n   * - Collateral withdrawal amount does not put debt below minimum collateral\\n   *\\n   * Emits WithdrawCollateral event\\n   */\\n  function withdrawCollateral(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(\\n      vaultCollateral[vaultID] >= amount,\\n      'Vault does not have enough collateral'\\n    );\\n\\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\\n\\n    if (vaultDebt[vaultID] != 0) {\\n      require(\\n        isValidCollateral(newCollateral, vaultDebt[vaultID]),\\n        'Withdrawal would put vault below minimum collateral percentage'\\n      );\\n    }\\n\\n    vaultCollateral[vaultID] = newCollateral;\\n\\n    token.safeTransfer(msg.sender, amount);\\n\\n    emit WithdrawCollateral(vaultID, amount);\\n  }\\n\\n  /**\\n   * @dev Pay back the stablecoin to reduce debt\\n   *\\n   * Requirements:\\n   * - User must have enough balance to repay `amount`\\n   * - Cannot pay back more than the required debt. `amount` must be less than debt.\\n   */\\n  function payBackToken(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(\\n      stablecoin.balanceOf(msg.sender) >= amount,\\n      'Token balance too low'\\n    );\\n    require(\\n      vaultDebt[vaultID] >= amount,\\n      'Vault debt less than amount to pay back'\\n    );\\n\\n    // Closing fee calculation\\n    uint256 _closingFee = ((amount * closingFee) * getPricePeg()) /\\n      (getPriceSource() * 10000) /\\n      (10**(18 - token.decimals()));\\n\\n    _subVaultDebt(vaultID, amount);\\n    _subVaultCollateral(vaultID, _closingFee);\\n    _addVaultCollateralTreasury(_closingFee);\\n\\n    // Burns the stablecoin\\n    stablecoin.burn(msg.sender, amount);\\n\\n    emit PayBackToken(vaultID, amount, _closingFee);\\n  }\\n\\n  /*************\\n   * Liquidation functions\\n   ************** */\\n\\n  /**\\n   * @dev pays the user\\n   * Returns the ERC20 token that was liquidated\\n   */\\n  function getPaid(address user) external nonReentrant onlyUser(user) {\\n    require(tokenDebt[user] != 0, 'No liquidations associated with account.');\\n    uint256 amount = tokenDebt[user];\\n    // Set first in case nonReentrant fails somehow\\n    tokenDebt[user] = 0;\\n    token.safeTransfer(msg.sender, amount);\\n    emit GetPaid(amount, msg.sender);\\n  }\\n\\n  /**\\n   * @dev checks if the vault can be liquidated\\n   */\\n  function checkLiquidation(uint256 vaultId_) external view returns (bool) {\\n    require(vaultExistence[vaultId_], 'Vault must exist');\\n    (\\n      uint256 collateralValueTimes100,\\n      uint256 debtValue\\n    ) = calculateCollateralProperties(\\n        vaultCollateral[vaultId_],\\n        vaultDebt[vaultId_]\\n      );\\n\\n    require(debtValue > 0, 'Cannot have zero debt');\\n\\n    uint256 collateralPercentage = (collateralValueTimes100 *\\n      (10**(18 - token.decimals()))) / debtValue;\\n\\n    if (collateralPercentage < minimumCollateralPercentage) {\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev checks cost of liquidating\\n   */\\n  function checkCost(uint256 vaultId_) public view returns (uint256) {\\n    require(vaultExistence[vaultId_], 'Vault must exist');\\n    (, uint256 debtValue) = calculateCollateralProperties(\\n      vaultCollateral[vaultId_],\\n      vaultDebt[vaultId_]\\n    );\\n    debtValue = debtValue / tokenPeg;\\n\\n    return debtValue / debtRatio;\\n  }\\n\\n  /**\\n   * @dev checks how much token gets extract\\n   */\\n  function checkExtract(uint256 vaultId_) public view returns (uint256) {\\n    require(vaultExistence[vaultId_], 'Vault must exist');\\n    (, uint256 debtValue) = calculateCollateralProperties(\\n      vaultCollateral[vaultId_],\\n      vaultDebt[vaultId_]\\n    );\\n\\n    uint256 tokenExtract = (debtValue * gainRatio) /\\n      (10 * getPriceSource() * debtRatio) /\\n      (10**(18 - token.decimals()));\\n\\n    return tokenExtract;\\n  }\\n\\n  /**\\n   * @dev allows liquidator to buy out a risky vault\\n   *\\n   * Requirements:\\n   * - Vault id must exist\\n   * - Vault must be below minimum collateral percentage\\n   * - User must have enough of the token to pay vault off\\n   *\\n   * Emits BuyRiskyVault event\\n   */\\n  function liquidateVault(uint256 vaultID_)\\n    external\\n    onlyLiquidater\\n    nonReentrant\\n  {\\n    require(vaultExistence[vaultID_], 'Vault does not exist');\\n    (\\n      uint256 collateralValueTimes100,\\n      uint256 debtValue\\n    ) = calculateCollateralProperties(\\n        vaultCollateral[vaultID_],\\n        vaultDebt[vaultID_]\\n      );\\n\\n    // Make sure user has debt\\n    require(debtValue > 0, 'Vault has no debt');\\n\\n    uint256 collateralPercentage = (collateralValueTimes100 *\\n      (10**(18 - token.decimals()))) / debtValue;\\n\\n    require(\\n      collateralPercentage < minimumCollateralPercentage,\\n      'Vault is not below minimum collateral percentage'\\n    );\\n\\n    uint256 tokenExtract = checkExtract(vaultID_);\\n    uint256 halfDebt = checkCost(vaultID_);\\n    require(\\n      stablecoin.balanceOf(msg.sender) >= halfDebt,\\n      'Token balance too low to pay off outstanding debt'\\n    );\\n\\n    stablecoin.burn(msg.sender, halfDebt);\\n\\n    vaultDebt[vaultID_] -= halfDebt;\\n\\n    uint256 _closingFee = (halfDebt * closingFee * getPricePeg()) /\\n      (getPriceSource() * 10000) /\\n      (10**(18 - token.decimals()));\\n\\n    vaultCollateral[vaultID_] -= (_closingFee + tokenExtract);\\n    vaultCollateral[treasury] += _closingFee;\\n\\n    tokenDebt[msg.sender] += tokenExtract;\\n\\n    _subFromTotalDebt(halfDebt);\\n\\n    emit LiquidateVault(\\n      vaultID_,\\n      ownerOf(vaultID_),\\n      msg.sender,\\n      halfDebt,\\n      tokenExtract,\\n      _closingFee\\n    );\\n  }\\n\\n  /**\\n   * @dev Adds to the vault collateral\\n   *\\n   */\\n  function _addVaultCollateralTreasury(uint256 amount) internal {\\n    uint256 newCollateral = vaultCollateral[treasury] + amount;\\n    assert(newCollateral >= vaultCollateral[treasury]);\\n\\n    // Adjust and save it\\n    vaultCollateral[treasury] = newCollateral;\\n  }\\n\\n  /**\\n   * @dev subtracts from the vault collateral\\n   *\\n   * Requirements:\\n   * - Must be less than or equal to current collateral\\n   */\\n\\n  function _subVaultCollateral(uint256 vaultID, uint256 amount) internal {\\n    require(\\n      amount <= vaultCollateral[vaultID],\\n      'Cannot remove more than the deposited collateral'\\n    );\\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\\n\\n    assert(newCollateral <= vaultCollateral[vaultID]);\\n\\n    // Adjust and save it\\n    vaultCollateral[vaultID] = newCollateral;\\n  }\\n\\n  /**\\n   * @dev Adds debt to the vault\\n   *\\n   * Requirements:\\n   * - new user debt cannot be above debt ceiling\\n   */\\n  function _addVaultDebt(uint256 vaultID, uint256 amount) internal {\\n    uint256 newTotalDebt = amount + totalDebt;\\n\\n    assert(newTotalDebt >= totalDebt);\\n    require(\\n      newTotalDebt <= debtCeiling,\\n      'Cannot exceed debt ceiling for this vault'\\n    );\\n\\n    uint256 userNewDebt = amount + vaultDebt[vaultID];\\n    assert(userNewDebt >= vaultDebt[vaultID]);\\n\\n    _addToTotalDebt(amount);\\n\\n    vaultDebt[vaultID] = userNewDebt;\\n  }\\n\\n  /**\\n   * @dev Subs debt to the vault\\n   *\\n   * Requirements:\\n   * - user cannot remove more than total debt\\n   * - user cannot remove more than their total debt\\n   */\\n  function _subVaultDebt(uint256 vaultID, uint256 amount) internal {\\n    require(totalDebt >= amount, 'Cannot get rid of more debt than exists.');\\n\\n    require(\\n      vaultDebt[vaultID] >= amount,\\n      'Cannot get rid of more debt than user has'\\n    );\\n\\n    uint256 newTotalDebt = totalDebt - amount;\\n    assert(newTotalDebt <= totalDebt);\\n\\n    uint256 userNewDebt = vaultDebt[vaultID] - amount;\\n    assert(userNewDebt <= vaultDebt[vaultID]);\\n\\n    _subFromTotalDebt(amount);\\n    vaultDebt[vaultID] = userNewDebt;\\n  }\\n\\n  /**\\n   * @dev Adds debt to the vault\\n   *\\n   * Requirements:\\n   * - new user debt cannot be above debt ceiling\\n   */\\n  function _addToTotalDebt(uint256 amount) internal {\\n    uint256 newDebt = totalDebt + amount;\\n    require(newDebt <= debtCeiling, 'Debt can not go above debt ceiling');\\n\\n    totalDebt = newDebt;\\n  }\\n\\n  /**\\n   * @dev Subtract from the total debt of this vault type\\n   */\\n  function _subFromTotalDebt(uint256 amount) internal {\\n    require(amount <= totalDebt, 'Debt can not go below 0.');\\n    uint256 newDebt = totalDebt - amount;\\n\\n    totalDebt = newDebt;\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal pure override {\\n    revert('transfer: disabled');\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(\\n      ERC721Upgradeable,\\n      ERC721EnumerableUpgradeable,\\n      AccessControlUpgradeable\\n    )\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0x47f92502d8d8f7c1857b1d042af90b16e0143336d366590607d64dafdd953c6a\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/interfaces/IStablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStablecoin is IERC20 {\\n  function burn(address from, uint256 amount) external;\\n\\n  function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5cefe2dcfb64d8d8f1b16dfb3cc13b6fcc7754b268440daeefc461a7bff8fb77\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f8f80620000216000396000f3fe608060405234801561001057600080fd5b506004361061048d5760003560e01c8063728bbbb51161026b578063bda5310711610150578063dcd68128116100c8578063eb6a887d11610097578063fc0c546a1161007c578063fc0c546a146109da578063fc7b9c18146109ee578063ffc73da7146109f857600080fd5b8063eb6a887d146109b4578063ece13732146109c757600080fd5b8063dcd681281461093c578063e1a283d614610960578063e1c84ea41461096e578063e985e9c51461097857600080fd5b8063cea55f571161011f578063d310f49b11610104578063d310f49b146108e7578063d4a9b2c514610908578063d547741f1461092957600080fd5b8063cea55f57146108c8578063d11a57ec146108d257600080fd5b8063bda531071461088e578063c87b56dd146108a1578063c91ee83d146108b4578063cdfedd63146108be57600080fd5b806395d89b41116101e3578063a22cb465116101b2578063b1511cc911610197578063b1511cc914610855578063b86f6aef14610868578063b88d4fde1461087b57600080fd5b8063a22cb4651461082f578063ad13419d1461084257600080fd5b806395d89b411461080357806398d721e01461080b5780639fc30f1c1461081e578063a217fddf1461082757600080fd5b806385e290a31161023a57806390646b4a1161021f57806390646b4a146107a457806390cf0bba146107b757806391d14854146107ca57600080fd5b806385e290a31461077e578063863759941461079157600080fd5b8063728bbbb51461072d5780637558abc814610737578063767a7b051461075857806385af3c161461076b57600080fd5b80632f2ff15d1161039157806344382f0f1161030957806361d027b3116102d857806363b8817c116102bd57806363b8817c146106f457806370a08231146107075780637139c9291461071a57600080fd5b806361d027b3146106d75780636352211e146106e157600080fd5b806344382f0f146106a15780634f6ccce7146106a957806356572ac0146106bc5780635d12928b146106cf57600080fd5b80633db991771161036057806340c9ff8a1161034557806340c9ff8a1461066857806341a5068f1461067b57806342842e0e1461068e57600080fd5b80633db99177146106425780633e61facd1461065557600080fd5b80632f2ff15d146105ff5780632f745c5914610612578063311f392a1461062557806336568abe1461062f57600080fd5b80630a998f53116104245780631c883e7b116103f357806323b872dd116103d857806323b872dd146105bf578063248a9ca3146105d25780632935d2bc146105f557600080fd5b80631c883e7b146105a157806320531bc9146105ab57600080fd5b80630a998f531461055f578063116191b61461057257806311b4a8321461058657806318160ddd1461059957600080fd5b806306fdde031161046057806306fdde0314610511578063081812fc1461052657806308ec592714610539578063095ea7b31461054c57600080fd5b806301e49d0a1461049257806301ffc9a7146104a7578063048c661d146104cf578063048de381146104fb575b600080fd5b6104a56104a03660046159d1565b610a0b565b005b6104ba6104b5366004615a0b565b610ab7565b60405190151581526020015b60405180910390f35b61013a546104e3906001600160a01b031681565b6040516001600160a01b0390911681526020016104c6565b610503610ac8565b6040519081526020016104c6565b610519610bd4565b6040516104c69190615ca0565b6104e36105343660046159d1565b610c66565b6104a5610547366004615ae7565b610cfb565b6104a561055a366004615970565b611163565b6104a561056d3660046159d1565b611295565b61013b546104e3906001600160a01b031681565b6105036105943660046159d1565b6113af565b609954610503565b6105036101305481565b610137546104e3906001600160a01b031681565b6104a56105cd366004615886565b611451565b6105036105e03660046159d1565b600090815260fb602052604090206001015490565b61050361012e5481565b6104a561060d3660046159e9565b6114d8565b610503610620366004615970565b6114fe565b6105036101355481565b6104a561063d3660046159e9565b6115a6565b6104a56106503660046159d1565b611632565b6104a56106633660046159e9565b611715565b6104a56106763660046159d1565b611842565b6104a5610689366004615a5b565b6118e7565b6104a561069c366004615886565b611ad6565b610503611af1565b6105036106b73660046159d1565b611b02565b6105036106ca3660046159d1565b611bb4565b6104a5611d19565b61050361013c5481565b6104e36106ef3660046159d1565b611daa565b6104a561070236600461583a565b611e35565b61050361071536600461583a565b611ffc565b6104a56107283660046159d1565b612096565b6105036101315481565b61050361074536600461583a565b6101366020526000908152604090205481565b6104a5610766366004615ae7565b61210c565b6104a5610779366004615ae7565b6123d7565b6104a561078c3660046159d1565b6127e7565b6104a561079f3660046159d1565b6129ff565b6104a56107b236600461583a565b612a4e565b6104a56107c53660046159d1565b612b80565b6104ba6107d83660046159e9565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6105196131d9565b6104a561081936600461583a565b6131e8565b61013254610503565b610503600081565b6104a561083d36600461593a565b613340565b6104a5610850366004615999565b613405565b6104a56108633660046159d1565b6134b1565b6104ba6108763660046159d1565b613579565b6104a56108893660046158c1565b61371d565b6104a561089c36600461583a565b6137ab565b6105196108af3660046159d1565b61388f565b6105036101405481565b6105036101325481565b6105036101345481565b610503600080516020615f3a83398151915281565b6105036108f53660046159d1565b61013f6020526000908152604090205481565b6105036109163660046159d1565b61013e6020526000908152604090205481565b6104a56109373660046159e9565b613984565b6104ba61094a3660046159d1565b600090815261013d602052604090205460ff1690565b610141546104ba9060ff1681565b61050361012f5481565b6104ba610986366004615854565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6104a56109c23660046159d1565b6139aa565b6104a56109d5366004615ae7565b613a3f565b610138546104e3906001600160a01b031681565b6105036101335481565b6104a5610a063660046159d1565b613bc3565b600080516020615f3a833981519152610a248133613c56565b60008211610a795760405162461bcd60e51b815260206004820152601260248201527f5065672063616e6e6f74206265207a65726f000000000000000000000000000060448201526064015b60405180910390fd5b6101328290556040518281527f657d2b8cd9c1cd7fc4cfad3db71318ea067f53cfeb214befc5af59ed860d5a16906020015b60405180910390a15050565b6000610ac282613cd6565b92915050565b60008061013760009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b1a57600080fd5b505afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b529190615b08565b5050509150506000811215610bcf5760405162461bcd60e51b815260206004820152602360248201527f436861696e6c696e6b2072657475726e65642061206e6567617469766520707260448201527f69636500000000000000000000000000000000000000000000000000000000006064820152608401610a70565b919050565b606060658054610be390615e69565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0f90615e69565b8015610c5c5780601f10610c3157610100808354040283529160200191610c5c565b820191906000526020600020905b815481529060010190602001808311610c3f57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b0316610cdf5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a70565b506000908152606960205260409020546001600160a01b031690565b600082815261013d6020526040902054829060ff16610d535760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b33610d5d82611daa565b6001600160a01b03161480610d7d575061013b546001600160a01b031633145b610dc95760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b600260c9541415610e1c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c9556101415460ff1615610ec15760405162461bcd60e51b815260206004820152605d60248201527f4d696e74696e6720666f7220746869732062616e6b206973207061757365642e60448201527f204465706f736974732c207061796d656e74732c20616e64207769746864726160648201527f77616c732061726520616c6c207374696c6c2066756e6374696f6e616c000000608482015260a401610a70565b60008211610f115760405162461bcd60e51b815260206004820152601b60248201527f4d75737420626f72726f77206e6f6e2d7a65726f20616d6f756e7400000000006044820152606401610a70565b61012f548261013354610f249190615cb3565b1115610f725760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74206d696e74206f7665722064656274206365696c696e672e00006044820152606401610a70565b600083815261013f6020526040812054610f8d908490615cb3565b600085815261013e6020526040902054909150610faa9082613d14565b61101c5760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7720776f756c6420707574207661756c742062656c6f77206d696e60448201527f696d756d20636f6c6c61746572616c2070657263656e746167650000000000006064820152608401610a70565b610140548110156110955760405162461bcd60e51b815260206004820152602f60248201527f426f72726f77206e6565647320746f206265206c6172676572207468616e207460448201527f6865206d696e696d756d206465627400000000000000000000000000000000006064820152608401610a70565b61109f8484613dec565b610139546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b505060408051878152602081018790527f3e08df88d8e28f37df9bf227d3142ac506a364403445661a60891a49ed6792ca93500190505b60405180910390a15050600160c9555050565b600061116e82611daa565b9050806001600160a01b0316836001600160a01b031614156111f85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b336001600160a01b038216148061121457506112148133610986565b6112865760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a70565b6112908383613f04565b505050565b600080516020615f3a8339815191526112ae8133613c56565b600082116112fe5760405162461bcd60e51b815260206004820152601b60248201527f4d696e696d756d20646562742063616e6e6f74206265207a65726f00000000006044820152606401610a70565b61012f5461014054106113795760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20646562742063616e6e6f742062652067726561746572207460448201527f68616e2064656274206365696c696e67000000000000000000000000000000006064820152608401610a70565b6101408290556040518281527fe9031d105129d4c03f829c02017c30a898f35e17ddf050fdd090c416442bec5a90602001610aab565b600081815261013d602052604081205460ff166114015760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b6044820152606401610a70565b600082815261013e602090815260408083205461013f9092528220546114279190613f72565b91505061013254816114399190615ccb565b9050610134548161144a9190615ccb565b9392505050565b61145b3382614061565b6114cd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610a70565b611290838383614154565b600082815260fb60205260409020600101546114f48133613c56565b611290838361419c565b600061150983611ffc565b821061157d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610a70565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6001600160a01b03811633146116245760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610a70565b61162e828261423e565b5050565b600080516020615f3a83398151915261164b8133613c56565b60fa82111561169c5760405162461bcd60e51b815260206004820152601e60248201527f436c6f73696e67206665652063616e6e6f742062652061626f766520312500006044820152606401610a70565b6305f5e1006116ad83612710615cb3565b61013454610135546116c1906103e8615dcd565b6116cb9190615ccb565b6116d59190615dcd565b106116df57600080fd5b6101308290556040518281527f2be5116c37a9989b15d218af1d929034cabc673c9c821d52a901411be5eafd2890602001610aab565b600082815261013d6020526040902054829060ff1661176d5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b3361177782611daa565b6001600160a01b03161480611797575061013b546001600160a01b031633145b6117e35760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b6117ec836142c1565b6117f68284614368565b604080518481523360208201526001600160a01b0384168183015290517fa8159d062909288cfe1bc71a9cb71a800664f2658fc2588d52676a844f1b0f139181900360600190a1505050565b600080516020615f3a83398151915261185b8133613c56565b606e821015801561186e57506101908211155b6118e05760405162461bcd60e51b815260206004820152603a60248201527f4d696e696d756d20636f6c6c61746572616c2070657263656e74616765206d7560448201527f73742062652077697468696e2072616e6765203131302d3430300000000000006064820152608401610a70565b5061012e55565b600054610100900460ff1680611900575060005460ff16155b6119635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a70565b600054610100900460ff16158015611985576000805461ffff19166101011790555b61198d6144b6565b6119956144b6565b61199f8484614568565b6119a76144b6565b6119af614644565b6119b76144b6565b6001600160a01b0385166119db57634e487b7160e01b600052600160045260246000fd5b60648610156119fa57634e487b7160e01b600052600160045260246000fd5b678ac7230489e8000061012f55604b6101305560006101318190556305f5e10061013255600261013455600b6101355561013a80546001600160a01b031990811690915561013b805482169055610137805482166001600160a01b038981169190911790915561013880548316918616919091179055610139805433921682179055611a8691906146fb565b611a9e600080516020615f3a833981519152336146fb565b611ab6600080516020615f3a83398151915280614705565b61012e8690558015611ace576000805461ff00191690555b505050505050565b6112908383836040518060200160405280600081525061371d565b6000611afd61012d5490565b905090565b6000611b0d60995490565b8210611b815760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610a70565b60998281548110611ba257634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600081815261013d602052604081205460ff16611c065760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b6044820152606401610a70565b600082815261013e602090815260408083205461013f909252822054611c2c9190613f72565b915050600061013860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8057600080fd5b505afa158015611c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb89190615b4b565b611cc3906012615e03565b611cce90600a615d22565b61013454611cda610ac8565b611ce590600a615dcd565b611cef9190615dcd565b61013554611cfd9085615dcd565b611d079190615ccb565b611d119190615ccb565b949350505050565b611d2861012d80546001019055565b6000611d3461012d5490565b600081815261013d602052604090819020805460ff19166001179055519091507f8b6c1d05c678fa59695e26465a85918ce0fc63a88f74af53d1daef8f0a9c780490611d9590839033909182526001600160a01b0316602082015260400190565b60405180910390a1611da73382614368565b50565b6000818152606760205260408120546001600160a01b031680610ac25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610a70565b600260c9541415611e885760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c95580336001600160a01b0382161480611eb0575061013b546001600160a01b031633145b611efc5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f74206765742070616964206966206e6f7420796f757273000000006044820152606401610a70565b6001600160a01b03821660009081526101366020526040902054611f885760405162461bcd60e51b815260206004820152602860248201527f4e6f206c69717569646174696f6e73206173736f63696174656420776974682060448201527f6163636f756e742e0000000000000000000000000000000000000000000000006064820152608401610a70565b6001600160a01b038083166000908152610136602052604081208054919055610138549091611fb991163383614750565b604080518281523360208201527f45f23935dce154b3c7ff256ac2402f7700f39ce5b210b7da385215939fc4c5c891015b60405180910390a15050600160c95550565b60006001600160a01b03821661207a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610a70565b506001600160a01b031660009081526068602052604090205490565b600080516020615f3a8339815191526120af8133613c56565b600082815261013d602052604090205460ff166121055760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b5061013c55565b600082815261013d6020526040902054829060ff166121645760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b3361216e82611daa565b6001600160a01b0316148061218e575061013b546001600160a01b031633145b6121da5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b600260c954141561222d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c955600083815261013e60205260409020548211156122b75760405162461bcd60e51b815260206004820152602560248201527f5661756c7420646f6573206e6f74206861766520656e6f75676820636f6c6c6160448201527f746572616c0000000000000000000000000000000000000000000000000000006064820152608401610a70565b600083815261013e60205260408120546122d2908490615dec565b600085815261013f60205260409020549091501561237757600084815261013f6020526040902054612305908290613d14565b6123775760405162461bcd60e51b815260206004820152603e60248201527f5769746864726177616c20776f756c6420707574207661756c742062656c6f7760448201527f206d696e696d756d20636f6c6c61746572616c2070657263656e7461676500006064820152608401610a70565b600084815261013e60205260409020819055610138546123a1906001600160a01b03163385614750565b60408051858152602081018590527f6c0ea3bea9dd66afa8f9d39d6eb93d833466190330813b42835efc650dca4cb99101611150565b600082815261013d6020526040902054829060ff1661242f5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b3361243982611daa565b6001600160a01b03161480612459575061013b546001600160a01b031633145b6124a55760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b600260c95414156124f85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c955610139546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561254157600080fd5b505afa158015612555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125799190615a43565b10156125c75760405162461bcd60e51b815260206004820152601560248201527f546f6b656e2062616c616e636520746f6f206c6f7700000000000000000000006044820152606401610a70565b600083815261013f602052604090205482111561264c5760405162461bcd60e51b815260206004820152602760248201527f5661756c742064656274206c657373207468616e20616d6f756e7420746f207060448201527f6179206261636b000000000000000000000000000000000000000000000000006064820152608401610a70565b610138546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561269257600080fd5b505afa1580156126a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ca9190615b4b565b6126d5906012615e03565b6126e090600a615d22565b6126e8610ac8565b6126f490612710615dcd565b61013254610130546127069087615dcd565b6127109190615dcd565b61271a9190615ccb565b6127249190615ccb565b905061273084846147e1565b61273a8482614967565b61274381614a4e565b61013954604051632770a7eb60e21b8152336004820152602481018590526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561279057600080fd5b505af11580156127a4573d6000803e3d6000fd5b505060408051878152602081018790529081018490527f31f96762af4051f367185773cc2f55bfb112a6c114b3407ded1f321a9eb199ac92506060019050611150565b600081815261013d6020526040902054819060ff1661283f5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b3361284982611daa565b6001600160a01b03161480612869575061013b546001600160a01b031633145b6128b55760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b600260c95414156129085760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c955600082815261013f60205260409020541561296a5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206173206f75747374616e64696e672064656274000000000000006044820152606401610a70565b600082815261013e6020526040902054612983836142c1565b600083815261013d60209081526040808320805460ff1916905561013e825280832083905561013f90915281205580156129cf57610138546129cf906001600160a01b03163383614750565b6040518381527f4fe08624ee65b341c38ab9693d216b909d4ddee1bc8d3fe0fea14026c361b46590602001611fea565b600080516020615f3a833981519152612a188133613c56565b6101318290556040518281527ff78536edc296a3a7e991e00caa8319c68a84cc56f22e8c9118463773d0844b9390602001610aab565b600080516020615f3a833981519152612a678133613c56565b6001600160a01b038216612abd5760405162461bcd60e51b815260206004820152601e60248201527f476174657761792063616e6e6f74206265207a65726f206164647265737300006044820152606401610a70565b813b612b315760405162461bcd60e51b815260206004820152602560248201527f4d757374206265206120636f6e747261637420746f206265207468652067617460448201527f657761792e0000000000000000000000000000000000000000000000000000006064820152608401610a70565b61013b80546001600160a01b0319166001600160a01b0384169081179091556040519081527f138dfef152fa4f095c1158aad1b384e3c43de632c031e8e37e149917e690075790602001610aab565b61013a546001600160a01b03161580612ba4575061013a546001600160a01b031633145b612c165760405162461bcd60e51b815260206004820152602160248201527f6275795269736b795661756c742064697361626c656420666f72207075626c6960448201527f63000000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b600260c9541415612c695760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c955600081815261013d602052604090205460ff16612cc45760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b600081815261013e602090815260408083205461013f9092528220548291612ceb91613f72565b9150915060008111612d3f5760405162461bcd60e51b815260206004820152601160248201527f5661756c7420686173206e6f20646562740000000000000000000000000000006044820152606401610a70565b60008161013860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9157600080fd5b505afa158015612da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc99190615b4b565b612dd4906012615e03565b612ddf90600a615d22565b612de99085615dcd565b612df39190615ccb565b905061012e548110612e6d5760405162461bcd60e51b815260206004820152603060248201527f5661756c74206973206e6f742062656c6f77206d696e696d756d20636f6c6c6160448201527f746572616c2070657263656e74616765000000000000000000000000000000006064820152608401610a70565b6000612e7885611bb4565b90506000612e85866113af565b610139546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b158015612ece57600080fd5b505afa158015612ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f069190615a43565b1015612f7a5760405162461bcd60e51b815260206004820152603160248201527f546f6b656e2062616c616e636520746f6f206c6f7720746f20706179206f666660448201527f206f75747374616e64696e6720646562740000000000000000000000000000006064820152608401610a70565b61013954604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015612fc757600080fd5b505af1158015612fdb573d6000803e3d6000fd5b505050600087815261013f602052604081208054849350909190613000908490615dec565b9091555050610138546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561304b57600080fd5b505afa15801561305f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130839190615b4b565b61308e906012615e03565b61309990600a615d22565b6130a1610ac8565b6130ad90612710615dcd565b61013254610130546130bf9086615dcd565b6130c99190615dcd565b6130d39190615ccb565b6130dd9190615ccb565b90506130e98382615cb3565b600088815261013e602052604081208054909190613108908490615dec565b909155505061013c54600090815261013e602052604081208054839290613130908490615cb3565b9091555050336000908152610136602052604081208054859290613155908490615cb3565b90915550613164905082614ab8565b7f4d151d3a98b83151d51917640c221f8c8e3c054422ea1b48dcbbd57e3f4210d58761318f89611daa565b604080519283526001600160a01b0390911660208301523390820152606081018490526080810185905260a0810183905260c00160405180910390a15050600160c9555050505050565b606060668054610be390615e69565b600080516020615f3a8339815191526132018133613c56565b6001600160a01b03821661327d5760405162461bcd60e51b815260206004820152602560248201527f53746162696c69747920706f6f6c2063616e6e6f74206265207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610a70565b813b6132f15760405162461bcd60e51b815260206004820152602c60248201527f4d757374206265206120636f6e747261637420746f206265207468652073746160448201527f62696c69747920706f6f6c2e00000000000000000000000000000000000000006064820152608401610a70565b61013a80546001600160a01b0319166001600160a01b0384169081179091556040519081527feeec3ab95f3c876a3b73235ba92edc637a2edd294b997b5758fbf556f7953b9f90602001610aab565b6001600160a01b0382163314156133995760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a70565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600080516020615f3a83398151915261341e8133613c56565b6101415460ff16158215151461349c5760405162461bcd60e51b815260206004820152602960248201527f4d696e74696e672070617573656420616c72656164792073657420746f20746860448201527f69732076616c75652e00000000000000000000000000000000000000000000006064820152608401610a70565b50610141805460ff1916911515919091179055565b600080516020615f3a8339815191526134ca8133613c56565b8161012f5411156135435760405162461bcd60e51b815260206004820152603c60248201527f7365744365696c696e673a204d757374206265206f7665722074686520616d6f60448201527f756e74206f662063757272656e742064656274206365696c696e672e000000006064820152608401610a70565b61012f8290556040518281527f9e88375210357aa5dbeb756c2deee5a1a487e6dcd9fa8f444eda3bc7df41a37b90602001610aab565b600081815261013d602052604081205460ff166135cb5760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b6044820152606401610a70565b600082815261013e602090815260408083205461013f90925282205482916135f291613f72565b91509150600081116136465760405162461bcd60e51b815260206004820152601560248201527f43616e6e6f742068617665207a65726f206465627400000000000000000000006044820152606401610a70565b60008161013860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561369857600080fd5b505afa1580156136ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d09190615b4b565b6136db906012615e03565b6136e690600a615d22565b6136f09085615dcd565b6136fa9190615ccb565b905061012e5481101561371257506001949350505050565b506000949350505050565b6137273383614061565b6137995760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610a70565b6137a584848484614b24565b50505050565b600080516020615f3a8339815191526137c48133613c56565b6001600160a01b0382166138405760405162461bcd60e51b815260206004820152602360248201527f507269636520736f757263652063616e6e6f74206265207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610a70565b61013780546001600160a01b0319166001600160a01b0384169081179091556040519081527f96e1b2ba899db8310c90fe5b78eeb80bcaaf5de5f0c4549c82c621c2bc778b8090602001610aab565b6000818152606760205260409020546060906001600160a01b031661391c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610a70565b600061393360408051602081019091526000815290565b90506000815111613953576040518060200160405280600081525061144a565b8061395d84614bad565b60405160200161396e929190615bb4565b6040516020818303038152906040529392505050565b600082815260fb60205260409020600101546139a08133613c56565b611290838361423e565b600080516020615f3a8339815191526139c38133613c56565b6305f5e100610130546127106139d99190615cb3565b83610135546103e86139eb9190615dcd565b6139f59190615ccb565b6139ff9190615dcd565b10613a0957600080fd5b6101348290556040518281527f29c334aad4ec9c65aa6ad3e720e9ad21ce4d7d6dbbdb44a3f97f2762d49387ca90602001610aab565b600082815261013d6020526040902054829060ff16613a975760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b33613aa182611daa565b6001600160a01b03161480613ac1575061013b546001600160a01b031633145b613b0d5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b61013854613b26906001600160a01b0316333085614cc7565b600083815261013e6020526040812054613b41908490615cb3565b600085815261013e6020526040902054909150811015613b7157634e487b7160e01b600052600160045260246000fd5b600084815261013e602090815260409182902083905581518681529081018590527f52c4e7127ec34e8fc95f09ce2d06b4f00acca12ccbcdfb246ef67ee6aefe068d910160405180910390a150505050565b600080516020615f3a833981519152613bdc8133613c56565b6305f5e10061013054612710613bf29190615cb3565b61013454613c02856103e8615dcd565b613c0c9190615ccb565b613c169190615dcd565b10613c2057600080fd5b6101358290556040518281527fee1adee4317c98f3606485f5b5d290ec4f4b8e1baee4906df1a86cd549ac864290602001610aab565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661162e57613c94816001600160a01b03166014614d18565b613c9f836020614d18565b604051602001613cb0929190615be3565b60408051601f198184030181529082905262461bcd60e51b8252610a7091600401615ca0565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610ac25750610ac282614f23565b6000806000613d238585613f72565b909250905060008161013860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613d7a57600080fd5b505afa158015613d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613db29190615b4b565b613dbd906012615e03565b613dc890600a615d22565b613dd29085615dcd565b613ddc9190615ccb565b61012e5411159695505050505050565b60006101335482613dfd9190615cb3565b905061013354811015613e2057634e487b7160e01b600052600160045260246000fd5b61012f54811115613e995760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74206578636565642064656274206365696c696e6720666f72207460448201527f686973207661756c7400000000000000000000000000000000000000000000006064820152608401610a70565b600083815261013f6020526040812054613eb39084615cb3565b600085815261013f6020526040902054909150811015613ee357634e487b7160e01b600052600160045260246000fd5b613eec83614f61565b600093845261013f6020526040909320929092555050565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613f3982611daa565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080613f7d610ac8565b613fc95760405162461bcd60e51b815260206004820152601560248201527f5072696365206d7573742062652061626f7665203000000000000000000000006044820152606401610a70565b610132546140195760405162461bcd60e51b815260206004820152601360248201527f506567206d7573742062652061626f76652030000000000000000000000000006044820152606401610a70565b6000614023610ac8565b61402d9086615dcd565b9050600061403b6101325490565b6140459086615dcd565b90506000614054836064615dcd565b9791965090945050505050565b6000818152606760205260408120546001600160a01b03166140da5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a70565b60006140e583611daa565b9050806001600160a01b0316846001600160a01b031614806141205750836001600160a01b031661411584610c66565b6001600160a01b0316145b80611d1157506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16611d11565b60405162461bcd60e51b815260206004820152601260248201527f7472616e736665723a2064697361626c656400000000000000000000000000006044820152606401610a70565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661162e57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556141fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff161561162e57600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006142cc82611daa565b90506142da81600084614ff4565b6142e5600083613f04565b6001600160a01b038116600090815260686020526040812080546001929061430e908490615dec565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166143be5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a70565b6000818152606760205260409020546001600160a01b0316156144235760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a70565b61442f60008383614ff4565b6001600160a01b0382166000908152606860205260408120805460019290614458908490615cb3565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff16806144cf575060005460ff16155b6145325760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a70565b600054610100900460ff16158015614554576000805461ffff19166101011790555b8015611da7576000805461ff001916905550565b600054610100900460ff1680614581575060005460ff16155b6145e45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a70565b600054610100900460ff16158015614606576000805461ffff19166101011790555b82516146199060659060208601906156db565b50815161462d9060669060208501906156db565b508015611290576000805461ff0019169055505050565b600054610100900460ff168061465d575060005460ff16155b6146c05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a70565b600054610100900460ff161580156146e2576000805461ffff19166101011790555b600160c9558015611da7576000805461ff001916905550565b61162e828261419c565b600082815260fb6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6040516001600160a01b0383166024820152604481018290526112909084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152614fff565b8061013354101561485a5760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f206578697374732e0000000000000000000000000000000000000000000000006064820152608401610a70565b600082815261013f60205260409020548111156148df5760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f20757365722068617300000000000000000000000000000000000000000000006064820152608401610a70565b600081610133546148f09190615dec565b90506101335481111561491357634e487b7160e01b600052600160045260246000fd5b600083815261013f602052604081205461492e908490615dec565b600085815261013f602052604090205490915081111561495e57634e487b7160e01b600052600160045260246000fd5b613eec83614ab8565b600082815261013e60205260409020548111156149ec5760405162461bcd60e51b815260206004820152603060248201527f43616e6e6f742072656d6f7665206d6f7265207468616e20746865206465706f60448201527f736974656420636f6c6c61746572616c000000000000000000000000000000006064820152608401610a70565b600082815261013e6020526040812054614a07908390615dec565b600084815261013e6020526040902054909150811115614a3757634e487b7160e01b600052600160045260246000fd5b600092835261013e60205260409092209190915550565b61013c54600090815261013e6020526040812054614a6d908390615cb3565b61013c54600090815261013e6020526040902054909150811015614aa157634e487b7160e01b600052600160045260246000fd5b61013c54600090815261013e602052604090205550565b61013354811115614b0b5760405162461bcd60e51b815260206004820152601860248201527f446562742063616e206e6f7420676f2062656c6f7720302e00000000000000006044820152606401610a70565b60008161013354614b1c9190615dec565b610133555050565b614b2f848484614154565b614b3b848484846150e4565b6137a55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a70565b606081614bd15750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614bfb5780614be581615ea4565b9150614bf49050600a83615ccb565b9150614bd5565b60008167ffffffffffffffff811115614c2457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614c4e576020820181803683370190505b5090505b8415611d1157614c63600183615dec565b9150614c70600a86615ebf565b614c7b906030615cb3565b60f81b818381518110614c9e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350614cc0600a86615ccb565b9450614c52565b6040516001600160a01b03808516602483015283166044820152606481018290526137a59085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401614795565b60606000614d27836002615dcd565b614d32906002615cb3565b67ffffffffffffffff811115614d5857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614d82576020820181803683370190505b509050600360fc1b81600081518110614dab57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110614e0457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000614e28846002615dcd565b614e33906001615cb3565b90505b6001811115614ed4577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110614e8257634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110614ea657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93614ecd81615e52565b9050614e36565b50831561144a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a70565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610ac25750610ac282615247565b60008161013354614f729190615cb3565b905061012f54811115614fed5760405162461bcd60e51b815260206004820152602260248201527f446562742063616e206e6f7420676f2061626f76652064656274206365696c6960448201527f6e670000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b6101335550565b6112908383836152e2565b6000615054826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661539a9092919063ffffffff16565b805190915015611290578080602001905181019061507291906159b5565b6112905760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a70565b60006001600160a01b0384163b1561523c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290615128903390899088908890600401615c64565b602060405180830381600087803b15801561514257600080fd5b505af1925050508015615172575060408051601f3d908101601f1916820190925261516f91810190615a27565b60015b615222573d8080156151a0576040519150601f19603f3d011682016040523d82523d6000602084013e6151a5565b606091505b50805161521a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a70565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d11565b506001949350505050565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806152aa57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610ac257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610ac2565b6001600160a01b03831661533d5761533881609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b615360565b816001600160a01b0316836001600160a01b0316146153605761536083826153a9565b6001600160a01b0382166153775761129081615446565b826001600160a01b0316826001600160a01b03161461129057611290828261551f565b6060611d118484600085615563565b600060016153b684611ffc565b6153c09190615dec565b600083815260986020526040902054909150808214615413576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b60995460009061545890600190615dec565b6000838152609a60205260408120546099805493945090928490811061548e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080609983815481106154bd57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152609a9091526040808220849055858252812055609980548061550357634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061552a83611ffc565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6060824710156155db5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a70565b843b6156295760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a70565b600080866001600160a01b031685876040516156459190615b98565b60006040518083038185875af1925050503d8060008114615682576040519150601f19603f3d011682016040523d82523d6000602084013e615687565b606091505b50915091506156978282866156a2565b979650505050505050565b606083156156b157508161144a565b8251156156c15782518084602001fd5b8160405162461bcd60e51b8152600401610a709190615ca0565b8280546156e790615e69565b90600052602060002090601f016020900481019282615709576000855561574f565b82601f1061572257805160ff191683800117855561574f565b8280016001018555821561574f579182015b8281111561574f578251825591602001919060010190615734565b5061575b92915061575f565b5090565b5b8082111561575b5760008155600101615760565b600067ffffffffffffffff8084111561578f5761578f615eff565b604051601f8501601f19908116603f011681019082821181831017156157b7576157b7615eff565b816040528093508581528686860111156157d057600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114610bcf57600080fd5b600082601f830112615811578081fd5b61144a83833560208501615774565b805169ffffffffffffffffffff81168114610bcf57600080fd5b60006020828403121561584b578081fd5b61144a826157ea565b60008060408385031215615866578081fd5b61586f836157ea565b915061587d602084016157ea565b90509250929050565b60008060006060848603121561589a578081fd5b6158a3846157ea565b92506158b1602085016157ea565b9150604084013590509250925092565b600080600080608085870312156158d6578081fd5b6158df856157ea565b93506158ed602086016157ea565b925060408501359150606085013567ffffffffffffffff81111561590f578182fd5b8501601f8101871361591f578182fd5b61592e87823560208401615774565b91505092959194509250565b6000806040838503121561594c578182fd5b615955836157ea565b9150602083013561596581615f15565b809150509250929050565b60008060408385031215615982578182fd5b61598b836157ea565b946020939093013593505050565b6000602082840312156159aa578081fd5b813561144a81615f15565b6000602082840312156159c6578081fd5b815161144a81615f15565b6000602082840312156159e2578081fd5b5035919050565b600080604083850312156159fb578182fd5b8235915061587d602084016157ea565b600060208284031215615a1c578081fd5b813561144a81615f23565b600060208284031215615a38578081fd5b815161144a81615f23565b600060208284031215615a54578081fd5b5051919050565b600080600080600060a08688031215615a72578283fd5b85359450615a82602087016157ea565b9350604086013567ffffffffffffffff80821115615a9e578485fd5b615aaa89838a01615801565b94506060880135915080821115615abf578283fd5b50615acc88828901615801565b925050615adb608087016157ea565b90509295509295909350565b60008060408385031215615af9578182fd5b50508035926020909101359150565b600080600080600060a08688031215615b1f578283fd5b615b2886615820565b9450602086015193506040860151925060608601519150615adb60808701615820565b600060208284031215615b5c578081fd5b815160ff8116811461144a578182fd5b60008151808452615b84816020860160208601615e26565b601f01601f19169290920160200192915050565b60008251615baa818460208701615e26565b9190910192915050565b60008351615bc6818460208801615e26565b835190830190615bda818360208801615e26565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615c1b816017850160208801615e26565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615c58816028840160208801615e26565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152615c966080830184615b6c565b9695505050505050565b60208152600061144a6020830184615b6c565b60008219821115615cc657615cc6615ed3565b500190565b600082615cda57615cda615ee9565b500490565b600181815b80851115615d1a578160001904821115615d0057615d00615ed3565b80851615615d0d57918102915b93841c9390800290615ce4565b509250929050565b600061144a60ff841683600082615d3b57506001610ac2565b81615d4857506000610ac2565b8160018114615d5e5760028114615d6857615d84565b6001915050610ac2565b60ff841115615d7957615d79615ed3565b50506001821b610ac2565b5060208310610133831016604e8410600b8410161715615da7575081810a610ac2565b615db18383615cdf565b8060001904821115615dc557615dc5615ed3565b029392505050565b6000816000190483118215151615615de757615de7615ed3565b500290565b600082821015615dfe57615dfe615ed3565b500390565b600060ff821660ff841680821015615e1d57615e1d615ed3565b90039392505050565b60005b83811015615e41578181015183820152602001615e29565b838111156137a55750506000910152565b600081615e6157615e61615ed3565b506000190190565b600181811c90821680615e7d57607f821691505b60208210811415615e9e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615eb857615eb8615ed3565b5060010190565b600082615ece57615ece615ee9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611da757600080fd5b6001600160e01b031981168114611da757600080fdfee1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9a26469706673582212207e5c561a838ef63f5b4e2922cbc756b7219caf25d043c2767a203e000fc3982164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061048d5760003560e01c8063728bbbb51161026b578063bda5310711610150578063dcd68128116100c8578063eb6a887d11610097578063fc0c546a1161007c578063fc0c546a146109da578063fc7b9c18146109ee578063ffc73da7146109f857600080fd5b8063eb6a887d146109b4578063ece13732146109c757600080fd5b8063dcd681281461093c578063e1a283d614610960578063e1c84ea41461096e578063e985e9c51461097857600080fd5b8063cea55f571161011f578063d310f49b11610104578063d310f49b146108e7578063d4a9b2c514610908578063d547741f1461092957600080fd5b8063cea55f57146108c8578063d11a57ec146108d257600080fd5b8063bda531071461088e578063c87b56dd146108a1578063c91ee83d146108b4578063cdfedd63146108be57600080fd5b806395d89b41116101e3578063a22cb465116101b2578063b1511cc911610197578063b1511cc914610855578063b86f6aef14610868578063b88d4fde1461087b57600080fd5b8063a22cb4651461082f578063ad13419d1461084257600080fd5b806395d89b411461080357806398d721e01461080b5780639fc30f1c1461081e578063a217fddf1461082757600080fd5b806385e290a31161023a57806390646b4a1161021f57806390646b4a146107a457806390cf0bba146107b757806391d14854146107ca57600080fd5b806385e290a31461077e578063863759941461079157600080fd5b8063728bbbb51461072d5780637558abc814610737578063767a7b051461075857806385af3c161461076b57600080fd5b80632f2ff15d1161039157806344382f0f1161030957806361d027b3116102d857806363b8817c116102bd57806363b8817c146106f457806370a08231146107075780637139c9291461071a57600080fd5b806361d027b3146106d75780636352211e146106e157600080fd5b806344382f0f146106a15780634f6ccce7146106a957806356572ac0146106bc5780635d12928b146106cf57600080fd5b80633db991771161036057806340c9ff8a1161034557806340c9ff8a1461066857806341a5068f1461067b57806342842e0e1461068e57600080fd5b80633db99177146106425780633e61facd1461065557600080fd5b80632f2ff15d146105ff5780632f745c5914610612578063311f392a1461062557806336568abe1461062f57600080fd5b80630a998f53116104245780631c883e7b116103f357806323b872dd116103d857806323b872dd146105bf578063248a9ca3146105d25780632935d2bc146105f557600080fd5b80631c883e7b146105a157806320531bc9146105ab57600080fd5b80630a998f531461055f578063116191b61461057257806311b4a8321461058657806318160ddd1461059957600080fd5b806306fdde031161046057806306fdde0314610511578063081812fc1461052657806308ec592714610539578063095ea7b31461054c57600080fd5b806301e49d0a1461049257806301ffc9a7146104a7578063048c661d146104cf578063048de381146104fb575b600080fd5b6104a56104a03660046159d1565b610a0b565b005b6104ba6104b5366004615a0b565b610ab7565b60405190151581526020015b60405180910390f35b61013a546104e3906001600160a01b031681565b6040516001600160a01b0390911681526020016104c6565b610503610ac8565b6040519081526020016104c6565b610519610bd4565b6040516104c69190615ca0565b6104e36105343660046159d1565b610c66565b6104a5610547366004615ae7565b610cfb565b6104a561055a366004615970565b611163565b6104a561056d3660046159d1565b611295565b61013b546104e3906001600160a01b031681565b6105036105943660046159d1565b6113af565b609954610503565b6105036101305481565b610137546104e3906001600160a01b031681565b6104a56105cd366004615886565b611451565b6105036105e03660046159d1565b600090815260fb602052604090206001015490565b61050361012e5481565b6104a561060d3660046159e9565b6114d8565b610503610620366004615970565b6114fe565b6105036101355481565b6104a561063d3660046159e9565b6115a6565b6104a56106503660046159d1565b611632565b6104a56106633660046159e9565b611715565b6104a56106763660046159d1565b611842565b6104a5610689366004615a5b565b6118e7565b6104a561069c366004615886565b611ad6565b610503611af1565b6105036106b73660046159d1565b611b02565b6105036106ca3660046159d1565b611bb4565b6104a5611d19565b61050361013c5481565b6104e36106ef3660046159d1565b611daa565b6104a561070236600461583a565b611e35565b61050361071536600461583a565b611ffc565b6104a56107283660046159d1565b612096565b6105036101315481565b61050361074536600461583a565b6101366020526000908152604090205481565b6104a5610766366004615ae7565b61210c565b6104a5610779366004615ae7565b6123d7565b6104a561078c3660046159d1565b6127e7565b6104a561079f3660046159d1565b6129ff565b6104a56107b236600461583a565b612a4e565b6104a56107c53660046159d1565b612b80565b6104ba6107d83660046159e9565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6105196131d9565b6104a561081936600461583a565b6131e8565b61013254610503565b610503600081565b6104a561083d36600461593a565b613340565b6104a5610850366004615999565b613405565b6104a56108633660046159d1565b6134b1565b6104ba6108763660046159d1565b613579565b6104a56108893660046158c1565b61371d565b6104a561089c36600461583a565b6137ab565b6105196108af3660046159d1565b61388f565b6105036101405481565b6105036101325481565b6105036101345481565b610503600080516020615f3a83398151915281565b6105036108f53660046159d1565b61013f6020526000908152604090205481565b6105036109163660046159d1565b61013e6020526000908152604090205481565b6104a56109373660046159e9565b613984565b6104ba61094a3660046159d1565b600090815261013d602052604090205460ff1690565b610141546104ba9060ff1681565b61050361012f5481565b6104ba610986366004615854565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6104a56109c23660046159d1565b6139aa565b6104a56109d5366004615ae7565b613a3f565b610138546104e3906001600160a01b031681565b6105036101335481565b6104a5610a063660046159d1565b613bc3565b600080516020615f3a833981519152610a248133613c56565b60008211610a795760405162461bcd60e51b815260206004820152601260248201527f5065672063616e6e6f74206265207a65726f000000000000000000000000000060448201526064015b60405180910390fd5b6101328290556040518281527f657d2b8cd9c1cd7fc4cfad3db71318ea067f53cfeb214befc5af59ed860d5a16906020015b60405180910390a15050565b6000610ac282613cd6565b92915050565b60008061013760009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b1a57600080fd5b505afa158015610b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b529190615b08565b5050509150506000811215610bcf5760405162461bcd60e51b815260206004820152602360248201527f436861696e6c696e6b2072657475726e65642061206e6567617469766520707260448201527f69636500000000000000000000000000000000000000000000000000000000006064820152608401610a70565b919050565b606060658054610be390615e69565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0f90615e69565b8015610c5c5780601f10610c3157610100808354040283529160200191610c5c565b820191906000526020600020905b815481529060010190602001808311610c3f57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b0316610cdf5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a70565b506000908152606960205260409020546001600160a01b031690565b600082815261013d6020526040902054829060ff16610d535760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b33610d5d82611daa565b6001600160a01b03161480610d7d575061013b546001600160a01b031633145b610dc95760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b600260c9541415610e1c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c9556101415460ff1615610ec15760405162461bcd60e51b815260206004820152605d60248201527f4d696e74696e6720666f7220746869732062616e6b206973207061757365642e60448201527f204465706f736974732c207061796d656e74732c20616e64207769746864726160648201527f77616c732061726520616c6c207374696c6c2066756e6374696f6e616c000000608482015260a401610a70565b60008211610f115760405162461bcd60e51b815260206004820152601b60248201527f4d75737420626f72726f77206e6f6e2d7a65726f20616d6f756e7400000000006044820152606401610a70565b61012f548261013354610f249190615cb3565b1115610f725760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74206d696e74206f7665722064656274206365696c696e672e00006044820152606401610a70565b600083815261013f6020526040812054610f8d908490615cb3565b600085815261013e6020526040902054909150610faa9082613d14565b61101c5760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7720776f756c6420707574207661756c742062656c6f77206d696e60448201527f696d756d20636f6c6c61746572616c2070657263656e746167650000000000006064820152608401610a70565b610140548110156110955760405162461bcd60e51b815260206004820152602f60248201527f426f72726f77206e6565647320746f206265206c6172676572207468616e207460448201527f6865206d696e696d756d206465627400000000000000000000000000000000006064820152608401610a70565b61109f8484613dec565b610139546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561110557600080fd5b505af1158015611119573d6000803e3d6000fd5b505060408051878152602081018790527f3e08df88d8e28f37df9bf227d3142ac506a364403445661a60891a49ed6792ca93500190505b60405180910390a15050600160c9555050565b600061116e82611daa565b9050806001600160a01b0316836001600160a01b031614156111f85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b336001600160a01b038216148061121457506112148133610986565b6112865760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a70565b6112908383613f04565b505050565b600080516020615f3a8339815191526112ae8133613c56565b600082116112fe5760405162461bcd60e51b815260206004820152601b60248201527f4d696e696d756d20646562742063616e6e6f74206265207a65726f00000000006044820152606401610a70565b61012f5461014054106113795760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20646562742063616e6e6f742062652067726561746572207460448201527f68616e2064656274206365696c696e67000000000000000000000000000000006064820152608401610a70565b6101408290556040518281527fe9031d105129d4c03f829c02017c30a898f35e17ddf050fdd090c416442bec5a90602001610aab565b600081815261013d602052604081205460ff166114015760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b6044820152606401610a70565b600082815261013e602090815260408083205461013f9092528220546114279190613f72565b91505061013254816114399190615ccb565b9050610134548161144a9190615ccb565b9392505050565b61145b3382614061565b6114cd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610a70565b611290838383614154565b600082815260fb60205260409020600101546114f48133613c56565b611290838361419c565b600061150983611ffc565b821061157d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610a70565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6001600160a01b03811633146116245760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610a70565b61162e828261423e565b5050565b600080516020615f3a83398151915261164b8133613c56565b60fa82111561169c5760405162461bcd60e51b815260206004820152601e60248201527f436c6f73696e67206665652063616e6e6f742062652061626f766520312500006044820152606401610a70565b6305f5e1006116ad83612710615cb3565b61013454610135546116c1906103e8615dcd565b6116cb9190615ccb565b6116d59190615dcd565b106116df57600080fd5b6101308290556040518281527f2be5116c37a9989b15d218af1d929034cabc673c9c821d52a901411be5eafd2890602001610aab565b600082815261013d6020526040902054829060ff1661176d5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b3361177782611daa565b6001600160a01b03161480611797575061013b546001600160a01b031633145b6117e35760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b6117ec836142c1565b6117f68284614368565b604080518481523360208201526001600160a01b0384168183015290517fa8159d062909288cfe1bc71a9cb71a800664f2658fc2588d52676a844f1b0f139181900360600190a1505050565b600080516020615f3a83398151915261185b8133613c56565b606e821015801561186e57506101908211155b6118e05760405162461bcd60e51b815260206004820152603a60248201527f4d696e696d756d20636f6c6c61746572616c2070657263656e74616765206d7560448201527f73742062652077697468696e2072616e6765203131302d3430300000000000006064820152608401610a70565b5061012e55565b600054610100900460ff1680611900575060005460ff16155b6119635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a70565b600054610100900460ff16158015611985576000805461ffff19166101011790555b61198d6144b6565b6119956144b6565b61199f8484614568565b6119a76144b6565b6119af614644565b6119b76144b6565b6001600160a01b0385166119db57634e487b7160e01b600052600160045260246000fd5b60648610156119fa57634e487b7160e01b600052600160045260246000fd5b678ac7230489e8000061012f55604b6101305560006101318190556305f5e10061013255600261013455600b6101355561013a80546001600160a01b031990811690915561013b805482169055610137805482166001600160a01b038981169190911790915561013880548316918616919091179055610139805433921682179055611a8691906146fb565b611a9e600080516020615f3a833981519152336146fb565b611ab6600080516020615f3a83398151915280614705565b61012e8690558015611ace576000805461ff00191690555b505050505050565b6112908383836040518060200160405280600081525061371d565b6000611afd61012d5490565b905090565b6000611b0d60995490565b8210611b815760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610a70565b60998281548110611ba257634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600081815261013d602052604081205460ff16611c065760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b6044820152606401610a70565b600082815261013e602090815260408083205461013f909252822054611c2c9190613f72565b915050600061013860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8057600080fd5b505afa158015611c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb89190615b4b565b611cc3906012615e03565b611cce90600a615d22565b61013454611cda610ac8565b611ce590600a615dcd565b611cef9190615dcd565b61013554611cfd9085615dcd565b611d079190615ccb565b611d119190615ccb565b949350505050565b611d2861012d80546001019055565b6000611d3461012d5490565b600081815261013d602052604090819020805460ff19166001179055519091507f8b6c1d05c678fa59695e26465a85918ce0fc63a88f74af53d1daef8f0a9c780490611d9590839033909182526001600160a01b0316602082015260400190565b60405180910390a1611da73382614368565b50565b6000818152606760205260408120546001600160a01b031680610ac25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610a70565b600260c9541415611e885760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c95580336001600160a01b0382161480611eb0575061013b546001600160a01b031633145b611efc5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f74206765742070616964206966206e6f7420796f757273000000006044820152606401610a70565b6001600160a01b03821660009081526101366020526040902054611f885760405162461bcd60e51b815260206004820152602860248201527f4e6f206c69717569646174696f6e73206173736f63696174656420776974682060448201527f6163636f756e742e0000000000000000000000000000000000000000000000006064820152608401610a70565b6001600160a01b038083166000908152610136602052604081208054919055610138549091611fb991163383614750565b604080518281523360208201527f45f23935dce154b3c7ff256ac2402f7700f39ce5b210b7da385215939fc4c5c891015b60405180910390a15050600160c95550565b60006001600160a01b03821661207a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610a70565b506001600160a01b031660009081526068602052604090205490565b600080516020615f3a8339815191526120af8133613c56565b600082815261013d602052604090205460ff166121055760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b5061013c55565b600082815261013d6020526040902054829060ff166121645760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b3361216e82611daa565b6001600160a01b0316148061218e575061013b546001600160a01b031633145b6121da5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b600260c954141561222d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c955600083815261013e60205260409020548211156122b75760405162461bcd60e51b815260206004820152602560248201527f5661756c7420646f6573206e6f74206861766520656e6f75676820636f6c6c6160448201527f746572616c0000000000000000000000000000000000000000000000000000006064820152608401610a70565b600083815261013e60205260408120546122d2908490615dec565b600085815261013f60205260409020549091501561237757600084815261013f6020526040902054612305908290613d14565b6123775760405162461bcd60e51b815260206004820152603e60248201527f5769746864726177616c20776f756c6420707574207661756c742062656c6f7760448201527f206d696e696d756d20636f6c6c61746572616c2070657263656e7461676500006064820152608401610a70565b600084815261013e60205260409020819055610138546123a1906001600160a01b03163385614750565b60408051858152602081018590527f6c0ea3bea9dd66afa8f9d39d6eb93d833466190330813b42835efc650dca4cb99101611150565b600082815261013d6020526040902054829060ff1661242f5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b3361243982611daa565b6001600160a01b03161480612459575061013b546001600160a01b031633145b6124a55760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b600260c95414156124f85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c955610139546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561254157600080fd5b505afa158015612555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125799190615a43565b10156125c75760405162461bcd60e51b815260206004820152601560248201527f546f6b656e2062616c616e636520746f6f206c6f7700000000000000000000006044820152606401610a70565b600083815261013f602052604090205482111561264c5760405162461bcd60e51b815260206004820152602760248201527f5661756c742064656274206c657373207468616e20616d6f756e7420746f207060448201527f6179206261636b000000000000000000000000000000000000000000000000006064820152608401610a70565b610138546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561269257600080fd5b505afa1580156126a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ca9190615b4b565b6126d5906012615e03565b6126e090600a615d22565b6126e8610ac8565b6126f490612710615dcd565b61013254610130546127069087615dcd565b6127109190615dcd565b61271a9190615ccb565b6127249190615ccb565b905061273084846147e1565b61273a8482614967565b61274381614a4e565b61013954604051632770a7eb60e21b8152336004820152602481018590526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561279057600080fd5b505af11580156127a4573d6000803e3d6000fd5b505060408051878152602081018790529081018490527f31f96762af4051f367185773cc2f55bfb112a6c114b3407ded1f321a9eb199ac92506060019050611150565b600081815261013d6020526040902054819060ff1661283f5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b3361284982611daa565b6001600160a01b03161480612869575061013b546001600160a01b031633145b6128b55760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b600260c95414156129085760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c955600082815261013f60205260409020541561296a5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206173206f75747374616e64696e672064656274000000000000006044820152606401610a70565b600082815261013e6020526040902054612983836142c1565b600083815261013d60209081526040808320805460ff1916905561013e825280832083905561013f90915281205580156129cf57610138546129cf906001600160a01b03163383614750565b6040518381527f4fe08624ee65b341c38ab9693d216b909d4ddee1bc8d3fe0fea14026c361b46590602001611fea565b600080516020615f3a833981519152612a188133613c56565b6101318290556040518281527ff78536edc296a3a7e991e00caa8319c68a84cc56f22e8c9118463773d0844b9390602001610aab565b600080516020615f3a833981519152612a678133613c56565b6001600160a01b038216612abd5760405162461bcd60e51b815260206004820152601e60248201527f476174657761792063616e6e6f74206265207a65726f206164647265737300006044820152606401610a70565b813b612b315760405162461bcd60e51b815260206004820152602560248201527f4d757374206265206120636f6e747261637420746f206265207468652067617460448201527f657761792e0000000000000000000000000000000000000000000000000000006064820152608401610a70565b61013b80546001600160a01b0319166001600160a01b0384169081179091556040519081527f138dfef152fa4f095c1158aad1b384e3c43de632c031e8e37e149917e690075790602001610aab565b61013a546001600160a01b03161580612ba4575061013a546001600160a01b031633145b612c165760405162461bcd60e51b815260206004820152602160248201527f6275795269736b795661756c742064697361626c656420666f72207075626c6960448201527f63000000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b600260c9541415612c695760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a70565b600260c955600081815261013d602052604090205460ff16612cc45760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b600081815261013e602090815260408083205461013f9092528220548291612ceb91613f72565b9150915060008111612d3f5760405162461bcd60e51b815260206004820152601160248201527f5661756c7420686173206e6f20646562740000000000000000000000000000006044820152606401610a70565b60008161013860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d9157600080fd5b505afa158015612da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc99190615b4b565b612dd4906012615e03565b612ddf90600a615d22565b612de99085615dcd565b612df39190615ccb565b905061012e548110612e6d5760405162461bcd60e51b815260206004820152603060248201527f5661756c74206973206e6f742062656c6f77206d696e696d756d20636f6c6c6160448201527f746572616c2070657263656e74616765000000000000000000000000000000006064820152608401610a70565b6000612e7885611bb4565b90506000612e85866113af565b610139546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b158015612ece57600080fd5b505afa158015612ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f069190615a43565b1015612f7a5760405162461bcd60e51b815260206004820152603160248201527f546f6b656e2062616c616e636520746f6f206c6f7720746f20706179206f666660448201527f206f75747374616e64696e6720646562740000000000000000000000000000006064820152608401610a70565b61013954604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015612fc757600080fd5b505af1158015612fdb573d6000803e3d6000fd5b505050600087815261013f602052604081208054849350909190613000908490615dec565b9091555050610138546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561304b57600080fd5b505afa15801561305f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130839190615b4b565b61308e906012615e03565b61309990600a615d22565b6130a1610ac8565b6130ad90612710615dcd565b61013254610130546130bf9086615dcd565b6130c99190615dcd565b6130d39190615ccb565b6130dd9190615ccb565b90506130e98382615cb3565b600088815261013e602052604081208054909190613108908490615dec565b909155505061013c54600090815261013e602052604081208054839290613130908490615cb3565b9091555050336000908152610136602052604081208054859290613155908490615cb3565b90915550613164905082614ab8565b7f4d151d3a98b83151d51917640c221f8c8e3c054422ea1b48dcbbd57e3f4210d58761318f89611daa565b604080519283526001600160a01b0390911660208301523390820152606081018490526080810185905260a0810183905260c00160405180910390a15050600160c9555050505050565b606060668054610be390615e69565b600080516020615f3a8339815191526132018133613c56565b6001600160a01b03821661327d5760405162461bcd60e51b815260206004820152602560248201527f53746162696c69747920706f6f6c2063616e6e6f74206265207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610a70565b813b6132f15760405162461bcd60e51b815260206004820152602c60248201527f4d757374206265206120636f6e747261637420746f206265207468652073746160448201527f62696c69747920706f6f6c2e00000000000000000000000000000000000000006064820152608401610a70565b61013a80546001600160a01b0319166001600160a01b0384169081179091556040519081527feeec3ab95f3c876a3b73235ba92edc637a2edd294b997b5758fbf556f7953b9f90602001610aab565b6001600160a01b0382163314156133995760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a70565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600080516020615f3a83398151915261341e8133613c56565b6101415460ff16158215151461349c5760405162461bcd60e51b815260206004820152602960248201527f4d696e74696e672070617573656420616c72656164792073657420746f20746860448201527f69732076616c75652e00000000000000000000000000000000000000000000006064820152608401610a70565b50610141805460ff1916911515919091179055565b600080516020615f3a8339815191526134ca8133613c56565b8161012f5411156135435760405162461bcd60e51b815260206004820152603c60248201527f7365744365696c696e673a204d757374206265206f7665722074686520616d6f60448201527f756e74206f662063757272656e742064656274206365696c696e672e000000006064820152608401610a70565b61012f8290556040518281527f9e88375210357aa5dbeb756c2deee5a1a487e6dcd9fa8f444eda3bc7df41a37b90602001610aab565b600081815261013d602052604081205460ff166135cb5760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b6044820152606401610a70565b600082815261013e602090815260408083205461013f90925282205482916135f291613f72565b91509150600081116136465760405162461bcd60e51b815260206004820152601560248201527f43616e6e6f742068617665207a65726f206465627400000000000000000000006044820152606401610a70565b60008161013860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561369857600080fd5b505afa1580156136ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d09190615b4b565b6136db906012615e03565b6136e690600a615d22565b6136f09085615dcd565b6136fa9190615ccb565b905061012e5481101561371257506001949350505050565b506000949350505050565b6137273383614061565b6137995760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610a70565b6137a584848484614b24565b50505050565b600080516020615f3a8339815191526137c48133613c56565b6001600160a01b0382166138405760405162461bcd60e51b815260206004820152602360248201527f507269636520736f757263652063616e6e6f74206265207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610a70565b61013780546001600160a01b0319166001600160a01b0384169081179091556040519081527f96e1b2ba899db8310c90fe5b78eeb80bcaaf5de5f0c4549c82c621c2bc778b8090602001610aab565b6000818152606760205260409020546060906001600160a01b031661391c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610a70565b600061393360408051602081019091526000815290565b90506000815111613953576040518060200160405280600081525061144a565b8061395d84614bad565b60405160200161396e929190615bb4565b6040516020818303038152906040529392505050565b600082815260fb60205260409020600101546139a08133613c56565b611290838361423e565b600080516020615f3a8339815191526139c38133613c56565b6305f5e100610130546127106139d99190615cb3565b83610135546103e86139eb9190615dcd565b6139f59190615ccb565b6139ff9190615dcd565b10613a0957600080fd5b6101348290556040518281527f29c334aad4ec9c65aa6ad3e720e9ad21ce4d7d6dbbdb44a3f97f2762d49387ca90602001610aab565b600082815261013d6020526040902054829060ff16613a975760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610a70565b33613aa182611daa565b6001600160a01b03161480613ac1575061013b546001600160a01b031633145b613b0d5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610a70565b61013854613b26906001600160a01b0316333085614cc7565b600083815261013e6020526040812054613b41908490615cb3565b600085815261013e6020526040902054909150811015613b7157634e487b7160e01b600052600160045260246000fd5b600084815261013e602090815260409182902083905581518681529081018590527f52c4e7127ec34e8fc95f09ce2d06b4f00acca12ccbcdfb246ef67ee6aefe068d910160405180910390a150505050565b600080516020615f3a833981519152613bdc8133613c56565b6305f5e10061013054612710613bf29190615cb3565b61013454613c02856103e8615dcd565b613c0c9190615ccb565b613c169190615dcd565b10613c2057600080fd5b6101358290556040518281527fee1adee4317c98f3606485f5b5d290ec4f4b8e1baee4906df1a86cd549ac864290602001610aab565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661162e57613c94816001600160a01b03166014614d18565b613c9f836020614d18565b604051602001613cb0929190615be3565b60408051601f198184030181529082905262461bcd60e51b8252610a7091600401615ca0565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610ac25750610ac282614f23565b6000806000613d238585613f72565b909250905060008161013860009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015613d7a57600080fd5b505afa158015613d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613db29190615b4b565b613dbd906012615e03565b613dc890600a615d22565b613dd29085615dcd565b613ddc9190615ccb565b61012e5411159695505050505050565b60006101335482613dfd9190615cb3565b905061013354811015613e2057634e487b7160e01b600052600160045260246000fd5b61012f54811115613e995760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74206578636565642064656274206365696c696e6720666f72207460448201527f686973207661756c7400000000000000000000000000000000000000000000006064820152608401610a70565b600083815261013f6020526040812054613eb39084615cb3565b600085815261013f6020526040902054909150811015613ee357634e487b7160e01b600052600160045260246000fd5b613eec83614f61565b600093845261013f6020526040909320929092555050565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190613f3982611daa565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080613f7d610ac8565b613fc95760405162461bcd60e51b815260206004820152601560248201527f5072696365206d7573742062652061626f7665203000000000000000000000006044820152606401610a70565b610132546140195760405162461bcd60e51b815260206004820152601360248201527f506567206d7573742062652061626f76652030000000000000000000000000006044820152606401610a70565b6000614023610ac8565b61402d9086615dcd565b9050600061403b6101325490565b6140459086615dcd565b90506000614054836064615dcd565b9791965090945050505050565b6000818152606760205260408120546001600160a01b03166140da5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a70565b60006140e583611daa565b9050806001600160a01b0316846001600160a01b031614806141205750836001600160a01b031661411584610c66565b6001600160a01b0316145b80611d1157506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16611d11565b60405162461bcd60e51b815260206004820152601260248201527f7472616e736665723a2064697361626c656400000000000000000000000000006044820152606401610a70565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661162e57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556141fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff161561162e57600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006142cc82611daa565b90506142da81600084614ff4565b6142e5600083613f04565b6001600160a01b038116600090815260686020526040812080546001929061430e908490615dec565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166143be5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a70565b6000818152606760205260409020546001600160a01b0316156144235760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a70565b61442f60008383614ff4565b6001600160a01b0382166000908152606860205260408120805460019290614458908490615cb3565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff16806144cf575060005460ff16155b6145325760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a70565b600054610100900460ff16158015614554576000805461ffff19166101011790555b8015611da7576000805461ff001916905550565b600054610100900460ff1680614581575060005460ff16155b6145e45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a70565b600054610100900460ff16158015614606576000805461ffff19166101011790555b82516146199060659060208601906156db565b50815161462d9060669060208501906156db565b508015611290576000805461ff0019169055505050565b600054610100900460ff168061465d575060005460ff16155b6146c05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a70565b600054610100900460ff161580156146e2576000805461ffff19166101011790555b600160c9558015611da7576000805461ff001916905550565b61162e828261419c565b600082815260fb6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6040516001600160a01b0383166024820152604481018290526112909084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152614fff565b8061013354101561485a5760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f206578697374732e0000000000000000000000000000000000000000000000006064820152608401610a70565b600082815261013f60205260409020548111156148df5760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f20757365722068617300000000000000000000000000000000000000000000006064820152608401610a70565b600081610133546148f09190615dec565b90506101335481111561491357634e487b7160e01b600052600160045260246000fd5b600083815261013f602052604081205461492e908490615dec565b600085815261013f602052604090205490915081111561495e57634e487b7160e01b600052600160045260246000fd5b613eec83614ab8565b600082815261013e60205260409020548111156149ec5760405162461bcd60e51b815260206004820152603060248201527f43616e6e6f742072656d6f7665206d6f7265207468616e20746865206465706f60448201527f736974656420636f6c6c61746572616c000000000000000000000000000000006064820152608401610a70565b600082815261013e6020526040812054614a07908390615dec565b600084815261013e6020526040902054909150811115614a3757634e487b7160e01b600052600160045260246000fd5b600092835261013e60205260409092209190915550565b61013c54600090815261013e6020526040812054614a6d908390615cb3565b61013c54600090815261013e6020526040902054909150811015614aa157634e487b7160e01b600052600160045260246000fd5b61013c54600090815261013e602052604090205550565b61013354811115614b0b5760405162461bcd60e51b815260206004820152601860248201527f446562742063616e206e6f7420676f2062656c6f7720302e00000000000000006044820152606401610a70565b60008161013354614b1c9190615dec565b610133555050565b614b2f848484614154565b614b3b848484846150e4565b6137a55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a70565b606081614bd15750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614bfb5780614be581615ea4565b9150614bf49050600a83615ccb565b9150614bd5565b60008167ffffffffffffffff811115614c2457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614c4e576020820181803683370190505b5090505b8415611d1157614c63600183615dec565b9150614c70600a86615ebf565b614c7b906030615cb3565b60f81b818381518110614c9e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350614cc0600a86615ccb565b9450614c52565b6040516001600160a01b03808516602483015283166044820152606481018290526137a59085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401614795565b60606000614d27836002615dcd565b614d32906002615cb3565b67ffffffffffffffff811115614d5857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614d82576020820181803683370190505b509050600360fc1b81600081518110614dab57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110614e0457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000614e28846002615dcd565b614e33906001615cb3565b90505b6001811115614ed4577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110614e8257634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110614ea657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93614ecd81615e52565b9050614e36565b50831561144a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a70565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610ac25750610ac282615247565b60008161013354614f729190615cb3565b905061012f54811115614fed5760405162461bcd60e51b815260206004820152602260248201527f446562742063616e206e6f7420676f2061626f76652064656274206365696c6960448201527f6e670000000000000000000000000000000000000000000000000000000000006064820152608401610a70565b6101335550565b6112908383836152e2565b6000615054826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661539a9092919063ffffffff16565b805190915015611290578080602001905181019061507291906159b5565b6112905760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a70565b60006001600160a01b0384163b1561523c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290615128903390899088908890600401615c64565b602060405180830381600087803b15801561514257600080fd5b505af1925050508015615172575060408051601f3d908101601f1916820190925261516f91810190615a27565b60015b615222573d8080156151a0576040519150601f19603f3d011682016040523d82523d6000602084013e6151a5565b606091505b50805161521a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610a70565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d11565b506001949350505050565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806152aa57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610ac257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610ac2565b6001600160a01b03831661533d5761533881609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b615360565b816001600160a01b0316836001600160a01b0316146153605761536083826153a9565b6001600160a01b0382166153775761129081615446565b826001600160a01b0316826001600160a01b03161461129057611290828261551f565b6060611d118484600085615563565b600060016153b684611ffc565b6153c09190615dec565b600083815260986020526040902054909150808214615413576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b60995460009061545890600190615dec565b6000838152609a60205260408120546099805493945090928490811061548e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080609983815481106154bd57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152609a9091526040808220849055858252812055609980548061550357634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061552a83611ffc565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6060824710156155db5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a70565b843b6156295760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a70565b600080866001600160a01b031685876040516156459190615b98565b60006040518083038185875af1925050503d8060008114615682576040519150601f19603f3d011682016040523d82523d6000602084013e615687565b606091505b50915091506156978282866156a2565b979650505050505050565b606083156156b157508161144a565b8251156156c15782518084602001fd5b8160405162461bcd60e51b8152600401610a709190615ca0565b8280546156e790615e69565b90600052602060002090601f016020900481019282615709576000855561574f565b82601f1061572257805160ff191683800117855561574f565b8280016001018555821561574f579182015b8281111561574f578251825591602001919060010190615734565b5061575b92915061575f565b5090565b5b8082111561575b5760008155600101615760565b600067ffffffffffffffff8084111561578f5761578f615eff565b604051601f8501601f19908116603f011681019082821181831017156157b7576157b7615eff565b816040528093508581528686860111156157d057600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114610bcf57600080fd5b600082601f830112615811578081fd5b61144a83833560208501615774565b805169ffffffffffffffffffff81168114610bcf57600080fd5b60006020828403121561584b578081fd5b61144a826157ea565b60008060408385031215615866578081fd5b61586f836157ea565b915061587d602084016157ea565b90509250929050565b60008060006060848603121561589a578081fd5b6158a3846157ea565b92506158b1602085016157ea565b9150604084013590509250925092565b600080600080608085870312156158d6578081fd5b6158df856157ea565b93506158ed602086016157ea565b925060408501359150606085013567ffffffffffffffff81111561590f578182fd5b8501601f8101871361591f578182fd5b61592e87823560208401615774565b91505092959194509250565b6000806040838503121561594c578182fd5b615955836157ea565b9150602083013561596581615f15565b809150509250929050565b60008060408385031215615982578182fd5b61598b836157ea565b946020939093013593505050565b6000602082840312156159aa578081fd5b813561144a81615f15565b6000602082840312156159c6578081fd5b815161144a81615f15565b6000602082840312156159e2578081fd5b5035919050565b600080604083850312156159fb578182fd5b8235915061587d602084016157ea565b600060208284031215615a1c578081fd5b813561144a81615f23565b600060208284031215615a38578081fd5b815161144a81615f23565b600060208284031215615a54578081fd5b5051919050565b600080600080600060a08688031215615a72578283fd5b85359450615a82602087016157ea565b9350604086013567ffffffffffffffff80821115615a9e578485fd5b615aaa89838a01615801565b94506060880135915080821115615abf578283fd5b50615acc88828901615801565b925050615adb608087016157ea565b90509295509295909350565b60008060408385031215615af9578182fd5b50508035926020909101359150565b600080600080600060a08688031215615b1f578283fd5b615b2886615820565b9450602086015193506040860151925060608601519150615adb60808701615820565b600060208284031215615b5c578081fd5b815160ff8116811461144a578182fd5b60008151808452615b84816020860160208601615e26565b601f01601f19169290920160200192915050565b60008251615baa818460208701615e26565b9190910192915050565b60008351615bc6818460208801615e26565b835190830190615bda818360208801615e26565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615c1b816017850160208801615e26565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615c58816028840160208801615e26565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152615c966080830184615b6c565b9695505050505050565b60208152600061144a6020830184615b6c565b60008219821115615cc657615cc6615ed3565b500190565b600082615cda57615cda615ee9565b500490565b600181815b80851115615d1a578160001904821115615d0057615d00615ed3565b80851615615d0d57918102915b93841c9390800290615ce4565b509250929050565b600061144a60ff841683600082615d3b57506001610ac2565b81615d4857506000610ac2565b8160018114615d5e5760028114615d6857615d84565b6001915050610ac2565b60ff841115615d7957615d79615ed3565b50506001821b610ac2565b5060208310610133831016604e8410600b8410161715615da7575081810a610ac2565b615db18383615cdf565b8060001904821115615dc557615dc5615ed3565b029392505050565b6000816000190483118215151615615de757615de7615ed3565b500290565b600082821015615dfe57615dfe615ed3565b500390565b600060ff821660ff841680821015615e1d57615e1d615ed3565b90039392505050565b60005b83811015615e41578181015183820152602001615e29565b838111156137a55750506000910152565b600081615e6157615e61615ed3565b506000190190565b600181811c90821680615e7d57607f821691505b60208210811415615e9e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615eb857615eb8615ed3565b5060010190565b600082615ece57615ece615ee9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611da757600080fd5b6001600160e01b031981168114611da757600080fdfee1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9a26469706673582212207e5c561a838ef63f5b4e2922cbc756b7219caf25d043c2767a203e000fc3982164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "borrowToken(uint256,uint256)": {
        "details": "Lets a vault owner borrow stablecoin against collateral Requirements: - Vault type must exist - Vault must exist - Must borrow greater than 0 stablecoin - Must be below the debt ceiling when borrowing - Must maintain minimum collateral percentage Emits BorrowToken event"
      },
      "checkCost(uint256)": {
        "details": "checks cost of liquidating"
      },
      "checkExtract(uint256)": {
        "details": "checks how much token gets extract"
      },
      "checkLiquidation(uint256)": {
        "details": "checks if the vault can be liquidated"
      },
      "createVault()": {
        "details": "Create a vault for interacting with the platform Emits a CreateVault event"
      },
      "depositCollateral(uint256,uint256)": {
        "details": "ALlows vault owner to deposit ERC20 collateral Emits Deposit Collateral event"
      },
      "destroyVault(uint256)": {
        "details": "User can destroy a vault. Will return all collateral upon destroying. Emits a DestroyVault event Requirements: - User must have paid off all outstanding debt first"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getPaid(address)": {
        "details": "pays the user Returns the ERC20 token that was liquidated"
      },
      "getPricePeg()": {
        "details": "returns the peg "
      },
      "getPriceSource()": {
        "details": "returns the chainlink pricefeed price"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "liquidateVault(uint256)": {
        "details": "allows liquidator to buy out a risky vault Requirements: - Vault id must exist - Vault must be below minimum collateral percentage - User must have enough of the token to pay vault off Emits BuyRiskyVault event"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "payBackToken(uint256,uint256)": {
        "details": "Pay back the stablecoin to reduce debt Requirements: - User must have enough balance to repay `amount` - Cannot pay back more than the required debt. `amount` must be less than debt."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setClosingFee(uint256)": {
        "details": "Set the closing fee for this vault"
      },
      "setDebtCeiling(uint256)": {
        "details": "Set the debt ceiling for this vault"
      },
      "setDebtRatio(uint256)": {
        "details": "sets the debt ratio"
      },
      "setGainRatio(uint256)": {
        "details": "sets the gain ratio"
      },
      "setGateway(address)": {
        "details": "Set the WAVAX gateway for this vault if it needs one"
      },
      "setMinimumCollateralPercentage(uint256)": {
        "details": "sets the minimum collateral percentage"
      },
      "setMinimumDebt(uint256)": {
        "details": "sets the minimum debt"
      },
      "setMintingPaused(bool)": {
        "details": "Pauses the bank minting capabalities."
      },
      "setOpeningFee(uint256)": {
        "details": "Set the opening fee for this vault"
      },
      "setPriceSource(address)": {
        "details": "Set the price source for this vault"
      },
      "setStabilityPool(address)": {
        "details": "Set the stability pool (liquidator) for this vault"
      },
      "setTokenPeg(uint256)": {
        "details": "Set the token peg for this vault"
      },
      "setTreasury(uint256)": {
        "details": "Set the treasury vault for this vault (vault that gets all the fees)"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferVault(uint256,address)": {
        "details": "user can transfer vault to another address Emits TransferVault event"
      },
      "vaultExists(uint256)": {
        "details": "allows checking if vault exists or not"
      },
      "withdrawCollateral(uint256,uint256)": {
        "details": "allows vault owner to withdraw the collateral Requirements: - Withdraw amount is less than or equal to current collateral - Collateral withdrawal amount does not put debt below minimum collateral Emits WithdrawCollateral event"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "minimumCollateralPercentage()": {
        "notice": "Set all of these upon initalization"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 594,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 597,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3406,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4245,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1743,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1745,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1749,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1753,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1757,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1763,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2559,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2733,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2737,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2740,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2744,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3059,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 761,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 804,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 94,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)89_storage)"
      },
      {
        "astId": 379,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8626,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_userVaultIds",
        "offset": 0,
        "slot": "301",
        "type": "t_struct(Counter)3413_storage"
      },
      {
        "astId": 8629,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "minimumCollateralPercentage",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 8631,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "debtCeiling",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 8633,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "closingFee",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 8635,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "openingFee",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 8637,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "tokenPeg",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 8639,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "totalDebt",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 8641,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "debtRatio",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 8643,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "gainRatio",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 8647,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "tokenDebt",
        "offset": 0,
        "slot": "310",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8650,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "priceSource",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 8653,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "token",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IERC20Metadata)6252"
      },
      {
        "astId": 8656,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "stablecoin",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(IStablecoin)16929"
      },
      {
        "astId": 8658,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "314",
        "type": "t_address"
      },
      {
        "astId": 8660,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "gateway",
        "offset": 0,
        "slot": "315",
        "type": "t_address"
      },
      {
        "astId": 8662,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "treasury",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      },
      {
        "astId": 8666,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "vaultExistence",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 8670,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "vaultCollateral",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8674,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "vaultDebt",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8676,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "minimumDebt",
        "offset": 0,
        "slot": "320",
        "type": "t_uint256"
      },
      {
        "astId": 8678,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "mintingPaused",
        "offset": 0,
        "slot": "321",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)6252": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IStablecoin)16929": {
        "encoding": "inplace",
        "label": "contract IStablecoin",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)89_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)89_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3413_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3412,
            "contract": "apps/avai/src/contracts/Bank.sol:Bank",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)89_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 86,
            "contract": "apps/avai/src/contracts/Bank.sol:Bank",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 88,
            "contract": "apps/avai/src/contracts/Bank.sol:Bank",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
