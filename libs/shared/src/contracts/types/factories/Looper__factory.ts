/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Looper, LooperInterface } from "../Looper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IBank",
        name: "_bank",
        type: "address",
      },
      {
        internalType: "contract IYakStrategy",
        name: "_shareToken",
        type: "address",
      },
      {
        internalType: "contract IERC20Metadata",
        name: "_underlyingToken",
        type: "address",
      },
      {
        internalType: "contract IAxialSwap",
        name: "_swap",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "authorizeVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "avai",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "avaiIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bank",
    outputs: [
      {
        internalType: "contract IBank",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "loops",
        type: "uint8",
      },
      {
        internalType: "uint16",
        name: "maxBorrow",
        type: "uint16",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultID",
        type: "uint256",
      },
    ],
    name: "destroyVault",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shareToken",
    outputs: [
      {
        internalType: "contract IYakStrategy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swap",
    outputs: [
      {
        internalType: "contract IAxialSwap",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingToken",
    outputs: [
      {
        internalType: "contract IERC20Metadata",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "vaultID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526004805463ffffffff60a01b191662109a0160a91b1790553480156200002957600080fd5b50604051620018ab380380620018ab8339810160408190526200004c916200018f565b62000057336200013f565b6001600160a01b0384166200007c57634e487b7160e01b600052600160045260246000fd5b6001600160a01b038316620000a157634e487b7160e01b600052600160045260246000fd5b6001600160a01b038216620000c657634e487b7160e01b600052600160045260246000fd5b6001600160a01b038116620000eb57634e487b7160e01b600052600160045260246000fd5b600180546001600160a01b039586166001600160a01b03199182161790915560028054948616948216949094179093556003805492851692841692909217909155600480549190931691161790556200020f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060008060808587031215620001a5578384fd5b8451620001b281620001f6565b6020860151909450620001c581620001f6565b6040860151909350620001d881620001f6565b6060860151909250620001eb81620001f6565b939692955090935050565b6001600160a01b03811681146200020c57600080fd5b50565b61168c806200021f6000396000f3fe6080604052600436106100dd5760003560e01c8063715018a61161007f57806385e290a31161005957806385e290a31461022c5780638da5cb5b1461023f578063ca3545b11461025d578063f2fde38b1461027e57600080fd5b8063715018a6146101d757806376cdb03b146101ec5780638119c0651461020c57600080fd5b80632495a599116100bb5780632495a59914610144578063277ce7d91461017c578063441a3e70146101a45780636c9fa59e146101b757600080fd5b806308d25159146100e2578063117ed905146100f95780631b8ffb541461010c575b600080fd5b3480156100ee57600080fd5b506100f761029e565b005b6100f76101073660046114fa565b610413565b34801561011857600080fd5b5060045461012d90600160a01b900460ff1681565b60405160ff90911681526020015b60405180910390f35b34801561015057600080fd5b50600354610164906001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b34801561018857600080fd5b5061016473346a59146b9b4a77100d369a3d18e8007a9f46a681565b6100f76101b23660046114d9565b610b42565b3480156101c357600080fd5b50600254610164906001600160a01b031681565b3480156101e357600080fd5b506100f7610dcd565b3480156101f857600080fd5b50600154610164906001600160a01b031681565b34801561021857600080fd5b50600454610164906001600160a01b031681565b6100f761023a3660046114a9565b610e33565b34801561024b57600080fd5b506000546001600160a01b0316610164565b34801561026957600080fd5b5060045461012d90600160a81b900460ff1681565b34801561028a57600080fd5b506100f7610299366004611462565b610fa0565b6000546001600160a01b031633146102fd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60025460015460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b15801561034e57600080fd5b505af1158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190611489565b5060035460025460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104109190611489565b50565b6000546001600160a01b0316331461046d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f4565b60148260ff1611156104e75760405162461bcd60e51b815260206004820152602360248201527f4e6f20706f696e74206c6f6f70696e67206d6f7265207468616e20323020746960448201527f6d6573000000000000000000000000000000000000000000000000000000000060648201526084016102f4565b60045461ffff7601000000000000000000000000000000000000000000009091048116908216111561055b5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f7420626f72726f772061626f7665206d6178204c5456250000000060448201526064016102f4565b600354610573906001600160a01b031633308661107f565b600154604080517f048de38100000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163048de381916004808301926020929190829003018186803b1580156105d157600080fd5b505afa1580156105e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060991906114c1565b90506000600160009054906101000a90046001600160a01b03166001600160a01b0316639fc30f1c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561065b57600080fd5b505afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069391906114c1565b905060005b8460ff168160ff161015610b39576002546040517fb6b55f25000000000000000000000000000000000000000000000000000000008152600481018890526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b15801561070557600080fd5b505af1158015610719573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b91906114c1565b6001546040517fece13732000000000000000000000000000000000000000000000000000000008152600481018b9052602481018390529192506001600160a01b03169063ece1373290604401600060405180830381600087803b15801561080257600080fd5b505af1158015610816573d6000803e3d6000fd5b5050505060008361271061082a91906115d5565b61ffff871661083987856115d5565b61084391906115d5565b61084d91906115b5565b6001546040517f08ec5927000000000000000000000000000000000000000000000000000000008152600481018c9052602481018390529192506001600160a01b0316906308ec592790604401600060405180830381600087803b1580156108b457600080fd5b505af11580156108c8573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201526000925073346a59146b9b4a77100d369a3d18e8007a9f46a691506370a082319060240160206040518083038186803b15801561091957600080fd5b505afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095191906114c1565b600480546040517fa95b089f00000000000000000000000000000000000000000000000000000000815260ff600160a01b83048116938201849052600160a81b83041660248201819052604482018590529394506001600160a01b0390911692639169558692918590859063a95b089f9060640160206040518083038186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1591906114c1565b610a2042607861159d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815260ff958616600482015294909316602485015260448401919091526064830152608482015260a401600060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b50506003546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a08231915060240160206040518083038186803b158015610ae957600080fd5b505afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2191906114c1565b98505050508080610b3190611620565b915050610698565b50505050505050565b6000546001600160a01b03163314610b9c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f4565b6001546040517fd4a9b2c5000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b03169063d4a9b2c59060240160206040518083038186803b158015610bfa57600080fd5b505afa158015610c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3291906114c1565b905060008111610c845760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f742077697468647261772c206e6f20636f6c6c61746572616c000060448201526064016102f4565b6001546040517fd310f49b000000000000000000000000000000000000000000000000000000008152600481018590526000916001600160a01b03169063d310f49b9060240160206040518083038186803b158015610ce257600080fd5b505afa158015610cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1a91906114c1565b6001546040517f767a7b0500000000000000000000000000000000000000000000000000000000815260048101879052602481018690529192506001600160a01b03169063767a7b0590604401600060405180830381600087803b158015610d8157600080fd5b505af1158015610d95573d6000803e3d6000fd5b505060405133925085156108fc02915085906000818181858888f19350505050158015610dc6573d6000803e3d6000fd5b5050505050565b6000546001600160a01b03163314610e275760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f4565b610e316000611136565b565b6000546001600160a01b03163314610e8d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f4565b6001546040517f85e290a3000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03909116906385e290a390602401600060405180830381600087803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b50506003546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a082319060240160206040518083038186803b158015610f4a57600080fd5b505afa158015610f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8291906114c1565b600354909150610f9c906001600160a01b0316338361119e565b5050565b6000546001600160a01b03163314610ffa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f4565b6001600160a01b0381166110765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102f4565b61041081611136565b6040516001600160a01b03808516602483015283166044820152606481018290526111309085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526111ec565b50505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0383166024820152604481018290526111e79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016110cc565b505050565b6000611241826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112d19092919063ffffffff16565b8051909150156111e7578080602001905181019061125f9190611489565b6111e75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102f4565b60606112e084846000856112ea565b90505b9392505050565b6060824710156113625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102f4565b843b6113b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102f4565b600080866001600160a01b031685876040516113cc919061154e565b60006040518083038185875af1925050503d8060008114611409576040519150601f19603f3d011682016040523d82523d6000602084013e61140e565b606091505b509150915061141e828286611429565b979650505050505050565b606083156114385750816112e3565b8251156114485782518084602001fd5b8160405162461bcd60e51b81526004016102f4919061156a565b600060208284031215611473578081fd5b81356001600160a01b03811681146112e3578182fd5b60006020828403121561149a578081fd5b815180151581146112e3578182fd5b6000602082840312156114ba578081fd5b5035919050565b6000602082840312156114d2578081fd5b5051919050565b600080604083850312156114eb578081fd5b50508035926020909101359150565b6000806000806080858703121561150f578182fd5b8435935060208501359250604085013560ff8116811461152d578283fd5b9150606085013561ffff81168114611543578182fd5b939692955090935050565b600082516115608184602087016115f4565b9190910192915050565b60208152600082518060208401526115898160408501602087016115f4565b601f01601f19169190910160400192915050565b600082198211156115b0576115b0611640565b500190565b6000826115d057634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156115ef576115ef611640565b500290565b60005b8381101561160f5781810151838201526020016115f7565b838111156111305750506000910152565b600060ff821660ff81141561163757611637611640565b60010192915050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ba4cfc72deaeb60d4f44b82fd361ed287f3c50e899c777b3ededb6c24cd1f75964736f6c63430008040033";

export class Looper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _bank: string,
    _shareToken: string,
    _underlyingToken: string,
    _swap: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Looper> {
    return super.deploy(
      _bank,
      _shareToken,
      _underlyingToken,
      _swap,
      overrides || {}
    ) as Promise<Looper>;
  }
  getDeployTransaction(
    _bank: string,
    _shareToken: string,
    _underlyingToken: string,
    _swap: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _bank,
      _shareToken,
      _underlyingToken,
      _swap,
      overrides || {}
    );
  }
  attach(address: string): Looper {
    return super.attach(address) as Looper;
  }
  connect(signer: Signer): Looper__factory {
    return super.connect(signer) as Looper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LooperInterface {
    return new utils.Interface(_abi) as LooperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Looper {
    return new Contract(address, _abi, signerOrProvider) as Looper;
  }
}
