/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OracleLPBridge,
  OracleLPBridgeInterface,
} from "../OracleLPBridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceSource1_",
        type: "address",
      },
      {
        internalType: "address",
        name: "priceSource2_",
        type: "address",
      },
      {
        internalType: "address",
        name: "underlyingToken_",
        type: "address",
      },
      {
        internalType: "address",
        name: "shareToken_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceSource1",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceSource2",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "shareToken",
    outputs: [
      {
        internalType: "contract IYakStrategy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingToken",
    outputs: [
      {
        internalType: "contract IPair",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6101006040523480156200001257600080fd5b50604051620016bb380380620016bb833981016040819052620000359162000116565b6001600160a01b0384166200005a57634e487b7160e01b600052600160045260246000fd5b6001600160a01b0383166200007f57634e487b7160e01b600052600160045260246000fd5b6001600160a01b038116620000a457634e487b7160e01b600052600160045260246000fd5b6001600160a01b038216620000c957634e487b7160e01b600052600160045260246000fd5b6001600160601b0319606094851b811660805292841b831660a05290831b821660c05290911b1660e05262000172565b80516001600160a01b03811681146200011157600080fd5b919050565b600080600080608085870312156200012c578384fd5b6200013785620000f9565b93506200014760208601620000f9565b92506200015760408601620000f9565b91506200016760608601620000f9565b905092959194509250565b60805160601c60a05160601c60c05160601c60e05160601c61149b6200022060003960008181610148015261075001526000818160ad015281816106b30152818161077f015281816108b90152818161097101528181610a960152610be30152600081816101ce015281816105410152610c77015260008181610121015281816101fc015281816102940152818161032701528181610407015281816104a40152610d08015261149b6000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80636c9fa59e116100765780639a6fc8f51161005b5780639a6fc8f51461017f578063b487ab30146101c9578063feaf968c146101f057600080fd5b80636c9fa59e146101435780637284e4161461016a57600080fd5b80632495a599146100a8578063313ce567146100ec57806354fd4d501461010657806361d8f2301461011c575b600080fd5b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f46101f8565b60405160ff90911681526020016100e3565b61010e610290565b6040519081526020016100e3565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b610172610323565b6040516100e3919061119b565b61019261018d366004611107565b6103ba565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100e3565b6100cf7f000000000000000000000000000000000000000000000000000000000000000081565b610192610493565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561025357600080fd5b505afa158015610267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b919061117a565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102eb57600080fd5b505afa1580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028b91906110ef565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637284e4166040518163ffffffff1660e01b815260040160006040518083038186803b15801561037e57600080fd5b505afa158015610392573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261028b9190810190610ff8565b6040517f9a6fc8f500000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff8216600482015260009081908190819081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639a6fc8f59060240160a06040518083038186803b15801561044957600080fd5b505afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104819190611123565b939a9299509097509550909350915050565b6000806000806000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156104fb57600080fd5b505afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190611123565b9450945094509450945060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561059857600080fd5b505afa1580156105ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d09190611123565b505050915050600085121561063e5760405162461bcd60e51b815260206004820152602960248201527f436861696e6c696e6b2070726963656665656420312072657475726e6564206260448201526830b2103b30b63ab29760b91b60648201526084015b60405180910390fd5b60008112156106a15760405162461bcd60e51b815260206004820152602960248201527f436861696e6c696e6b2070726963656665656420322072657475726e6564206260448201526830b2103b30b63ab29760b91b6064820152608401610635565b60006106ad86836108b2565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610742919061117a565b61074d90600a611249565b827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eab89a5a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156107d657600080fd5b505afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e919061117a565b61081990600a611249565b6040518263ffffffff1660e01b815260040161083791815260200190565b60206040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088791906110ef565b61089191906113ac565b61089b91906111e6565b979d979c50949a5092985090965093945050505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094891906110a1565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a009190610fca565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3857600080fd5b505afa158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a70919061117a565b610a7b9060126113cb565b610a8690600a611249565b610a9090846113ac565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610aed57600080fd5b505afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b259190610fca565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5d57600080fd5b505afa158015610b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b95919061117a565b610ba09060126113cb565b610bab90600a611249565b610bb590846113ac565b90506000610bcb610bc683856113ac565b610e1c565b6fffffffffffffffffffffffffffffffff16905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c3a57600080fd5b505afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7291906110ef565b610dcb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610cce57600080fd5b505afa158015610ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d06919061117a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5f57600080fd5b505afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d97919061117a565b610da29060246113cb565b610dac91906113cb565b610db790600a611249565b610dc18b8d6112f4565b610bc691906113ac565b6fffffffffffffffffffffffffffffffff16610de88460026113ac565b610df291906113ac565b610dfc91906111e6565b9050610e0d6402540be400826111e6565b96505050505050505b92915050565b600081610e2b57506000919050565b8160017001000000000000000000000000000000008210610e515760809190911c9060401b5b680100000000000000008210610e6c5760409190911c9060201b5b6401000000008210610e835760209190911c9060101b5b620100008210610e985760109190911c9060081b5b6101008210610eac5760089190911c9060041b5b60108210610ebf5760049190911c9060021b5b60088210610ecb5760011b5b6001610ed782866111e6565b610ee190836111ce565b901c90506001610ef182866111e6565b610efb90836111ce565b901c90506001610f0b82866111e6565b610f1590836111ce565b901c90506001610f2582866111e6565b610f2f90836111ce565b901c90506001610f3f82866111e6565b610f4990836111ce565b901c90506001610f5982866111e6565b610f6390836111ce565b901c90506001610f7382866111e6565b610f7d90836111ce565b901c90506000610f8d82866111e6565b9050808210610f9c5780610f9e565b815b95945050505050565b80516dffffffffffffffffffffffffffff81168114610fc557600080fd5b919050565b600060208284031215610fdb578081fd5b81516001600160a01b0381168114610ff1578182fd5b9392505050565b600060208284031215611009578081fd5b815167ffffffffffffffff80821115611020578283fd5b818401915084601f830112611033578283fd5b81518181111561104557611045611434565b604051601f8201601f19908116603f0116810190838211818310171561106d5761106d611434565b81604052828152876020848701011115611085578586fd5b6110968360208301602088016113ee565b979650505050505050565b6000806000606084860312156110b5578182fd5b6110be84610fa7565b92506110cc60208501610fa7565b9150604084015163ffffffff811681146110e4578182fd5b809150509250925092565b600060208284031215611100578081fd5b5051919050565b600060208284031215611118578081fd5b8135610ff18161144a565b600080600080600060a0868803121561113a578081fd5b85516111458161144a565b80955050602086015193506040860151925060608601519150608086015161116c8161144a565b809150509295509295909350565b60006020828403121561118b578081fd5b815160ff81168114610ff1578182fd5b60208152600082518060208401526111ba8160408501602087016113ee565b601f01601f19169190910160400192915050565b600082198211156111e1576111e161141e565b500190565b60008261120157634e487b7160e01b81526012600452602481fd5b500490565b600181815b808511156112415781600019048211156112275761122761141e565b8085161561123457918102915b93841c939080029061120b565b509250929050565b6000610ff160ff84168360008261126257506001610e16565b8161126f57506000610e16565b8160018114611285576002811461128f576112ab565b6001915050610e16565b60ff8411156112a0576112a061141e565b50506001821b610e16565b5060208310610133831016604e8410600b84101617156112ce575081810a610e16565b6112d88383611206565b80600019048211156112ec576112ec61141e565b029392505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818413828413858304851182821616156113335761133361141e565b7f80000000000000000000000000000000000000000000000000000000000000008487128682058812818416161561136d5761136d61141e565b8587129250878205871284841616156113885761138861141e565b8785058712818416161561139e5761139e61141e565b505050929093029392505050565b60008160001904831182151516156113c6576113c661141e565b500290565b600060ff821660ff8416808210156113e5576113e561141e565b90039392505050565b60005b838110156114095781810151838201526020016113f1565b83811115611418576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b69ffffffffffffffffffff8116811461146257600080fd5b5056fea2646970667358221220ef48100a5573d7219f3c79612253114b6a8b4a54ba4f30c1386dcc3da7f8433064736f6c63430008040033";

export class OracleLPBridge__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    priceSource1_: string,
    priceSource2_: string,
    underlyingToken_: string,
    shareToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleLPBridge> {
    return super.deploy(
      priceSource1_,
      priceSource2_,
      underlyingToken_,
      shareToken_,
      overrides || {}
    ) as Promise<OracleLPBridge>;
  }
  getDeployTransaction(
    priceSource1_: string,
    priceSource2_: string,
    underlyingToken_: string,
    shareToken_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      priceSource1_,
      priceSource2_,
      underlyingToken_,
      shareToken_,
      overrides || {}
    );
  }
  attach(address: string): OracleLPBridge {
    return super.attach(address) as OracleLPBridge;
  }
  connect(signer: Signer): OracleLPBridge__factory {
    return super.connect(signer) as OracleLPBridge__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleLPBridgeInterface {
    return new utils.Interface(_abi) as OracleLPBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleLPBridge {
    return new Contract(address, _abi, signerOrProvider) as OracleLPBridge;
  }
}
