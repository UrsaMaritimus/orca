{
  "address": "0x843995775466e02ba785A5E76ed49E2327Bae041",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wavax",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "authorizeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "depositAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x26e2fec9b79e346a6a66ace59d0e30a966593fb1acf72e67fa7d30899a3772de",
  "receipt": {
    "to": null,
    "from": "0x9F8A5B35f5508071cf2304A670EAB0803F3737aa",
    "contractAddress": "0x843995775466e02ba785A5E76ed49E2327Bae041",
    "transactionIndex": 0,
    "gasUsed": "650605",
    "logsBloom": "0x00000000000000000000000000000000000000000000004000800000000000000000000000000000000000000000000000000000000000000000000000000000010000000400000000000000000000000001000000000000000000000000000000000000020000000000000000004800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x09d3be2986347d19d3e7f20d4c8944b684db738eca260c0f5d92f0f9f089c973",
    "transactionHash": "0x26e2fec9b79e346a6a66ace59d0e30a966593fb1acf72e67fa7d30899a3772de",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 861651,
        "transactionHash": "0x26e2fec9b79e346a6a66ace59d0e30a966593fb1acf72e67fa7d30899a3772de",
        "address": "0x843995775466e02ba785A5E76ed49E2327Bae041",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009f8a5b35f5508071cf2304a670eab0803f3737aa"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x09d3be2986347d19d3e7f20d4c8944b684db738eca260c0f5d92f0f9f089c973"
      }
    ],
    "blockNumber": 861651,
    "cumulativeGasUsed": "650605",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd00ae08403B9bbb9124bB305C09058E32C39A48c"
  ],
  "solcInputHash": "8310a37d4c4522c1815e57b2dab1b4e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wavax\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"authorizeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"depositAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorizeVault(address)\":{\"details\":\"Gives permission to the vault to spend gateway's WAVAX\"},\"depositAVAX(address,uint256)\":{\"details\":\"deposits WAVAX into the vault, using native AVAX.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAVAX(address,uint256,uint256)\":{\"details\":\"withdraws AVAX\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"apps/avai/src/contracts/WAVAXGateway.sol\":\"WAVAXGateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"apps/avai/src/contracts/WAVAXGateway.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './interfaces/IWAVAX.sol';\\nimport './interfaces/IBank.sol';\\n\\ncontract WAVAXGateway is Ownable {\\n  IWAVAX internal immutable WAVAX;\\n\\n  constructor(address wavax) {\\n    assert(wavax != address(0));\\n    WAVAX = IWAVAX(wavax);\\n  }\\n\\n  /**\\n   * @dev Only vault owner can do anything with this modifier\\n   */\\n  modifier onlyVaultOwner(uint256 vaultID, address vault) {\\n    require(IBank(vault).vaultExists(vaultID), 'Vault does not exist');\\n    require(\\n      IBank(vault).ownerOf(vaultID) == msg.sender,\\n      'Vault is not owned by you'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Gives permission to the vault to spend gateway's WAVAX\\n   */\\n  function authorizeVault(address vault) external onlyOwner {\\n    WAVAX.approve(vault, type(uint256).max);\\n  }\\n\\n  /**\\n   * @dev deposits WAVAX into the vault, using native AVAX.\\n   */\\n  function depositAVAX(address vault, uint256 vaultID)\\n    external\\n    payable\\n    onlyVaultOwner(vaultID, vault)\\n  {\\n    WAVAX.deposit{value: msg.value}();\\n    IBank(vault).depositCollateral(vaultID, msg.value);\\n  }\\n\\n  /**\\n   * @dev withdraws AVAX\\n   */\\n  function withdrawAVAX(\\n    address vault,\\n    uint256 vaultID,\\n    uint256 amount\\n  ) external payable onlyVaultOwner(vaultID, vault) {\\n    IBank(vault).withdrawCollateral(vaultID, amount);\\n    WAVAX.withdraw(amount);\\n    payable(msg.sender).transfer(amount);\\n  }\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x281ec9ab27d4bb1d4a70ab9fb633ef817adca1745a51fff1e5e91af19c7eb18c\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/interfaces/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ninterface IBank is IERC721 {\\n  function transferVault(uint256 vaultID, address to) external;\\n\\n  function vaultExists(uint256 vaultID) external view returns (bool);\\n\\n  function depositCollateral(uint256 vaultID, uint256 amount) external;\\n\\n  function withdrawCollateral(uint256 vaultID, uint256 amount) external;\\n\\n  function initialize(\\n    uint256 minimumCollateralPercentage_,\\n    address priceSource_,\\n    string memory name_,\\n    string memory symbol_,\\n    address token_,\\n    address owner\\n  ) external;\\n}\\n\",\"keccak256\":\"0x58281d073448db96a161ddcc335053f3e2f926d381e5d20b59eb81d8be25c805\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IWAVAX {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xaf85fe2dba864c210721b591f705102780268bab63905c88681e04bc5146f5a7\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610b77380380610b7783398101604081905261002f916100c1565b61003833610071565b6001600160a01b03811661005c57634e487b7160e01b600052600160045260246000fd5b60601b6001600160601b0319166080526100ef565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d2578081fd5b81516001600160a01b03811681146100e8578182fd5b9392505050565b60805160601c610a5c61011b600039600081816102230152818161043d015261076e0152610a5c6000f3fe6080604052600436106100695760003560e01c80639cd33824116100435780639cd33824146100d8578063e4aabe91146100eb578063f2fde38b146100fe57600080fd5b8063715018a6146100755780638da5cb5b1461008c57806397268a18146100b857600080fd5b3661007057005b600080fd5b34801561008157600080fd5b5061008a61011e565b005b34801561009857600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b3480156100c457600080fd5b5061008a6100d3366004610953565b610189565b61008a6100e6366004610992565b6102a3565b61008a6100f93660046109bd565b61052f565b34801561010a57600080fd5b5061008a610119366004610953565b610809565b6000546001600160a01b0316331461017d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61018760006108eb565b565b6000546001600160a01b031633146101e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610174565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561026757600080fd5b505af115801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906109f1565b5050565b604051631b9ad02560e31b815260048101829052819083906001600160a01b0382169063dcd681289060240160206040518083038186803b1580156102e757600080fd5b505afa1580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f91906109f1565b61036b5760405162461bcd60e51b815260206004820152601460248201527f5661756c7420646f6573206e6f742065786973740000000000000000000000006044820152606401610174565b6040516331a9108f60e11b81526004810183905233906001600160a01b03831690636352211e9060240160206040518083038186803b1580156103ad57600080fd5b505afa1580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e59190610976565b6001600160a01b03161461043b5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610174565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561049657600080fd5b505af11580156104aa573d6000803e3d6000fd5b50506040517fece13732000000000000000000000000000000000000000000000000000000008152600481018790523460248201526001600160a01b038816935063ece1373292506044019050600060405180830381600087803b15801561051157600080fd5b505af1158015610525573d6000803e3d6000fd5b5050505050505050565b604051631b9ad02560e31b815260048101839052829084906001600160a01b0382169063dcd681289060240160206040518083038186803b15801561057357600080fd5b505afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906109f1565b6105f75760405162461bcd60e51b815260206004820152601460248201527f5661756c7420646f6573206e6f742065786973740000000000000000000000006044820152606401610174565b6040516331a9108f60e11b81526004810183905233906001600160a01b03831690636352211e9060240160206040518083038186803b15801561063957600080fd5b505afa15801561064d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106719190610976565b6001600160a01b0316146106c75760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610174565b6040517f767a7b0500000000000000000000000000000000000000000000000000000000815260048101859052602481018490526001600160a01b0386169063767a7b0590604401600060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b50506040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169250632e1a7d4d9150602401600060405180830381600087803b1580156107bc57600080fd5b505af11580156107d0573d6000803e3d6000fd5b505060405133925085156108fc02915085906000818181858888f19350505050158015610801573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146108635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610174565b6001600160a01b0381166108df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610174565b6108e8816108eb565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610964578081fd5b813561096f81610a11565b9392505050565b600060208284031215610987578081fd5b815161096f81610a11565b600080604083850312156109a4578081fd5b82356109af81610a11565b946020939093013593505050565b6000806000606084860312156109d1578081fd5b83356109dc81610a11565b95602085013595506040909401359392505050565b600060208284031215610a02578081fd5b8151801515811461096f578182fd5b6001600160a01b03811681146108e857600080fdfea264697066735822122059de0f4fb6f88f6f9e32929ff6ef02d90e41eed3b71bbb9bff38a455dc86a54d64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100695760003560e01c80639cd33824116100435780639cd33824146100d8578063e4aabe91146100eb578063f2fde38b146100fe57600080fd5b8063715018a6146100755780638da5cb5b1461008c57806397268a18146100b857600080fd5b3661007057005b600080fd5b34801561008157600080fd5b5061008a61011e565b005b34801561009857600080fd5b50600054604080516001600160a01b039092168252519081900360200190f35b3480156100c457600080fd5b5061008a6100d3366004610953565b610189565b61008a6100e6366004610992565b6102a3565b61008a6100f93660046109bd565b61052f565b34801561010a57600080fd5b5061008a610119366004610953565b610809565b6000546001600160a01b0316331461017d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61018760006108eb565b565b6000546001600160a01b031633146101e35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610174565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b03828116600483015260001960248301527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561026757600080fd5b505af115801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906109f1565b5050565b604051631b9ad02560e31b815260048101829052819083906001600160a01b0382169063dcd681289060240160206040518083038186803b1580156102e757600080fd5b505afa1580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f91906109f1565b61036b5760405162461bcd60e51b815260206004820152601460248201527f5661756c7420646f6573206e6f742065786973740000000000000000000000006044820152606401610174565b6040516331a9108f60e11b81526004810183905233906001600160a01b03831690636352211e9060240160206040518083038186803b1580156103ad57600080fd5b505afa1580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e59190610976565b6001600160a01b03161461043b5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610174565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561049657600080fd5b505af11580156104aa573d6000803e3d6000fd5b50506040517fece13732000000000000000000000000000000000000000000000000000000008152600481018790523460248201526001600160a01b038816935063ece1373292506044019050600060405180830381600087803b15801561051157600080fd5b505af1158015610525573d6000803e3d6000fd5b5050505050505050565b604051631b9ad02560e31b815260048101839052829084906001600160a01b0382169063dcd681289060240160206040518083038186803b15801561057357600080fd5b505afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906109f1565b6105f75760405162461bcd60e51b815260206004820152601460248201527f5661756c7420646f6573206e6f742065786973740000000000000000000000006044820152606401610174565b6040516331a9108f60e11b81526004810183905233906001600160a01b03831690636352211e9060240160206040518083038186803b15801561063957600080fd5b505afa15801561064d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106719190610976565b6001600160a01b0316146106c75760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610174565b6040517f767a7b0500000000000000000000000000000000000000000000000000000000815260048101859052602481018490526001600160a01b0386169063767a7b0590604401600060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b50506040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169250632e1a7d4d9150602401600060405180830381600087803b1580156107bc57600080fd5b505af11580156107d0573d6000803e3d6000fd5b505060405133925085156108fc02915085906000818181858888f19350505050158015610801573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146108635760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610174565b6001600160a01b0381166108df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610174565b6108e8816108eb565b50565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610964578081fd5b813561096f81610a11565b9392505050565b600060208284031215610987578081fd5b815161096f81610a11565b600080604083850312156109a4578081fd5b82356109af81610a11565b946020939093013593505050565b6000806000606084860312156109d1578081fd5b83356109dc81610a11565b95602085013595506040909401359392505050565b600060208284031215610a02578081fd5b8151801515811461096f578182fd5b6001600160a01b03811681146108e857600080fdfea264697066735822122059de0f4fb6f88f6f9e32929ff6ef02d90e41eed3b71bbb9bff38a455dc86a54d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "authorizeVault(address)": {
        "details": "Gives permission to the vault to spend gateway's WAVAX"
      },
      "depositAVAX(address,uint256)": {
        "details": "deposits WAVAX into the vault, using native AVAX."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAVAX(address,uint256,uint256)": {
        "details": "withdraws AVAX"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "apps/avai/src/contracts/WAVAXGateway.sol:WAVAXGateway",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}