{
  "address": "0xB456afA3385E55a47EBB85E8244Ef5A0F1f364f0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceSource_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BorrowToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CreateVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "DestroyVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        }
      ],
      "name": "LiquidateVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closingFee",
          "type": "uint256"
        }
      ],
      "name": "PayBackToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCollateral",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "buyRiskyVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "changeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "destroyVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceSource",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumCollateralPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payBackToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceSource",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setClosingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debtCeiling_",
          "type": "uint256"
        }
      ],
      "name": "setDebtCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setOpeningFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceSource_",
          "type": "address"
        }
      ],
      "name": "setPriceSource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stabilityPool_",
          "type": "address"
        }
      ],
      "name": "setStabilityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenPeg_",
          "type": "uint256"
        }
      ],
      "name": "setTokenPeg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasury_",
          "type": "uint256"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6bf4b9b1f76bc48bf58a7de7642f1b1503e92469a85ff496d67d543e5aecc969",
  "receipt": {
    "to": null,
    "from": "0x9F8A5B35f5508071cf2304A670EAB0803F3737aa",
    "contractAddress": "0xB456afA3385E55a47EBB85E8244Ef5A0F1f364f0",
    "transactionIndex": 0,
    "gasUsed": "4116247",
    "logsBloom": "0x
    "blockHash": "0xac3a23db51e23d5a2788591f4f69794ce29a613e00d039bc7e73576efdd19f67",
    "transactionHash": "0x6bf4b9b1f76bc48bf58a7de7642f1b1503e92469a85ff496d67d543e5aecc969",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 598010,
        "transactionHash": "0x6bf4b9b1f76bc48bf58a7de7642f1b1503e92469a85ff496d67d543e5aecc969",
        "address": "0xB456afA3385E55a47EBB85E8244Ef5A0F1f364f0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000c471baae5d38844577003629773393145de4b29",
          "0x0000000000000000000000009f8a5b35f5508071cf2304a670eab0803f3737aa"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xac3a23db51e23d5a2788591f4f69794ce29a613e00d039bc7e73576efdd19f67"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 598010,
        "transactionHash": "0x6bf4b9b1f76bc48bf58a7de7642f1b1503e92469a85ff496d67d543e5aecc969",
        "address": "0xB456afA3385E55a47EBB85E8244Ef5A0F1f364f0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9",
          "0x0000000000000000000000009f8a5b35f5508071cf2304a670eab0803f3737aa",
          "0x0000000000000000000000009f8a5b35f5508071cf2304a670eab0803f3737aa"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xac3a23db51e23d5a2788591f4f69794ce29a613e00d039bc7e73576efdd19f67"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 598010,
        "transactionHash": "0x6bf4b9b1f76bc48bf58a7de7642f1b1503e92469a85ff496d67d543e5aecc969",
        "address": "0xB456afA3385E55a47EBB85E8244Ef5A0F1f364f0",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xe1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xac3a23db51e23d5a2788591f4f69794ce29a613e00d039bc7e73576efdd19f67"
      }
    ],
    "blockNumber": 598010,
    "cumulativeGasUsed": "4116247",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5498BB86BC934c8D34FDA08E81D444153d0D06aD",
    "avAVAX",
    "avAVAX",
    "0xd00ae08403B9bbb9124bB305C09058E32C39A48c",
    "0x0C471baae5D38844577003629773393145De4B29"
  ],
  "solcInputHash": "86d51be293c5c6106c4535eeee586cde",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceSource_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreateVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"DestroyVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"LiquidateVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"PayBackToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"buyRiskyVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"destroyVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceSource\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCollateralPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payBackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSource\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setClosingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtCeiling_\",\"type\":\"uint256\"}],\"name\":\"setDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setOpeningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceSource_\",\"type\":\"address\"}],\"name\":\"setPriceSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilityPool_\",\"type\":\"address\"}],\"name\":\"setStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPeg_\",\"type\":\"uint256\"}],\"name\":\"setTokenPeg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasury_\",\"type\":\"uint256\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"borrowToken(uint256,uint256)\":{\"details\":\"Lets a vault owner borrow stablecoin against collateral Requirements: - Vault type must exist - Vault must exist - Must borrow greater than 0 stablecoin - Must be below the debt ceiling when borrowing - Must maintain minimum collateral percentage Emits BorrowToken event\"},\"buyRiskyVault(uint256)\":{\"details\":\"allows liquidator to buy out a risky vault Requirements: - Vault id must exist - Vault must be below minimum collateral percentage - User must have enough of the token to pay vault off Emits BuyRiskyVault event\"},\"changeTreasury(address)\":{\"details\":\"changes the Treasury. Can only every be one treasury!\"},\"createVault()\":{\"details\":\"Create a vault for interacting with the platform Emits a CreateVault event\"},\"depositCollateral(uint256)\":{\"details\":\"ALlows vault owner to deposit ERC20 collateral Emits Deposit Collateral event\"},\"destroyVault(uint256)\":{\"details\":\"User can destroy a vault. Will return all collateral upon destroying. Emits a DestroyVault event Requirements: - User must have paid off all outstanding debt first\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getPricePeg()\":{\"details\":\"returns the base token's address\"},\"getPriceSource()\":{\"details\":\"returns the base token's address\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"payBackToken(uint256,uint256)\":{\"details\":\"Pay back the stablecoin to reduce debt Requirements: - User must have enough balance to repay `amount` - Cannot pay back more than the required debt. `amount` must be less than debt.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setClosingFee(uint256)\":{\"details\":\"Set the closing fee for this vault\"},\"setDebtCeiling(uint256)\":{\"details\":\"Set the debt ceiling for this vault\"},\"setOpeningFee(uint256)\":{\"details\":\"Set the opening fee for this vault\"},\"setPriceSource(address)\":{\"details\":\"Set the price source for this vault\"},\"setStabilityPool(address)\":{\"details\":\"Set the stability pool (liquidator) for this vault\"},\"setTokenPeg(uint256)\":{\"details\":\"Set the price source for this vault\"},\"setTreasury(uint256)\":{\"details\":\"Set the treasury vault for this vault\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferVault(uint256,address)\":{\"details\":\"user can transfer vault to another address Emits TransferVault event\"},\"withdrawCollateral(uint256,uint256)\":{\"details\":\"allows vault owner to withdraw the collateral Requirements: - Withdraw amount is less than or equal to current collateral - Collateral withdrawal amount does not put debt below minimum collateral Emits WithdrawCollateral event\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"minimumCollateralPercentage()\":{\"notice\":\"Set all of these upon initalization\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"apps/avai/src/contracts/Vaults/AvaxVault.sol\":\"AVAXVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"apps/avai/src/contracts/BaseVault.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './interfaces/IStablecoin.sol';\\nimport './interfaces/IBaseVault.sol';\\n\\ncontract BaseVault is\\n  ERC721,\\n  ERC721Enumerable,\\n  ReentrancyGuard,\\n  IBaseVault,\\n  AccessControl\\n{\\n  bytes32 public constant TREASURY_ROLE = keccak256('TREASURY_ROLE');\\n\\n  using Counters for Counters.Counter;\\n  Counters.Counter private _userVaultIds;\\n  /**\\n   * Set all of these upon initalization\\n   */\\n  uint256 public minimumCollateralPercentage;\\n  uint256 public debtCeiling;\\n  uint256 public closingFee;\\n  uint256 public openingFee;\\n  uint256 public tokenPeg;\\n  uint256 public totalDebt;\\n\\n  // Chainlink price source\\n  AggregatorV3Interface public priceSource;\\n\\n  // Token used as collateral\\n  IERC20 public immutable token;\\n  // Token used as debt\\n  IStablecoin internal immutable stablecoin;\\n\\n  // Address that corresponds to liquidater\\n  address public stabilityPool;\\n  // Vault that corresponds to the treasury\\n  uint256 public treasury;\\n\\n  // Vault information\\n  mapping(uint256 => bool) public vaultExistence;\\n  mapping(uint256 => uint256) public vaultCollateral;\\n  mapping(uint256 => uint256) public vaultDebt;\\n\\n  // Lets begin!\\n  constructor(\\n    uint256 minimumCollateralPercentage_,\\n    address priceSource_,\\n    string memory name_,\\n    string memory symbol_,\\n    address token_,\\n    address stablecoin_\\n  ) ERC721(name_, symbol_) {\\n    assert(priceSource_ != address(0));\\n    assert(minimumCollateralPercentage_ != 0);\\n    //Initial settings!\\n    debtCeiling = 10e18; // 10 dollas\\n    closingFee = 50; // 0.5%\\n    openingFee = 0; // 0.0%\\n    tokenPeg = 1e8; // $1\\n    // Initially, will deploy later\\n    stabilityPool = address(0);\\n\\n    priceSource = AggregatorV3Interface(priceSource_);\\n\\n    token = IERC20(token_);\\n    stablecoin = IStablecoin(stablecoin_);\\n\\n    minimumCollateralPercentage = minimumCollateralPercentage_;\\n  }\\n\\n  /**\\n   * @dev Only vault owner can do anything with this modifier\\n   */\\n  modifier onlyVaultOwner(uint256 vaultID) {\\n    require(vaultExistence[vaultID], 'Vault does not exist');\\n    require(ownerOf(vaultID) == msg.sender, 'Vault is not owned by you');\\n    _;\\n  }\\n  /**\\n   * @dev Only liquidater can do anything with this modifier\\n   */\\n  modifier onlyLiquidater() {\\n    require(\\n      stabilityPool == address(0) || msg.sender == stabilityPool,\\n      'buyRiskyVault disabled for public'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Set the debt ceiling for this vault\\n   */\\n  function setDebtCeiling(uint256 debtCeiling_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(\\n      debtCeiling <= debtCeiling_,\\n      'setCeiling: Must be over the amount of current debt ceiling.'\\n    );\\n    debtCeiling = debtCeiling_;\\n  }\\n\\n  /**\\n   * @dev Set the price source for this vault\\n   */\\n  function setPriceSource(address priceSource_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(priceSource_ != address(0), 'Price source cannot be zero address');\\n    priceSource = AggregatorV3Interface(priceSource_);\\n  }\\n\\n  /**\\n   * @dev Set the price source for this vault\\n   */\\n  function setTokenPeg(uint256 tokenPeg_) external onlyRole(TREASURY_ROLE) {\\n    require(tokenPeg_ > 0, 'Peg cannot be zero');\\n    tokenPeg = tokenPeg_;\\n  }\\n\\n  /**\\n   * @dev Set the stability pool (liquidator) for this vault\\n   */\\n  function setStabilityPool(address stabilityPool_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(\\n      stabilityPool_ != address(0),\\n      'Stability pool cannot be zero address'\\n    );\\n    stabilityPool = stabilityPool_;\\n  }\\n\\n  /**\\n   * @dev Set the closing fee for this vault\\n   */\\n  function setClosingFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\\n    closingFee = amount;\\n  }\\n\\n  /**\\n   * @dev Set the opening fee for this vault\\n   */\\n  function setOpeningFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\\n    openingFee = amount;\\n  }\\n\\n  /**\\n   * @dev Set the treasury vault for this vault\\n   */\\n  function setTreasury(uint256 treasury_) external onlyRole(TREASURY_ROLE) {\\n    require(vaultExistence[treasury_], 'Vault does not exist');\\n    treasury = treasury_;\\n  }\\n\\n  /**\\n    @dev returns the base token's address\\n  */\\n  function getPriceSource() public view returns (uint256) {\\n    // And get the latest round data\\n    (, int256 price, , , ) = priceSource.latestRoundData();\\n    return uint256(price);\\n  }\\n\\n  /**\\n    @dev returns the base token's address\\n  */\\n  function getPricePeg() public view returns (uint256) {\\n    return tokenPeg;\\n  }\\n\\n  /**\\n   * @dev returns the current debt and collateral\\n   *\\n   * Requirements:\\n   *\\n   * - Token price cannot be zero\\n   * - PEG (i.e. usdc) price cannot be zero\\n   */\\n  function calculateCollateralProperties(uint256 collateral, uint256 debt)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    assert(getPriceSource() != 0);\\n    assert(getPricePeg() != 0);\\n\\n    // Value of collateral on avalanche network\\n    uint256 collateralValue = collateral * getPriceSource();\\n    assert(collateralValue >= collateral);\\n\\n    // Get the current debt in our token (i.e. usdc)\\n    uint256 debtValue = debt * getPricePeg();\\n    assert(debtValue >= debt);\\n\\n    // Multiple collateral by 100\\n    uint256 collateralValueTimes100 = collateralValue * 100;\\n    assert(collateralValueTimes100 > collateralValue);\\n\\n    return (collateralValueTimes100, debtValue);\\n  }\\n\\n  /**\\n   * @dev Checks if the current collateral is valid\\n   */\\n  function isValidCollateral(uint256 collateral, uint256 debt)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    (\\n      uint256 collateralValueTimes100,\\n      uint256 debtValue\\n    ) = calculateCollateralProperties(collateral, debt);\\n\\n    // Get current ratio of debt\\n    uint256 collateralPercentage = collateralValueTimes100 / debtValue;\\n\\n    // and check if it's above 150%\\n    return collateralPercentage >= minimumCollateralPercentage;\\n  }\\n\\n  /**\\n   * @dev Create a vault for interacting with the platform\\n   *\\n   * Emits a CreateVault event\\n   */\\n  function createVault() external override {\\n    // Increment ID\\n    _userVaultIds.increment();\\n    // Assign ID to vault\\n    uint256 newVaultId = _userVaultIds.current();\\n\\n    vaultExistence[newVaultId] = true;\\n\\n    emit CreateVault(newVaultId, msg.sender);\\n    // mint erc721 vault (vaultId)\\n    _mint(msg.sender, newVaultId);\\n  }\\n\\n  /**\\n   * @dev User can destroy a vault. Will return all collateral upon destroying.\\n   *\\n   * Emits a DestroyVault event\\n   *\\n   * Requirements:\\n   *\\n   * - User must have paid off all outstanding debt first\\n   */\\n  function destroyVault(uint256 vaultID)\\n    external\\n    virtual\\n    override\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(vaultDebt[vaultID] == 0, 'Vault as outstanding debt');\\n\\n    if (vaultCollateral[vaultID] != 0) {\\n      require(\\n        token.transferFrom(address(this), msg.sender, vaultCollateral[vaultID]),\\n        'Unable to return collateral'\\n      );\\n    }\\n\\n    _burn(vaultID);\\n\\n    delete vaultExistence[vaultID];\\n    delete vaultCollateral[vaultID];\\n    delete vaultDebt[vaultID];\\n\\n    emit DestroyVault(vaultID);\\n  }\\n\\n  /**\\n   * @dev user can transfer vault to another address\\n   *\\n   * Emits TransferVault event\\n   */\\n  function transferVault(uint256 vaultID, address to)\\n    external\\n    override\\n    onlyVaultOwner(vaultID)\\n  {\\n    // burn erc721 (vaultId)\\n    _burn(vaultID);\\n    // mint erc721 (vaultId)\\n    _mint(to, vaultID);\\n\\n    emit TransferVault(vaultID, msg.sender, to);\\n  }\\n\\n  // Each vault must write it's own deposit collateral!\\n\\n  /**\\n   * @dev Lets a vault owner borrow stablecoin against collateral\\n   *\\n   * Requirements:\\n   * - Vault type must exist\\n   * - Vault must exist\\n   * - Must borrow greater than 0 stablecoin\\n   * - Must be below the debt ceiling when borrowing\\n   * - Must maintain minimum collateral percentage\\n   *\\n   * Emits BorrowToken event\\n   */\\n  function borrowToken(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(amount > 0, 'Must borrow non-zero amount');\\n    require(\\n      totalDebt + amount <= debtCeiling,\\n      'Cannot mint over debt ceiling.'\\n    );\\n\\n    uint256 newDebt = vaultDebt[vaultID] + amount;\\n    assert(newDebt > vaultDebt[vaultID]);\\n\\n    require(\\n      isValidCollateral(vaultCollateral[vaultID], newDebt),\\n      'Borrow would put vault below minimum collateral percentage'\\n    );\\n\\n    // Mint stable coin for the user\\n    _addVaultDebt(vaultID, amount);\\n    // Should have minter role\\n    stablecoin.mint(msg.sender, amount);\\n    emit BorrowToken(vaultID, amount);\\n  }\\n\\n  /**\\n   * @dev Pay back the stablecoin to reduce debt\\n   *\\n   * Requirements:\\n   * - User must have enough balance to repay `amount`\\n   * - Cannot pay back more than the required debt. `amount` must be less than debt.\\n   */\\n  function payBackToken(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(\\n      stablecoin.balanceOf(msg.sender) >= amount,\\n      'Token balance too low'\\n    );\\n    require(\\n      vaultDebt[vaultID] >= amount,\\n      'Vault debt less than amount to pay back'\\n    );\\n\\n    // Closing fee calculation\\n    uint256 _closingFee = ((amount * closingFee) * getPricePeg()) /\\n      (getPriceSource() * 10000);\\n\\n    _subVaultDebt(vaultID, amount);\\n    _subVaultCollateral(vaultID, _closingFee);\\n    _addVaultCollateralTreasury(_closingFee);\\n\\n    // Burns the stablecoin\\n    stablecoin.burn(msg.sender, amount);\\n\\n    emit PayBackToken(vaultID, amount, _closingFee);\\n  }\\n\\n  /**\\n   * @dev allows vault owner to withdraw the collateral\\n   *\\n   * Requirements:\\n   * - Withdraw amount is less than or equal to current collateral\\n   * - Collateral withdrawal amount does not put debt below minimum collateral\\n   *\\n   * Emits WithdrawCollateral event\\n   */\\n  function withdrawCollateral(uint256 vaultID, uint256 amount)\\n    external\\n    virtual\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(\\n      vaultCollateral[vaultID] >= amount,\\n      'Vault does not have enough collateral'\\n    );\\n\\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\\n\\n    if (vaultDebt[vaultID] != 0) {\\n      require(\\n        isValidCollateral(newCollateral, vaultDebt[vaultID]),\\n        'Withdrawal would put vault below minimum collateral percentage'\\n      );\\n    }\\n\\n    vaultCollateral[vaultID] = newCollateral;\\n    require(\\n      token.transferFrom(address(this), msg.sender, amount),\\n      'Unable to return collateral'\\n    );\\n\\n    emit WithdrawCollateral(vaultID, amount);\\n  }\\n\\n  /**\\n   * @dev allows liquidator to buy out a risky vault\\n   *\\n   * Requirements:\\n   * - Vault id must exist\\n   * - Vault must be below minimum collateral percentage\\n   * - User must have enough of the token to pay vault off\\n   *\\n   * Emits BuyRiskyVault event\\n   */\\n  function buyRiskyVault(uint256 vaultID) external onlyLiquidater nonReentrant {\\n    require(vaultExistence[vaultID], 'Vault does not exist');\\n    (\\n      uint256 collateralValueTimes100,\\n      uint256 debtValue\\n    ) = calculateCollateralProperties(\\n        vaultCollateral[vaultID],\\n        vaultDebt[vaultID]\\n      );\\n\\n    uint256 collateralPercentage = collateralValueTimes100 / debtValue;\\n\\n    require(\\n      collateralPercentage < minimumCollateralPercentage,\\n      'Vault is not below minimum collateral percentage'\\n    );\\n\\n    uint256 maximumDebtValue = collateralValueTimes100 /\\n      minimumCollateralPercentage;\\n\\n    uint256 maximumDebt = maximumDebtValue / getPricePeg();\\n\\n    uint256 debtDifference = vaultDebt[vaultID] - maximumDebt;\\n\\n    require(\\n      stablecoin.balanceOf(msg.sender) >= debtDifference,\\n      'Token balance too low to pay off outstanding debt'\\n    );\\n\\n    address previousOwner = ownerOf(vaultID);\\n\\n    vaultDebt[vaultID] = maximumDebt;\\n\\n    uint256 _closingFee = (debtDifference * closingFee * getPricePeg()) /\\n      (getPriceSource() * 10000);\\n\\n    vaultCollateral[vaultID] -= _closingFee;\\n    vaultCollateral[treasury] += _closingFee;\\n\\n    stablecoin.burn(msg.sender, debtDifference);\\n\\n    _subFromTotalDebt(debtDifference);\\n    // burn erc721 (vaultId)\\n    _burn(vaultID);\\n    // mint erc721 (vaultId)\\n    _mint(msg.sender, vaultID);\\n\\n    emit LiquidateVault(vaultID, previousOwner, msg.sender, debtDifference);\\n  }\\n\\n  /**\\n   * @dev Adds to the vault collateral\\n   *\\n   */\\n  function _addVaultCollateralTreasury(uint256 amount) internal {\\n    uint256 newCollateral = vaultCollateral[treasury] + amount;\\n    assert(newCollateral >= vaultCollateral[treasury]);\\n\\n    // Adjust and save it\\n    vaultCollateral[treasury] = newCollateral;\\n  }\\n\\n  /**\\n   * @dev subtracts from the vault collateral\\n   *\\n   * Requirements:\\n   * - Must be less than or equal to current collateral\\n   */\\n\\n  function _subVaultCollateral(uint256 vaultID, uint256 amount) internal {\\n    require(\\n      amount <= vaultCollateral[vaultID],\\n      'Cannot remove more than the deposited collateral'\\n    );\\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\\n\\n    assert(newCollateral <= vaultCollateral[vaultID]);\\n\\n    // Adjust and save it\\n    vaultCollateral[vaultID] = newCollateral;\\n  }\\n\\n  /**\\n   * @dev Adds debt to the vault\\n   *\\n   * Requirements:\\n   * - new user debt cannot be above debt ceiling\\n   */\\n  function _addVaultDebt(uint256 vaultID, uint256 amount) internal {\\n    uint256 newTotalDebt = amount + totalDebt;\\n\\n    assert(newTotalDebt >= totalDebt);\\n    require(\\n      newTotalDebt <= debtCeiling,\\n      'Cannot exceed debt ceiling for this vault'\\n    );\\n\\n    uint256 userNewDebt = amount + vaultDebt[vaultID];\\n    assert(userNewDebt >= vaultDebt[vaultID]);\\n\\n    _addToTotalDebt(amount);\\n\\n    vaultDebt[vaultID] = userNewDebt;\\n  }\\n\\n  /**\\n   * @dev Subs debt to the vault\\n   *\\n   * Requirements:\\n   * - user cannot remove more than total debt\\n   * - user cannot remove more than their total debt\\n   */\\n  function _subVaultDebt(uint256 vaultID, uint256 amount) internal {\\n    require(totalDebt >= amount, 'Cannot get rid of more debt than exists.');\\n\\n    require(\\n      vaultDebt[vaultID] >= amount,\\n      'Cannot get rid of more debt than user has'\\n    );\\n\\n    uint256 newTotalDebt = totalDebt - amount;\\n    assert(newTotalDebt <= totalDebt);\\n\\n    uint256 userNewDebt = vaultDebt[vaultID] - amount;\\n    assert(userNewDebt <= vaultDebt[vaultID]);\\n\\n    _subFromTotalDebt(amount);\\n    vaultDebt[vaultID] = userNewDebt;\\n  }\\n\\n  /**\\n   * @dev Adds debt to the vault\\n   *\\n   * Requirements:\\n   * - new user debt cannot be above debt ceiling\\n   */\\n  function _addToTotalDebt(uint256 amount) internal {\\n    uint256 newDebt = totalDebt + amount;\\n    require(newDebt <= debtCeiling, 'Debt can not go above debt ceiling');\\n\\n    totalDebt = newDebt;\\n  }\\n\\n  /**\\n   * @dev Subtract from the total debt of this vault type\\n   */\\n  function _subFromTotalDebt(uint256 amount) internal {\\n    require(amount <= totalDebt, 'Debt can not go below 0.');\\n    uint256 newDebt = totalDebt - amount;\\n\\n    totalDebt = newDebt;\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal pure override {\\n    revert('transfer: disabled');\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721, ERC721Enumerable, AccessControl)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override(ERC721, ERC721Enumerable) {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0xe1ac00fd41b78c2e056a46ec26d2b91fd556747f220160b91749ca130010bf5e\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/Vaults/AvaxVault.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport '../BaseVault.sol';\\n\\ncontract AVAXVault is BaseVault {\\n  // Lets construct this beast\\n  constructor(\\n    address priceSource_,\\n    string memory name_,\\n    string memory symbol_,\\n    address token,\\n    address stablecoin\\n  ) BaseVault(150, priceSource_, name_, symbol_, token, stablecoin) {\\n    // Initially set up admin as stablecoin and sender as the treasury\\n    // Treasury can change attributes but contract owned by stablecoin\\n    _setupRole(DEFAULT_ADMIN_ROLE, stablecoin);\\n    _setupRole(TREASURY_ROLE, msg.sender);\\n    _setRoleAdmin(TREASURY_ROLE, TREASURY_ROLE);\\n  }\\n\\n  /**\\n   * @dev changes the Treasury. Can only every be one treasury!\\n   */\\n  function changeTreasury(address to) external onlyRole(TREASURY_ROLE) {\\n    _setupRole(TREASURY_ROLE, to);\\n    revokeRole(TREASURY_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @dev ALlows vault owner to deposit ERC20 collateral\\n   *\\n   * Emits Deposit Collateral event\\n   *\\n   */\\n  function depositCollateral(uint256 vaultID)\\n    external\\n    payable\\n    onlyVaultOwner(vaultID)\\n  {\\n    uint256 newCollateral = vaultCollateral[vaultID] + msg.value;\\n\\n    assert(newCollateral >= vaultCollateral[vaultID]);\\n\\n    vaultCollateral[vaultID] = newCollateral;\\n\\n    emit DepositCollateral(vaultID, msg.value);\\n  }\\n\\n  /**\\n   * @dev allows vault owner to withdraw the collateral\\n   *\\n   * Requirements:\\n   * - Withdraw amount is less than or equal to current collateral\\n   * - Collateral withdrawal amount does not put debt below minimum collateral\\n   *\\n   * Emits WithdrawCollateral event\\n   */\\n  function withdrawCollateral(uint256 vaultID, uint256 amount)\\n    external\\n    override\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(\\n      vaultCollateral[vaultID] >= amount,\\n      'Vault does not have enough collateral'\\n    );\\n\\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\\n\\n    if (vaultDebt[vaultID] != 0) {\\n      require(\\n        isValidCollateral(newCollateral, vaultDebt[vaultID]),\\n        'Withdrawal would put vault below minimum collateral percentage'\\n      );\\n    }\\n\\n    vaultCollateral[vaultID] = newCollateral;\\n    payable(msg.sender).transfer(amount);\\n\\n    emit WithdrawCollateral(vaultID, amount);\\n  }\\n\\n  /**\\n   * @dev User can destroy a vault. Will return all collateral upon destroying.\\n   *\\n   * Emits a DestroyVault event\\n   *\\n   * Requirements:\\n   *\\n   * - User must have paid off all outstanding debt first\\n   */\\n  function destroyVault(uint256 vaultID)\\n    external\\n    override\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(vaultDebt[vaultID] == 0, 'Vault as outstanding debt');\\n\\n    if (vaultCollateral[vaultID] != 0) {\\n      payable(msg.sender).transfer(vaultCollateral[vaultID]);\\n    }\\n\\n    _burn(vaultID);\\n\\n    delete vaultExistence[vaultID];\\n    delete vaultCollateral[vaultID];\\n    delete vaultDebt[vaultID];\\n\\n    emit DestroyVault(vaultID);\\n  }\\n}\\n\",\"keccak256\":\"0xb913974d7fcb54f21ca9a130ba11433c465d869a65d74f1dfa7f751a29b61a3f\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/interfaces/IBaseVault.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IBaseVault {\\n  // Events for general vault operations\\n  event CreateVault(uint256 vaultID, address creator);\\n  event DestroyVault(uint256 vaultID);\\n  event TransferVault(uint256 vaultID, address from, address to);\\n\\n  // Buying out a vault event\\n  event LiquidateVault(\\n    uint256 vaultID,\\n    address owner,\\n    address buyer,\\n    uint256 amountPaid\\n  );\\n\\n  // Events for collateral operations\\n  event DepositCollateral(uint256 vaultID, uint256 amount);\\n  event WithdrawCollateral(uint256 vaultID, uint256 amount);\\n\\n  // Events for token operations\\n  event BorrowToken(uint256 vaultID, uint256 amount);\\n  event PayBackToken(uint256 vaultID, uint256 amount, uint256 closingFee);\\n\\n  function createVault() external;\\n\\n  function destroyVault(uint256 vaultID) external;\\n\\n  function transferVault(uint256 vaultID, address to) external;\\n}\\n\",\"keccak256\":\"0xcf4bb6d1241e60f126c05a6a8122b5e564e9e921ac2861fe5eb8d2aac3e48b9d\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/interfaces/IStablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStablecoin is IERC20 {\\n  function burn(address from, uint256 amount) external;\\n\\n  function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5cefe2dcfb64d8d8f1b16dfb3cc13b6fcc7754b268440daeefc461a7bff8fb77\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620049f2380380620049f28339810160408190526200003491620003ee565b60968585858585838381600090805190602001906200005592919062000278565b5080516200006b90600190602084019062000278565b50506001600a55506001600160a01b0385166200009857634e487b7160e01b600052600160045260246000fd5b85620000b457634e487b7160e01b600052600160045260246000fd5b678ac7230489e80000600e556032600f55600060108190556305f5e100601155601480546001600160a01b0319908116909155601380546001600160a01b039890981697909116969096179095556001600160601b0319606092831b8116608052911b1660a0525050600d919091556200012f908262000170565b6200014a600080516020620049d28339815191523362000170565b62000165600080516020620049d28339815191528062000180565b5050505050620004e1565b6200017c8282620001d4565b5050565b6000828152600b6020526040902060010154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a46000918252600b602052604090912060010155565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff166200017c576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002343390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b82805462000286906200048e565b90600052602060002090601f016020900481019282620002aa5760008555620002f5565b82601f10620002c557805160ff1916838001178555620002f5565b82800160010185558215620002f5579182015b82811115620002f5578251825591602001919060010190620002d8565b506200030392915062000307565b5090565b5b8082111562000303576000815560010162000308565b80516001600160a01b03811681146200033657600080fd5b919050565b600082601f8301126200034c578081fd5b81516001600160401b0380821115620003695762000369620004cb565b604051601f8301601f19908116603f01168101908282118183101715620003945762000394620004cb565b81604052838152602092508683858801011115620003b0578485fd5b8491505b83821015620003d35785820183015181830184015290820190620003b4565b83821115620003e457848385830101525b9695505050505050565b600080600080600060a0868803121562000406578081fd5b62000411866200031e565b60208701519095506001600160401b03808211156200042e578283fd5b6200043c89838a016200033b565b9550604088015191508082111562000452578283fd5b5062000461888289016200033b565b93505062000472606087016200031e565b915062000482608087016200031e565b90509295509295909350565b600181811c90821680620004a357607f821691505b60208210811415620004c557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c6144a96200052960003960008181610f7001528181611b4301528181611d0c0152818161284401526129f501526000610a2b01526144a96000f3fe6080604052600436106103555760003560e01c8063767a7b05116101bb578063b88d4fde116100f7578063d310f49b11610095578063e1c84ea41161006f578063e1c84ea4146109ba578063e985e9c5146109d0578063fc0c546a14610a19578063fc7b9c1814610a4d57600080fd5b8063d310f49b14610940578063d4a9b2c51461096d578063d547741f1461099a57600080fd5b8063c87b56dd116100d1578063c87b56dd146108c8578063cdfedd63146108e8578063ce77f243146108fe578063d11a57ec1461091e57600080fd5b8063b88d4fde14610875578063bad4a01f14610895578063bda53107146108a857600080fd5b806398d721e011610164578063a22cb4651161013e578063a22cb465146107e5578063a525323d14610805578063b14f2a3914610835578063b1511cc91461085557600080fd5b806398d721e01461079b5780639fc30f1c146107bb578063a217fddf146107d057600080fd5b80638637599411610195578063863759941461072057806391d148541461074057806395d89b411461078657600080fd5b8063767a7b05146106c057806385af3c16146106e057806385e290a31461070057600080fd5b80632935d2bc116102955780634f6ccce7116102335780636352211e1161020d5780636352211e1461064a57806370a082311461066a5780637139c9291461068a578063728bbbb5146106aa57600080fd5b80634f6ccce7146105ff5780635d12928b1461061f57806361d027b31461063457600080fd5b806336568abe1161026f57806336568abe1461057f5780633db991771461059f5780633e61facd146105bf57806342842e0e146105df57600080fd5b80632935d2bc146105295780632f2ff15d1461053f5780632f745c591461055f57600080fd5b806308ec5927116103025780631c883e7b116102dc5780631c883e7b146104a357806320531bc9146104b957806323b872dd146104d9578063248a9ca3146104f957600080fd5b806308ec59271461044e578063095ea7b31461046e57806318160ddd1461048e57600080fd5b8063048de38111610333578063048de381146103e957806306fdde031461040c578063081812fc1461042e57600080fd5b806301e49d0a1461035a57806301ffc9a71461037c578063048c661d146103b1575b600080fd5b34801561036657600080fd5b5061037a6103753660046140c7565b610a63565b005b34801561038857600080fd5b5061039c610397366004614101565b610ad7565b60405190151581526020015b60405180910390f35b3480156103bd57600080fd5b506014546103d1906001600160a01b031681565b6040516001600160a01b0390911681526020016103a8565b3480156103f557600080fd5b506103fe610ae8565b6040519081526020016103a8565b34801561041857600080fd5b50610421610b7c565b6040516103a891906142d9565b34801561043a57600080fd5b506103d16104493660046140c7565b610c0e565b34801561045a57600080fd5b5061037a610469366004614151565b610ca3565b34801561047a57600080fd5b5061037a61048936600461409e565b61101a565b34801561049a57600080fd5b506008546103fe565b3480156104af57600080fd5b506103fe600f5481565b3480156104c557600080fd5b506013546103d1906001600160a01b031681565b3480156104e557600080fd5b5061037a6104f4366004613f54565b61114c565b34801561050557600080fd5b506103fe6105143660046140c7565b6000908152600b602052604090206001015490565b34801561053557600080fd5b506103fe600d5481565b34801561054b57600080fd5b5061037a61055a3660046140df565b6111d3565b34801561056b57600080fd5b506103fe61057a36600461409e565b6111f9565b34801561058b57600080fd5b5061037a61059a3660046140df565b6112a1565b3480156105ab57600080fd5b5061037a6105ba3660046140c7565b61132d565b3480156105cb57600080fd5b5061037a6105da3660046140df565b61134c565b3480156105eb57600080fd5b5061037a6105fa366004613f54565b611467565b34801561060b57600080fd5b506103fe61061a3660046140c7565b611482565b34801561062b57600080fd5b5061037a611534565b34801561064057600080fd5b506103fe60155481565b34801561065657600080fd5b506103d16106653660046140c7565b6115c2565b34801561067657600080fd5b506103fe610685366004613f08565b61164d565b34801561069657600080fd5b5061037a6106a53660046140c7565b6116e7565b3480156106b657600080fd5b506103fe60105481565b3480156106cc57600080fd5b5061037a6106db366004614151565b61175b565b3480156106ec57600080fd5b5061037a6106fb366004614151565b611a1d565b34801561070c57600080fd5b5061037a61071b3660046140c7565b611daf565b34801561072c57600080fd5b5061037a61073b3660046140c7565b611fda565b34801561074c57600080fd5b5061039c61075b3660046140df565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561079257600080fd5b50610421611ff9565b3480156107a757600080fd5b5061037a6107b6366004613f08565b612008565b3480156107c757600080fd5b506011546103fe565b3480156107dc57600080fd5b506103fe600081565b3480156107f157600080fd5b5061037a610800366004614064565b6120c0565b34801561081157600080fd5b5061039c6108203660046140c7565b60166020526000908152604090205460ff1681565b34801561084157600080fd5b5061037a610850366004613f08565b612185565b34801561086157600080fd5b5061037a6108703660046140c7565b6121ce565b34801561088157600080fd5b5061037a610890366004613f8f565b612265565b61037a6108a33660046140c7565b6122f3565b3480156108b457600080fd5b5061037a6108c3366004613f08565b61243f565b3480156108d457600080fd5b506104216108e33660046140c7565b6124f7565b3480156108f457600080fd5b506103fe60115481565b34801561090a57600080fd5b5061037a6109193660046140c7565b6125ed565b34801561092a57600080fd5b506103fe60008051602061445483398151915281565b34801561094c57600080fd5b506103fe61095b3660046140c7565b60186020526000908152604090205481565b34801561097957600080fd5b506103fe6109883660046140c7565b60176020526000908152604090205481565b3480156109a657600080fd5b5061037a6109b53660046140df565b612ad3565b3480156109c657600080fd5b506103fe600e5481565b3480156109dc57600080fd5b5061039c6109eb366004613f22565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610a2557600080fd5b506103d17f000000000000000000000000000000000000000000000000000000000000000081565b348015610a5957600080fd5b506103fe60125481565b600080516020614454833981519152610a7c8133612af9565b60008211610ad15760405162461bcd60e51b815260206004820152601260248201527f5065672063616e6e6f74206265207a65726f000000000000000000000000000060448201526064015b60405180910390fd5b50601155565b6000610ae282612b79565b92915050565b600080601360009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b3957600080fd5b505afa158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b719190614172565b509195945050505050565b606060008054610b8b90614391565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb790614391565b8015610c045780601f10610bd957610100808354040283529160200191610c04565b820191906000526020600020905b815481529060010190602001808311610be757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610c875760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac8565b506000908152600460205260409020546001600160a01b031690565b600082815260166020526040902054829060ff16610cfa5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b33610d04826115c2565b6001600160a01b031614610d5a5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6002600a541415610dad5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a5581610dff5760405162461bcd60e51b815260206004820152601b60248201527f4d75737420626f72726f77206e6f6e2d7a65726f20616d6f756e7400000000006044820152606401610ac8565b600e5482601254610e1091906142ec565b1115610e5e5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74206d696e74206f7665722064656274206365696c696e672e00006044820152606401610ac8565b600083815260186020526040812054610e789084906142ec565b6000858152601860205260409020549091508111610ea657634e487b7160e01b600052600160045260246000fd5b600084815260176020526040902054610ebf9082612bb7565b610f315760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7720776f756c6420707574207661756c742062656c6f77206d696e60448201527f696d756d20636f6c6c61746572616c2070657263656e746167650000000000006064820152608401610ac8565b610f3b8484612be6565b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b158015610fbc57600080fd5b505af1158015610fd0573d6000803e3d6000fd5b505060408051878152602081018790527f3e08df88d8e28f37df9bf227d3142ac506a364403445661a60891a49ed6792ca93500190505b60405180910390a150506001600a555050565b6000611025826115c2565b9050806001600160a01b0316836001600160a01b031614156110af5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610ac8565b336001600160a01b03821614806110cb57506110cb81336109eb565b61113d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ac8565b6111478383612cf8565b505050565b6111563382612d66565b6111c85760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac8565b611147838383612e5d565b6000828152600b60205260409020600101546111ef8133612af9565b6111478383612ea5565b60006112048361164d565b82106112785760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610ac8565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b038116331461131f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ac8565b6113298282612f47565b5050565b6000805160206144548339815191526113468133612af9565b50600f55565b600082815260166020526040902054829060ff166113a35760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b336113ad826115c2565b6001600160a01b0316146114035760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b61140c83612fca565b6114168284613071565b604080518481523360208201526001600160a01b038416918101919091527fa8159d062909288cfe1bc71a9cb71a800664f2658fc2588d52676a844f1b0f13906060015b60405180910390a1505050565b61114783838360405180602001604052806000815250612265565b600061148d60085490565b82106115015760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610ac8565b6008828154811061152257634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b611542600c80546001019055565b600061154d600c5490565b60008181526016602052604090819020805460ff19166001179055519091507f8b6c1d05c678fa59695e26465a85918ce0fc63a88f74af53d1daef8f0a9c7804906115ad90839033909182526001600160a01b0316602082015260400190565b60405180910390a16115bf3382613071565b50565b6000818152600260205260408120546001600160a01b031680610ae25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610ac8565b60006001600160a01b0382166116cb5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610ac8565b506001600160a01b031660009081526003602052604090205490565b6000805160206144548339815191526117008133612af9565b60008281526016602052604090205460ff166117555760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b50601555565b600082815260166020526040902054829060ff166117b25760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b336117bc826115c2565b6001600160a01b0316146118125760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6002600a5414156118655760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a556000838152601760205260409020548211156118ee5760405162461bcd60e51b815260206004820152602560248201527f5661756c7420646f6573206e6f74206861766520656e6f75676820636f6c6c6160448201527f746572616c0000000000000000000000000000000000000000000000000000006064820152608401610ac8565b600083815260176020526040812054611908908490614337565b600085815260186020526040902054909150156119ab57600084815260186020526040902054611939908290612bb7565b6119ab5760405162461bcd60e51b815260206004820152603e60248201527f5769746864726177616c20776f756c6420707574207661756c742062656c6f7760448201527f206d696e696d756d20636f6c6c61746572616c2070657263656e7461676500006064820152608401610ac8565b60008481526017602052604080822083905551339185156108fc02918691818181858888f193505050501580156119e6573d6000803e3d6000fd5b5060408051858152602081018590527f6c0ea3bea9dd66afa8f9d39d6eb93d833466190330813b42835efc650dca4cb99101611007565b600082815260166020526040902054829060ff16611a745760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b33611a7e826115c2565b6001600160a01b031614611ad45760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6002600a541415611b275760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a556040516370a0823160e01b815233600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611b8d57600080fd5b505afa158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc59190614139565b1015611c135760405162461bcd60e51b815260206004820152601560248201527f546f6b656e2062616c616e636520746f6f206c6f7700000000000000000000006044820152606401610ac8565b600083815260186020526040902054821115611c975760405162461bcd60e51b815260206004820152602760248201527f5661756c742064656274206c657373207468616e20616d6f756e7420746f207060448201527f6179206261636b000000000000000000000000000000000000000000000000006064820152608401610ac8565b6000611ca1610ae8565b611cad90612710614318565b601154600f54611cbd9086614318565b611cc79190614318565b611cd19190614304565b9050611cdd84846131bf565b611ce7848261333f565b611cf081613422565b604051632770a7eb60e21b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639dc29fac90604401600060405180830381600087803b158015611d5857600080fd5b505af1158015611d6c573d6000803e3d6000fd5b505060408051878152602081018790529081018490527f31f96762af4051f367185773cc2f55bfb112a6c114b3407ded1f321a9eb199ac92506060019050611007565b600081815260166020526040902054819060ff16611e065760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b33611e10826115c2565b6001600160a01b031614611e665760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6002600a541415611eb95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a5560008281526018602052604090205415611f1a5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206173206f75747374616e64696e672064656274000000000000006044820152606401610ac8565b60008281526017602052604090205415611f6a57600082815260176020526040808220549051339282156108fc02929190818181858888f19350505050158015611f68573d6000803e3d6000fd5b505b611f7382612fca565b6000828152601660209081526040808320805460ff1916905560178252808320839055601882528083209290925590518381527f4fe08624ee65b341c38ab9693d216b909d4ddee1bc8d3fe0fea14026c361b465910160405180910390a150506001600a55565b600080516020614454833981519152611ff38133612af9565b50601055565b606060018054610b8b90614391565b6000805160206144548339815191526120218133612af9565b6001600160a01b03821661209d5760405162461bcd60e51b815260206004820152602560248201527f53746162696c69747920706f6f6c2063616e6e6f74206265207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610ac8565b50601480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382163314156121195760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ac8565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008051602061445483398151915261219e8133612af9565b6121b660008051602061445483398151915283613486565b61132960008051602061445483398151915233612ad3565b6000805160206144548339815191526121e78133612af9565b81600e54111561225f5760405162461bcd60e51b815260206004820152603c60248201527f7365744365696c696e673a204d757374206265206f7665722074686520616d6f60448201527f756e74206f662063757272656e742064656274206365696c696e672e000000006064820152608401610ac8565b50600e55565b61226f3383612d66565b6122e15760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac8565b6122ed84848484613490565b50505050565b600081815260166020526040902054819060ff1661234a5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b33612354826115c2565b6001600160a01b0316146123aa5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6000828152601760205260408120546123c49034906142ec565b6000848152601760205260409020549091508110156123f357634e487b7160e01b600052600160045260246000fd5b60008381526017602052604090819020829055517f52c4e7127ec34e8fc95f09ce2d06b4f00acca12ccbcdfb246ef67ee6aefe068d9061145a9085903490918252602082015260400190565b6000805160206144548339815191526124588133612af9565b6001600160a01b0382166124d45760405162461bcd60e51b815260206004820152602360248201527f507269636520736f757263652063616e6e6f74206265207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610ac8565b50601380546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600260205260409020546060906001600160a01b03166125845760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610ac8565b600061259b60408051602081019091526000815290565b905060008151116125bb57604051806020016040528060008152506125e6565b806125c584613519565b6040516020016125d69291906141ed565b6040516020818303038152906040525b9392505050565b6014546001600160a01b0316158061260f57506014546001600160a01b031633145b6126815760405162461bcd60e51b815260206004820152602160248201527f6275795269736b795661756c742064697361626c656420666f72207075626c6960448201527f63000000000000000000000000000000000000000000000000000000000000006064820152608401610ac8565b6002600a5414156126d45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a5560008181526016602052604090205460ff1661272e5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b6000818152601760209081526040808320546018909252822054829161275391613633565b909250905060006127648284614304565b9050600d5481106127dd5760405162461bcd60e51b815260206004820152603060248201527f5661756c74206973206e6f742062656c6f77206d696e696d756d20636f6c6c6160448201527f746572616c2070657263656e74616765000000000000000000000000000000006064820152608401610ac8565b6000600d54846127ed9190614304565b905060006127fa60115490565b6128049083614304565b60008781526018602052604081205491925090612822908390614337565b6040516370a0823160e01b815233600482015290915081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561288657600080fd5b505afa15801561289a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128be9190614139565b10156129325760405162461bcd60e51b815260206004820152603160248201527f546f6b656e2062616c616e636520746f6f206c6f7720746f20706179206f666660448201527f206f75747374616e64696e6720646562740000000000000000000000000000006064820152608401610ac8565b600061293d886115c2565b6000898152601860205260408120859055909150612959610ae8565b61296590612710614318565b601154600f546129759086614318565b61297f9190614318565b6129899190614304565b905080601760008b815260200190815260200160002060008282546129ae9190614337565b9091555050601554600090815260176020526040812080548392906129d49084906142ec565b9091555050604051632770a7eb60e21b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639dc29fac90604401600060405180830381600087803b158015612a4157600080fd5b505af1158015612a55573d6000803e3d6000fd5b50505050612a6283613715565b612a6b89612fca565b612a75338a613071565b604080518a81526001600160a01b038416602082015233818301526060810185905290517f71dbdb4d6f04677a5667f6a1712cd33dadcc29f7d2d0672f2d2bf0df331cc28b9181900360800190a150506001600a5550505050505050565b6000828152600b6020526040902060010154612aef8133612af9565b6111478383612f47565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff1661132957612b37816001600160a01b0316601461377e565b612b4283602061377e565b604051602001612b5392919061421c565b60408051601f198184030181529082905262461bcd60e51b8252610ac8916004016142d9565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610ae25750610ae282613989565b6000806000612bc68585613633565b90925090506000612bd78284614304565b600d5411159695505050505050565b600060125482612bf691906142ec565b9050601254811015612c1857634e487b7160e01b600052600160045260246000fd5b600e54811115612c905760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74206578636565642064656274206365696c696e6720666f72207460448201527f686973207661756c7400000000000000000000000000000000000000000000006064820152608401610ac8565b600083815260186020526040812054612ca990846142ec565b600085815260186020526040902054909150811015612cd857634e487b7160e01b600052600160045260246000fd5b612ce1836139c7565b600093845260186020526040909320929092555050565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612d2d826115c2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316612ddf5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac8565b6000612dea836115c2565b9050806001600160a01b0316846001600160a01b03161480612e255750836001600160a01b0316612e1a84610c0e565b6001600160a01b0316145b80612e5557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b60405162461bcd60e51b815260206004820152601260248201527f7472616e736665723a2064697361626c656400000000000000000000000000006044820152606401610ac8565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff16611329576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612f033390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff1615611329576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000612fd5826115c2565b9050612fe381600084613a57565b612fee600083612cf8565b6001600160a01b0381166000908152600360205260408120805460019290613017908490614337565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166130c75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ac8565b6000818152600260205260409020546001600160a01b03161561312c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ac8565b61313860008383613a57565b6001600160a01b03821660009081526003602052604081208054600192906131619084906142ec565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8060125410156132375760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f206578697374732e0000000000000000000000000000000000000000000000006064820152608401610ac8565b6000828152601860205260409020548111156132bb5760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f20757365722068617300000000000000000000000000000000000000000000006064820152608401610ac8565b6000816012546132cb9190614337565b90506012548111156132ed57634e487b7160e01b600052600160045260246000fd5b600083815260186020526040812054613307908490614337565b60008581526018602052604090205490915081111561333657634e487b7160e01b600052600160045260246000fd5b612ce183613715565b6000828152601760205260409020548111156133c35760405162461bcd60e51b815260206004820152603060248201527f43616e6e6f742072656d6f7665206d6f7265207468616e20746865206465706f60448201527f736974656420636f6c6c61746572616c000000000000000000000000000000006064820152608401610ac8565b6000828152601760205260408120546133dd908390614337565b60008481526017602052604090205490915081111561340c57634e487b7160e01b600052600160045260246000fd5b6000928352601760205260409092209190915550565b60155460009081526017602052604081205461343f9083906142ec565b60155460009081526017602052604090205490915081101561347157634e487b7160e01b600052600160045260246000fd5b60155460009081526017602052604090205550565b6113298282612ea5565b61349b848484612e5d565b6134a784848484613a62565b6122ed5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac8565b60608161353d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156135675780613551816143cc565b91506135609050600a83614304565b9150613541565b60008167ffffffffffffffff81111561359057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156135ba576020820181803683370190505b5090505b8415612e55576135cf600183614337565b91506135dc600a866143e7565b6135e79060306142ec565b60f81b81838151811061360a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061362c600a86614304565b94506135be565b60008061363e610ae8565b61365857634e487b7160e01b600052600160045260246000fd5b60115461367557634e487b7160e01b600052600160045260246000fd5b600061367f610ae8565b6136899086614318565b9050848110156136a957634e487b7160e01b600052600160045260246000fd5b60006136b460115490565b6136be9086614318565b9050848110156136de57634e487b7160e01b600052600160045260246000fd5b60006136eb836064614318565b905082811161370a57634e487b7160e01b600052600160045260246000fd5b969095509350505050565b6012548111156137675760405162461bcd60e51b815260206004820152601860248201527f446562742063616e206e6f7420676f2062656c6f7720302e00000000000000006044820152606401610ac8565b6000816012546137779190614337565b6012555050565b6060600061378d836002614318565b6137989060026142ec565b67ffffffffffffffff8111156137be57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156137e8576020820181803683370190505b509050600360fc1b8160008151811061381157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061386a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061388e846002614318565b6138999060016142ec565b90505b600181111561393a577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106138e857634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061390c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936139338161437a565b905061389c565b5083156125e65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ac8565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610ae25750610ae282613bc5565b6000816012546139d791906142ec565b9050600e54811115613a515760405162461bcd60e51b815260206004820152602260248201527f446562742063616e206e6f7420676f2061626f76652064656274206365696c6960448201527f6e670000000000000000000000000000000000000000000000000000000000006064820152608401610ac8565b60125550565b611147838383613c60565b60006001600160a01b0384163b15613bba57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613aa690339089908890889060040161429d565b602060405180830381600087803b158015613ac057600080fd5b505af1925050508015613af0575060408051601f3d908101601f19168201909252613aed9181019061411d565b60015b613ba0573d808015613b1e576040519150601f19603f3d011682016040523d82523d6000602084013e613b23565b606091505b508051613b985760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612e55565b506001949350505050565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480613c2857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610ae257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610ae2565b6001600160a01b038316613cbb57613cb681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613cde565b816001600160a01b0316836001600160a01b031614613cde57613cde8382613d18565b6001600160a01b038216613cf55761114781613db5565b826001600160a01b0316826001600160a01b031614611147576111478282613e8e565b60006001613d258461164d565b613d2f9190614337565b600083815260076020526040902054909150808214613d82576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090613dc790600190614337565b60008381526009602052604081205460088054939450909284908110613dfd57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110613e2c57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480613e7257634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613e998361164d565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b80356001600160a01b0381168114613ee957600080fd5b919050565b805169ffffffffffffffffffff81168114613ee957600080fd5b600060208284031215613f19578081fd5b6125e682613ed2565b60008060408385031215613f34578081fd5b613f3d83613ed2565b9150613f4b60208401613ed2565b90509250929050565b600080600060608486031215613f68578081fd5b613f7184613ed2565b9250613f7f60208501613ed2565b9150604084013590509250925092565b60008060008060808587031215613fa4578081fd5b613fad85613ed2565b9350613fbb60208601613ed2565b925060408501359150606085013567ffffffffffffffff80821115613fde578283fd5b818701915087601f830112613ff1578283fd5b81358181111561400357614003614427565b604051601f8201601f19908116603f0116810190838211818310171561402b5761402b614427565b816040528281528a6020848701011115614043578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215614076578182fd5b61407f83613ed2565b915060208301358015158114614093578182fd5b809150509250929050565b600080604083850312156140b0578182fd5b6140b983613ed2565b946020939093013593505050565b6000602082840312156140d8578081fd5b5035919050565b600080604083850312156140f1578182fd5b82359150613f4b60208401613ed2565b600060208284031215614112578081fd5b81356125e68161443d565b60006020828403121561412e578081fd5b81516125e68161443d565b60006020828403121561414a578081fd5b5051919050565b60008060408385031215614163578182fd5b50508035926020909101359150565b600080600080600060a08688031215614189578283fd5b61419286613eee565b94506020860151935060408601519250606086015191506141b560808701613eee565b90509295509295909350565b600081518084526141d981602086016020860161434e565b601f01601f19169290920160200192915050565b600083516141ff81846020880161434e565b83519083019061421381836020880161434e565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161425481601785016020880161434e565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161429181602884016020880161434e565b01602801949350505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526142cf60808301846141c1565b9695505050505050565b6020815260006125e660208301846141c1565b600082198211156142ff576142ff6143fb565b500190565b60008261431357614313614411565b500490565b6000816000190483118215151615614332576143326143fb565b500290565b600082821015614349576143496143fb565b500390565b60005b83811015614369578181015183820152602001614351565b838111156122ed5750506000910152565b600081614389576143896143fb565b506000190190565b600181811c908216806143a557607f821691505b602082108114156143c657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156143e0576143e06143fb565b5060010190565b6000826143f6576143f6614411565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146115bf57600080fdfee1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9a2646970667358221220fe54c16188fbb2f2cb9782f284f9ba2776a03789d65a2f88a4286fcb547b716164736f6c63430008040033e1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9",
  "deployedBytecode": "0x6080604052600436106103555760003560e01c8063767a7b05116101bb578063b88d4fde116100f7578063d310f49b11610095578063e1c84ea41161006f578063e1c84ea4146109ba578063e985e9c5146109d0578063fc0c546a14610a19578063fc7b9c1814610a4d57600080fd5b8063d310f49b14610940578063d4a9b2c51461096d578063d547741f1461099a57600080fd5b8063c87b56dd116100d1578063c87b56dd146108c8578063cdfedd63146108e8578063ce77f243146108fe578063d11a57ec1461091e57600080fd5b8063b88d4fde14610875578063bad4a01f14610895578063bda53107146108a857600080fd5b806398d721e011610164578063a22cb4651161013e578063a22cb465146107e5578063a525323d14610805578063b14f2a3914610835578063b1511cc91461085557600080fd5b806398d721e01461079b5780639fc30f1c146107bb578063a217fddf146107d057600080fd5b80638637599411610195578063863759941461072057806391d148541461074057806395d89b411461078657600080fd5b8063767a7b05146106c057806385af3c16146106e057806385e290a31461070057600080fd5b80632935d2bc116102955780634f6ccce7116102335780636352211e1161020d5780636352211e1461064a57806370a082311461066a5780637139c9291461068a578063728bbbb5146106aa57600080fd5b80634f6ccce7146105ff5780635d12928b1461061f57806361d027b31461063457600080fd5b806336568abe1161026f57806336568abe1461057f5780633db991771461059f5780633e61facd146105bf57806342842e0e146105df57600080fd5b80632935d2bc146105295780632f2ff15d1461053f5780632f745c591461055f57600080fd5b806308ec5927116103025780631c883e7b116102dc5780631c883e7b146104a357806320531bc9146104b957806323b872dd146104d9578063248a9ca3146104f957600080fd5b806308ec59271461044e578063095ea7b31461046e57806318160ddd1461048e57600080fd5b8063048de38111610333578063048de381146103e957806306fdde031461040c578063081812fc1461042e57600080fd5b806301e49d0a1461035a57806301ffc9a71461037c578063048c661d146103b1575b600080fd5b34801561036657600080fd5b5061037a6103753660046140c7565b610a63565b005b34801561038857600080fd5b5061039c610397366004614101565b610ad7565b60405190151581526020015b60405180910390f35b3480156103bd57600080fd5b506014546103d1906001600160a01b031681565b6040516001600160a01b0390911681526020016103a8565b3480156103f557600080fd5b506103fe610ae8565b6040519081526020016103a8565b34801561041857600080fd5b50610421610b7c565b6040516103a891906142d9565b34801561043a57600080fd5b506103d16104493660046140c7565b610c0e565b34801561045a57600080fd5b5061037a610469366004614151565b610ca3565b34801561047a57600080fd5b5061037a61048936600461409e565b61101a565b34801561049a57600080fd5b506008546103fe565b3480156104af57600080fd5b506103fe600f5481565b3480156104c557600080fd5b506013546103d1906001600160a01b031681565b3480156104e557600080fd5b5061037a6104f4366004613f54565b61114c565b34801561050557600080fd5b506103fe6105143660046140c7565b6000908152600b602052604090206001015490565b34801561053557600080fd5b506103fe600d5481565b34801561054b57600080fd5b5061037a61055a3660046140df565b6111d3565b34801561056b57600080fd5b506103fe61057a36600461409e565b6111f9565b34801561058b57600080fd5b5061037a61059a3660046140df565b6112a1565b3480156105ab57600080fd5b5061037a6105ba3660046140c7565b61132d565b3480156105cb57600080fd5b5061037a6105da3660046140df565b61134c565b3480156105eb57600080fd5b5061037a6105fa366004613f54565b611467565b34801561060b57600080fd5b506103fe61061a3660046140c7565b611482565b34801561062b57600080fd5b5061037a611534565b34801561064057600080fd5b506103fe60155481565b34801561065657600080fd5b506103d16106653660046140c7565b6115c2565b34801561067657600080fd5b506103fe610685366004613f08565b61164d565b34801561069657600080fd5b5061037a6106a53660046140c7565b6116e7565b3480156106b657600080fd5b506103fe60105481565b3480156106cc57600080fd5b5061037a6106db366004614151565b61175b565b3480156106ec57600080fd5b5061037a6106fb366004614151565b611a1d565b34801561070c57600080fd5b5061037a61071b3660046140c7565b611daf565b34801561072c57600080fd5b5061037a61073b3660046140c7565b611fda565b34801561074c57600080fd5b5061039c61075b3660046140df565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561079257600080fd5b50610421611ff9565b3480156107a757600080fd5b5061037a6107b6366004613f08565b612008565b3480156107c757600080fd5b506011546103fe565b3480156107dc57600080fd5b506103fe600081565b3480156107f157600080fd5b5061037a610800366004614064565b6120c0565b34801561081157600080fd5b5061039c6108203660046140c7565b60166020526000908152604090205460ff1681565b34801561084157600080fd5b5061037a610850366004613f08565b612185565b34801561086157600080fd5b5061037a6108703660046140c7565b6121ce565b34801561088157600080fd5b5061037a610890366004613f8f565b612265565b61037a6108a33660046140c7565b6122f3565b3480156108b457600080fd5b5061037a6108c3366004613f08565b61243f565b3480156108d457600080fd5b506104216108e33660046140c7565b6124f7565b3480156108f457600080fd5b506103fe60115481565b34801561090a57600080fd5b5061037a6109193660046140c7565b6125ed565b34801561092a57600080fd5b506103fe60008051602061445483398151915281565b34801561094c57600080fd5b506103fe61095b3660046140c7565b60186020526000908152604090205481565b34801561097957600080fd5b506103fe6109883660046140c7565b60176020526000908152604090205481565b3480156109a657600080fd5b5061037a6109b53660046140df565b612ad3565b3480156109c657600080fd5b506103fe600e5481565b3480156109dc57600080fd5b5061039c6109eb366004613f22565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610a2557600080fd5b506103d17f000000000000000000000000000000000000000000000000000000000000000081565b348015610a5957600080fd5b506103fe60125481565b600080516020614454833981519152610a7c8133612af9565b60008211610ad15760405162461bcd60e51b815260206004820152601260248201527f5065672063616e6e6f74206265207a65726f000000000000000000000000000060448201526064015b60405180910390fd5b50601155565b6000610ae282612b79565b92915050565b600080601360009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b3957600080fd5b505afa158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b719190614172565b509195945050505050565b606060008054610b8b90614391565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb790614391565b8015610c045780601f10610bd957610100808354040283529160200191610c04565b820191906000526020600020905b815481529060010190602001808311610be757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b0316610c875760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac8565b506000908152600460205260409020546001600160a01b031690565b600082815260166020526040902054829060ff16610cfa5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b33610d04826115c2565b6001600160a01b031614610d5a5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6002600a541415610dad5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a5581610dff5760405162461bcd60e51b815260206004820152601b60248201527f4d75737420626f72726f77206e6f6e2d7a65726f20616d6f756e7400000000006044820152606401610ac8565b600e5482601254610e1091906142ec565b1115610e5e5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74206d696e74206f7665722064656274206365696c696e672e00006044820152606401610ac8565b600083815260186020526040812054610e789084906142ec565b6000858152601860205260409020549091508111610ea657634e487b7160e01b600052600160045260246000fd5b600084815260176020526040902054610ebf9082612bb7565b610f315760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7720776f756c6420707574207661756c742062656c6f77206d696e60448201527f696d756d20636f6c6c61746572616c2070657263656e746167650000000000006064820152608401610ac8565b610f3b8484612be6565b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b158015610fbc57600080fd5b505af1158015610fd0573d6000803e3d6000fd5b505060408051878152602081018790527f3e08df88d8e28f37df9bf227d3142ac506a364403445661a60891a49ed6792ca93500190505b60405180910390a150506001600a555050565b6000611025826115c2565b9050806001600160a01b0316836001600160a01b031614156110af5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610ac8565b336001600160a01b03821614806110cb57506110cb81336109eb565b61113d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610ac8565b6111478383612cf8565b505050565b6111563382612d66565b6111c85760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac8565b611147838383612e5d565b6000828152600b60205260409020600101546111ef8133612af9565b6111478383612ea5565b60006112048361164d565b82106112785760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610ac8565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b038116331461131f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610ac8565b6113298282612f47565b5050565b6000805160206144548339815191526113468133612af9565b50600f55565b600082815260166020526040902054829060ff166113a35760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b336113ad826115c2565b6001600160a01b0316146114035760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b61140c83612fca565b6114168284613071565b604080518481523360208201526001600160a01b038416918101919091527fa8159d062909288cfe1bc71a9cb71a800664f2658fc2588d52676a844f1b0f13906060015b60405180910390a1505050565b61114783838360405180602001604052806000815250612265565b600061148d60085490565b82106115015760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610ac8565b6008828154811061152257634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b611542600c80546001019055565b600061154d600c5490565b60008181526016602052604090819020805460ff19166001179055519091507f8b6c1d05c678fa59695e26465a85918ce0fc63a88f74af53d1daef8f0a9c7804906115ad90839033909182526001600160a01b0316602082015260400190565b60405180910390a16115bf3382613071565b50565b6000818152600260205260408120546001600160a01b031680610ae25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610ac8565b60006001600160a01b0382166116cb5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610ac8565b506001600160a01b031660009081526003602052604090205490565b6000805160206144548339815191526117008133612af9565b60008281526016602052604090205460ff166117555760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b50601555565b600082815260166020526040902054829060ff166117b25760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b336117bc826115c2565b6001600160a01b0316146118125760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6002600a5414156118655760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a556000838152601760205260409020548211156118ee5760405162461bcd60e51b815260206004820152602560248201527f5661756c7420646f6573206e6f74206861766520656e6f75676820636f6c6c6160448201527f746572616c0000000000000000000000000000000000000000000000000000006064820152608401610ac8565b600083815260176020526040812054611908908490614337565b600085815260186020526040902054909150156119ab57600084815260186020526040902054611939908290612bb7565b6119ab5760405162461bcd60e51b815260206004820152603e60248201527f5769746864726177616c20776f756c6420707574207661756c742062656c6f7760448201527f206d696e696d756d20636f6c6c61746572616c2070657263656e7461676500006064820152608401610ac8565b60008481526017602052604080822083905551339185156108fc02918691818181858888f193505050501580156119e6573d6000803e3d6000fd5b5060408051858152602081018590527f6c0ea3bea9dd66afa8f9d39d6eb93d833466190330813b42835efc650dca4cb99101611007565b600082815260166020526040902054829060ff16611a745760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b33611a7e826115c2565b6001600160a01b031614611ad45760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6002600a541415611b275760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a556040516370a0823160e01b815233600482015282907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b158015611b8d57600080fd5b505afa158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc59190614139565b1015611c135760405162461bcd60e51b815260206004820152601560248201527f546f6b656e2062616c616e636520746f6f206c6f7700000000000000000000006044820152606401610ac8565b600083815260186020526040902054821115611c975760405162461bcd60e51b815260206004820152602760248201527f5661756c742064656274206c657373207468616e20616d6f756e7420746f207060448201527f6179206261636b000000000000000000000000000000000000000000000000006064820152608401610ac8565b6000611ca1610ae8565b611cad90612710614318565b601154600f54611cbd9086614318565b611cc79190614318565b611cd19190614304565b9050611cdd84846131bf565b611ce7848261333f565b611cf081613422565b604051632770a7eb60e21b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639dc29fac90604401600060405180830381600087803b158015611d5857600080fd5b505af1158015611d6c573d6000803e3d6000fd5b505060408051878152602081018790529081018490527f31f96762af4051f367185773cc2f55bfb112a6c114b3407ded1f321a9eb199ac92506060019050611007565b600081815260166020526040902054819060ff16611e065760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b33611e10826115c2565b6001600160a01b031614611e665760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6002600a541415611eb95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a5560008281526018602052604090205415611f1a5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206173206f75747374616e64696e672064656274000000000000006044820152606401610ac8565b60008281526017602052604090205415611f6a57600082815260176020526040808220549051339282156108fc02929190818181858888f19350505050158015611f68573d6000803e3d6000fd5b505b611f7382612fca565b6000828152601660209081526040808320805460ff1916905560178252808320839055601882528083209290925590518381527f4fe08624ee65b341c38ab9693d216b909d4ddee1bc8d3fe0fea14026c361b465910160405180910390a150506001600a55565b600080516020614454833981519152611ff38133612af9565b50601055565b606060018054610b8b90614391565b6000805160206144548339815191526120218133612af9565b6001600160a01b03821661209d5760405162461bcd60e51b815260206004820152602560248201527f53746162696c69747920706f6f6c2063616e6e6f74206265207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610ac8565b50601480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382163314156121195760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610ac8565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008051602061445483398151915261219e8133612af9565b6121b660008051602061445483398151915283613486565b61132960008051602061445483398151915233612ad3565b6000805160206144548339815191526121e78133612af9565b81600e54111561225f5760405162461bcd60e51b815260206004820152603c60248201527f7365744365696c696e673a204d757374206265206f7665722074686520616d6f60448201527f756e74206f662063757272656e742064656274206365696c696e672e000000006064820152608401610ac8565b50600e55565b61226f3383612d66565b6122e15760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610ac8565b6122ed84848484613490565b50505050565b600081815260166020526040902054819060ff1661234a5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b33612354826115c2565b6001600160a01b0316146123aa5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f75000000000000006044820152606401610ac8565b6000828152601760205260408120546123c49034906142ec565b6000848152601760205260409020549091508110156123f357634e487b7160e01b600052600160045260246000fd5b60008381526017602052604090819020829055517f52c4e7127ec34e8fc95f09ce2d06b4f00acca12ccbcdfb246ef67ee6aefe068d9061145a9085903490918252602082015260400190565b6000805160206144548339815191526124588133612af9565b6001600160a01b0382166124d45760405162461bcd60e51b815260206004820152602360248201527f507269636520736f757263652063616e6e6f74206265207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610ac8565b50601380546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600260205260409020546060906001600160a01b03166125845760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610ac8565b600061259b60408051602081019091526000815290565b905060008151116125bb57604051806020016040528060008152506125e6565b806125c584613519565b6040516020016125d69291906141ed565b6040516020818303038152906040525b9392505050565b6014546001600160a01b0316158061260f57506014546001600160a01b031633145b6126815760405162461bcd60e51b815260206004820152602160248201527f6275795269736b795661756c742064697361626c656420666f72207075626c6960448201527f63000000000000000000000000000000000000000000000000000000000000006064820152608401610ac8565b6002600a5414156126d45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ac8565b6002600a5560008181526016602052604090205460ff1661272e5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610ac8565b6000818152601760209081526040808320546018909252822054829161275391613633565b909250905060006127648284614304565b9050600d5481106127dd5760405162461bcd60e51b815260206004820152603060248201527f5661756c74206973206e6f742062656c6f77206d696e696d756d20636f6c6c6160448201527f746572616c2070657263656e74616765000000000000000000000000000000006064820152608401610ac8565b6000600d54846127ed9190614304565b905060006127fa60115490565b6128049083614304565b60008781526018602052604081205491925090612822908390614337565b6040516370a0823160e01b815233600482015290915081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561288657600080fd5b505afa15801561289a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128be9190614139565b10156129325760405162461bcd60e51b815260206004820152603160248201527f546f6b656e2062616c616e636520746f6f206c6f7720746f20706179206f666660448201527f206f75747374616e64696e6720646562740000000000000000000000000000006064820152608401610ac8565b600061293d886115c2565b6000898152601860205260408120859055909150612959610ae8565b61296590612710614318565b601154600f546129759086614318565b61297f9190614318565b6129899190614304565b905080601760008b815260200190815260200160002060008282546129ae9190614337565b9091555050601554600090815260176020526040812080548392906129d49084906142ec565b9091555050604051632770a7eb60e21b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639dc29fac90604401600060405180830381600087803b158015612a4157600080fd5b505af1158015612a55573d6000803e3d6000fd5b50505050612a6283613715565b612a6b89612fca565b612a75338a613071565b604080518a81526001600160a01b038416602082015233818301526060810185905290517f71dbdb4d6f04677a5667f6a1712cd33dadcc29f7d2d0672f2d2bf0df331cc28b9181900360800190a150506001600a5550505050505050565b6000828152600b6020526040902060010154612aef8133612af9565b6111478383612f47565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff1661132957612b37816001600160a01b0316601461377e565b612b4283602061377e565b604051602001612b5392919061421c565b60408051601f198184030181529082905262461bcd60e51b8252610ac8916004016142d9565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610ae25750610ae282613989565b6000806000612bc68585613633565b90925090506000612bd78284614304565b600d5411159695505050505050565b600060125482612bf691906142ec565b9050601254811015612c1857634e487b7160e01b600052600160045260246000fd5b600e54811115612c905760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74206578636565642064656274206365696c696e6720666f72207460448201527f686973207661756c7400000000000000000000000000000000000000000000006064820152608401610ac8565b600083815260186020526040812054612ca990846142ec565b600085815260186020526040902054909150811015612cd857634e487b7160e01b600052600160045260246000fd5b612ce1836139c7565b600093845260186020526040909320929092555050565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612d2d826115c2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316612ddf5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610ac8565b6000612dea836115c2565b9050806001600160a01b0316846001600160a01b03161480612e255750836001600160a01b0316612e1a84610c0e565b6001600160a01b0316145b80612e5557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b60405162461bcd60e51b815260206004820152601260248201527f7472616e736665723a2064697361626c656400000000000000000000000000006044820152606401610ac8565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff16611329576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612f033390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff1615611329576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000612fd5826115c2565b9050612fe381600084613a57565b612fee600083612cf8565b6001600160a01b0381166000908152600360205260408120805460019290613017908490614337565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0382166130c75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610ac8565b6000818152600260205260409020546001600160a01b03161561312c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610ac8565b61313860008383613a57565b6001600160a01b03821660009081526003602052604081208054600192906131619084906142ec565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8060125410156132375760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f206578697374732e0000000000000000000000000000000000000000000000006064820152608401610ac8565b6000828152601860205260409020548111156132bb5760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f20757365722068617300000000000000000000000000000000000000000000006064820152608401610ac8565b6000816012546132cb9190614337565b90506012548111156132ed57634e487b7160e01b600052600160045260246000fd5b600083815260186020526040812054613307908490614337565b60008581526018602052604090205490915081111561333657634e487b7160e01b600052600160045260246000fd5b612ce183613715565b6000828152601760205260409020548111156133c35760405162461bcd60e51b815260206004820152603060248201527f43616e6e6f742072656d6f7665206d6f7265207468616e20746865206465706f60448201527f736974656420636f6c6c61746572616c000000000000000000000000000000006064820152608401610ac8565b6000828152601760205260408120546133dd908390614337565b60008481526017602052604090205490915081111561340c57634e487b7160e01b600052600160045260246000fd5b6000928352601760205260409092209190915550565b60155460009081526017602052604081205461343f9083906142ec565b60155460009081526017602052604090205490915081101561347157634e487b7160e01b600052600160045260246000fd5b60155460009081526017602052604090205550565b6113298282612ea5565b61349b848484612e5d565b6134a784848484613a62565b6122ed5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac8565b60608161353d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156135675780613551816143cc565b91506135609050600a83614304565b9150613541565b60008167ffffffffffffffff81111561359057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156135ba576020820181803683370190505b5090505b8415612e55576135cf600183614337565b91506135dc600a866143e7565b6135e79060306142ec565b60f81b81838151811061360a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061362c600a86614304565b94506135be565b60008061363e610ae8565b61365857634e487b7160e01b600052600160045260246000fd5b60115461367557634e487b7160e01b600052600160045260246000fd5b600061367f610ae8565b6136899086614318565b9050848110156136a957634e487b7160e01b600052600160045260246000fd5b60006136b460115490565b6136be9086614318565b9050848110156136de57634e487b7160e01b600052600160045260246000fd5b60006136eb836064614318565b905082811161370a57634e487b7160e01b600052600160045260246000fd5b969095509350505050565b6012548111156137675760405162461bcd60e51b815260206004820152601860248201527f446562742063616e206e6f7420676f2062656c6f7720302e00000000000000006044820152606401610ac8565b6000816012546137779190614337565b6012555050565b6060600061378d836002614318565b6137989060026142ec565b67ffffffffffffffff8111156137be57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156137e8576020820181803683370190505b509050600360fc1b8160008151811061381157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061386a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061388e846002614318565b6138999060016142ec565b90505b600181111561393a577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106138e857634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061390c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936139338161437a565b905061389c565b5083156125e65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ac8565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610ae25750610ae282613bc5565b6000816012546139d791906142ec565b9050600e54811115613a515760405162461bcd60e51b815260206004820152602260248201527f446562742063616e206e6f7420676f2061626f76652064656274206365696c6960448201527f6e670000000000000000000000000000000000000000000000000000000000006064820152608401610ac8565b60125550565b611147838383613c60565b60006001600160a01b0384163b15613bba57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613aa690339089908890889060040161429d565b602060405180830381600087803b158015613ac057600080fd5b505af1925050508015613af0575060408051601f3d908101601f19168201909252613aed9181019061411d565b60015b613ba0573d808015613b1e576040519150601f19603f3d011682016040523d82523d6000602084013e613b23565b606091505b508051613b985760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610ac8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612e55565b506001949350505050565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480613c2857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610ae257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610ae2565b6001600160a01b038316613cbb57613cb681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613cde565b816001600160a01b0316836001600160a01b031614613cde57613cde8382613d18565b6001600160a01b038216613cf55761114781613db5565b826001600160a01b0316826001600160a01b031614611147576111478282613e8e565b60006001613d258461164d565b613d2f9190614337565b600083815260076020526040902054909150808214613d82576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090613dc790600190614337565b60008381526009602052604081205460088054939450909284908110613dfd57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110613e2c57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480613e7257634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613e998361164d565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b80356001600160a01b0381168114613ee957600080fd5b919050565b805169ffffffffffffffffffff81168114613ee957600080fd5b600060208284031215613f19578081fd5b6125e682613ed2565b60008060408385031215613f34578081fd5b613f3d83613ed2565b9150613f4b60208401613ed2565b90509250929050565b600080600060608486031215613f68578081fd5b613f7184613ed2565b9250613f7f60208501613ed2565b9150604084013590509250925092565b60008060008060808587031215613fa4578081fd5b613fad85613ed2565b9350613fbb60208601613ed2565b925060408501359150606085013567ffffffffffffffff80821115613fde578283fd5b818701915087601f830112613ff1578283fd5b81358181111561400357614003614427565b604051601f8201601f19908116603f0116810190838211818310171561402b5761402b614427565b816040528281528a6020848701011115614043578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215614076578182fd5b61407f83613ed2565b915060208301358015158114614093578182fd5b809150509250929050565b600080604083850312156140b0578182fd5b6140b983613ed2565b946020939093013593505050565b6000602082840312156140d8578081fd5b5035919050565b600080604083850312156140f1578182fd5b82359150613f4b60208401613ed2565b600060208284031215614112578081fd5b81356125e68161443d565b60006020828403121561412e578081fd5b81516125e68161443d565b60006020828403121561414a578081fd5b5051919050565b60008060408385031215614163578182fd5b50508035926020909101359150565b600080600080600060a08688031215614189578283fd5b61419286613eee565b94506020860151935060408601519250606086015191506141b560808701613eee565b90509295509295909350565b600081518084526141d981602086016020860161434e565b601f01601f19169290920160200192915050565b600083516141ff81846020880161434e565b83519083019061421381836020880161434e565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161425481601785016020880161434e565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161429181602884016020880161434e565b01602801949350505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526142cf60808301846141c1565b9695505050505050565b6020815260006125e660208301846141c1565b600082198211156142ff576142ff6143fb565b500190565b60008261431357614313614411565b500490565b6000816000190483118215151615614332576143326143fb565b500290565b600082821015614349576143496143fb565b500390565b60005b83811015614369578181015183820152602001614351565b838111156122ed5750506000910152565b600081614389576143896143fb565b506000190190565b600181811c908216806143a557607f821691505b602082108114156143c657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156143e0576143e06143fb565b5060010190565b6000826143f6576143f6614411565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146115bf57600080fdfee1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9a2646970667358221220fe54c16188fbb2f2cb9782f284f9ba2776a03789d65a2f88a4286fcb547b716164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "borrowToken(uint256,uint256)": {
        "details": "Lets a vault owner borrow stablecoin against collateral Requirements: - Vault type must exist - Vault must exist - Must borrow greater than 0 stablecoin - Must be below the debt ceiling when borrowing - Must maintain minimum collateral percentage Emits BorrowToken event"
      },
      "buyRiskyVault(uint256)": {
        "details": "allows liquidator to buy out a risky vault Requirements: - Vault id must exist - Vault must be below minimum collateral percentage - User must have enough of the token to pay vault off Emits BuyRiskyVault event"
      },
      "changeTreasury(address)": {
        "details": "changes the Treasury. Can only every be one treasury!"
      },
      "createVault()": {
        "details": "Create a vault for interacting with the platform Emits a CreateVault event"
      },
      "depositCollateral(uint256)": {
        "details": "ALlows vault owner to deposit ERC20 collateral Emits Deposit Collateral event"
      },
      "destroyVault(uint256)": {
        "details": "User can destroy a vault. Will return all collateral upon destroying. Emits a DestroyVault event Requirements: - User must have paid off all outstanding debt first"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getPricePeg()": {
        "details": "returns the base token's address"
      },
      "getPriceSource()": {
        "details": "returns the base token's address"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "payBackToken(uint256,uint256)": {
        "details": "Pay back the stablecoin to reduce debt Requirements: - User must have enough balance to repay `amount` - Cannot pay back more than the required debt. `amount` must be less than debt."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setClosingFee(uint256)": {
        "details": "Set the closing fee for this vault"
      },
      "setDebtCeiling(uint256)": {
        "details": "Set the debt ceiling for this vault"
      },
      "setOpeningFee(uint256)": {
        "details": "Set the opening fee for this vault"
      },
      "setPriceSource(address)": {
        "details": "Set the price source for this vault"
      },
      "setStabilityPool(address)": {
        "details": "Set the stability pool (liquidator) for this vault"
      },
      "setTokenPeg(uint256)": {
        "details": "Set the price source for this vault"
      },
      "setTreasury(uint256)": {
        "details": "Set the treasury vault for this vault"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferVault(uint256,address)": {
        "details": "user can transfer vault to another address Emits TransferVault event"
      },
      "withdrawCollateral(uint256,uint256)": {
        "details": "allows vault owner to withdraw the collateral Requirements: - Withdraw amount is less than or equal to current collateral - Collateral withdrawal amount does not put debt below minimum collateral Emits WithdrawCollateral event"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "minimumCollateralPercentage()": {
        "notice": "Set all of these upon initalization"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1437,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1439,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1443,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1447,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1451,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1457,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2378,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2382,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2385,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2389,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 528,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_status",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 108,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_roles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)103_storage)"
      },
      {
        "astId": 3743,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "_userVaultIds",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)3082_storage"
      },
      {
        "astId": 3746,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "minimumCollateralPercentage",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3748,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "debtCeiling",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3750,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "closingFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3752,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "openingFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3754,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "tokenPeg",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3756,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "totalDebt",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3759,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "priceSource",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3767,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 3769,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "treasury",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3773,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "vaultExistence",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3777,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "vaultCollateral",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3781,
        "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
        "label": "vaultDebt",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)103_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)103_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3082_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3081,
            "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)103_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 100,
            "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 102,
            "contract": "apps/avai/src/contracts/Vaults/AvaxVault.sol:AVAXVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}