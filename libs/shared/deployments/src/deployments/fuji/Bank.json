{
  "address": "0x643c543c8b96Be140B081B4e8a7186590cA2e92a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BorrowToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebtRatio",
          "type": "uint256"
        }
      ],
      "name": "ChangeDebtRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newGainRatio",
          "type": "uint256"
        }
      ],
      "name": "ChangeGainRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "CreateVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "DestroyVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "GetPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenExtract",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closingFee",
          "type": "uint256"
        }
      ],
      "name": "LiquidateVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newClosingFee",
          "type": "uint256"
        }
      ],
      "name": "NewClosingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebtCeiling",
          "type": "uint256"
        }
      ],
      "name": "NewDebtCeiling",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGateway",
          "type": "address"
        }
      ],
      "name": "NewGateway",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimumDebt",
          "type": "uint256"
        }
      ],
      "name": "NewMinimumDebt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newOpeningFee",
          "type": "uint256"
        }
      ],
      "name": "NewOpeningFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPew",
          "type": "uint256"
        }
      ],
      "name": "NewPeg",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPriceSource",
          "type": "address"
        }
      ],
      "name": "NewPriceSource",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newStabilityPool",
          "type": "address"
        }
      ],
      "name": "NewStabilityPools",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTreasury",
          "type": "uint256"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closingFee",
          "type": "uint256"
        }
      ],
      "name": "PayBackToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TransferVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCollateral",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId_",
          "type": "uint256"
        }
      ],
      "name": "checkCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId_",
          "type": "uint256"
        }
      ],
      "name": "checkExtract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId_",
          "type": "uint256"
        }
      ],
      "name": "checkLiquidation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "destroyVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gainRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPaid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceSource",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumCollateralPercentage_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "priceSource_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID_",
          "type": "uint256"
        }
      ],
      "name": "liquidateVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumCollateralPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payBackToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceSource",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setClosingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debtCeiling_",
          "type": "uint256"
        }
      ],
      "name": "setDebtCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "debtRatio_",
          "type": "uint256"
        }
      ],
      "name": "setDebtRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gainRatio_",
          "type": "uint256"
        }
      ],
      "name": "setGainRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        }
      ],
      "name": "setGateway",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumDebt_",
          "type": "uint256"
        }
      ],
      "name": "setMinimumDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setOpeningFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceSource_",
          "type": "address"
        }
      ],
      "name": "setPriceSource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stabilityPool_",
          "type": "address"
        }
      ],
      "name": "setStabilityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenPeg_",
          "type": "uint256"
        }
      ],
      "name": "setTokenPeg",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treasury_",
          "type": "uint256"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stabilityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "vaultExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7bb73287645941e2cdd58af1c34db7ddb5b9554b8e1d7aa91d8d00c36adff83",
  "receipt": {
    "to": null,
    "from": "0x9F8A5B35f5508071cf2304A670EAB0803F3737aa",
    "contractAddress": "0x643c543c8b96Be140B081B4e8a7186590cA2e92a",
    "transactionIndex": 0,
    "gasUsed": "4929330",
    "logsBloom": "0x
    "blockHash": "0xd54d364205d1576dddc259c7b037e0b0d8e26eea9ec0b5b64d009cc64369fd26",
    "transactionHash": "0xb7bb73287645941e2cdd58af1c34db7ddb5b9554b8e1d7aa91d8d00c36adff83",
    "logs": [],
    "blockNumber": 2027695,
    "cumulativeGasUsed": "4929330",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1929579cd2dd3c4681180c6abfe821ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BorrowToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtRatio\",\"type\":\"uint256\"}],\"name\":\"ChangeDebtRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGainRatio\",\"type\":\"uint256\"}],\"name\":\"ChangeGainRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreateVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"DestroyVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GetPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenExtract\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"LiquidateVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newClosingFee\",\"type\":\"uint256\"}],\"name\":\"NewClosingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"NewDebtCeiling\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGateway\",\"type\":\"address\"}],\"name\":\"NewGateway\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimumDebt\",\"type\":\"uint256\"}],\"name\":\"NewMinimumDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOpeningFee\",\"type\":\"uint256\"}],\"name\":\"NewOpeningFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPew\",\"type\":\"uint256\"}],\"name\":\"NewPeg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPriceSource\",\"type\":\"address\"}],\"name\":\"NewPriceSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStabilityPool\",\"type\":\"address\"}],\"name\":\"NewStabilityPools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTreasury\",\"type\":\"uint256\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"PayBackToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId_\",\"type\":\"uint256\"}],\"name\":\"checkCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId_\",\"type\":\"uint256\"}],\"name\":\"checkExtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId_\",\"type\":\"uint256\"}],\"name\":\"checkLiquidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"destroyVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gainRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPaid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceSource\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumCollateralPercentage_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceSource_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID_\",\"type\":\"uint256\"}],\"name\":\"liquidateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCollateralPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payBackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceSource\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setClosingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtCeiling_\",\"type\":\"uint256\"}],\"name\":\"setDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtRatio_\",\"type\":\"uint256\"}],\"name\":\"setDebtRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gainRatio_\",\"type\":\"uint256\"}],\"name\":\"setGainRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"}],\"name\":\"setGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumDebt_\",\"type\":\"uint256\"}],\"name\":\"setMinimumDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setOpeningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceSource_\",\"type\":\"address\"}],\"name\":\"setPriceSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stabilityPool_\",\"type\":\"address\"}],\"name\":\"setStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPeg_\",\"type\":\"uint256\"}],\"name\":\"setTokenPeg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasury_\",\"type\":\"uint256\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"vaultExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"borrowToken(uint256,uint256)\":{\"details\":\"Lets a vault owner borrow stablecoin against collateral Requirements: - Vault type must exist - Vault must exist - Must borrow greater than 0 stablecoin - Must be below the debt ceiling when borrowing - Must maintain minimum collateral percentage Emits BorrowToken event\"},\"checkCost(uint256)\":{\"details\":\"checks cost of liquidating\"},\"checkExtract(uint256)\":{\"details\":\"checks how much token gets extract\"},\"checkLiquidation(uint256)\":{\"details\":\"checks if the vault can be liquidated\"},\"createVault()\":{\"details\":\"Create a vault for interacting with the platform Emits a CreateVault event\"},\"depositCollateral(uint256,uint256)\":{\"details\":\"ALlows vault owner to deposit ERC20 collateral Emits Deposit Collateral event\"},\"destroyVault(uint256)\":{\"details\":\"User can destroy a vault. Will return all collateral upon destroying. Emits a DestroyVault event Requirements: - User must have paid off all outstanding debt first\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getPaid(address)\":{\"details\":\"pays the user Returns the ERC20 token that was liquidated\"},\"getPricePeg()\":{\"details\":\"returns the peg \"},\"getPriceSource()\":{\"details\":\"returns the chainlink pricefeed price\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"liquidateVault(uint256)\":{\"details\":\"allows liquidator to buy out a risky vault Requirements: - Vault id must exist - Vault must be below minimum collateral percentage - User must have enough of the token to pay vault off Emits BuyRiskyVault event\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"payBackToken(uint256,uint256)\":{\"details\":\"Pay back the stablecoin to reduce debt Requirements: - User must have enough balance to repay `amount` - Cannot pay back more than the required debt. `amount` must be less than debt.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setClosingFee(uint256)\":{\"details\":\"Set the closing fee for this vault\"},\"setDebtCeiling(uint256)\":{\"details\":\"Set the debt ceiling for this vault\"},\"setDebtRatio(uint256)\":{\"details\":\"sets the debt ratio\"},\"setGainRatio(uint256)\":{\"details\":\"sets the gain ratio\"},\"setGateway(address)\":{\"details\":\"Set the WAVAX gateway for this vault if it needs one\"},\"setMinimumDebt(uint256)\":{\"details\":\"sets the minimum debt\"},\"setOpeningFee(uint256)\":{\"details\":\"Set the opening fee for this vault\"},\"setPriceSource(address)\":{\"details\":\"Set the price source for this vault\"},\"setStabilityPool(address)\":{\"details\":\"Set the stability pool (liquidator) for this vault\"},\"setTokenPeg(uint256)\":{\"details\":\"Set the token peg for this vault\"},\"setTreasury(uint256)\":{\"details\":\"Set the treasury vault for this vault (vault that gets all the fees)\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferVault(uint256,address)\":{\"details\":\"user can transfer vault to another address Emits TransferVault event\"},\"vaultExists(uint256)\":{\"details\":\"allows checking if vault exists or not\"},\"withdrawCollateral(uint256,uint256)\":{\"details\":\"allows vault owner to withdraw the collateral Requirements: - Withdraw amount is less than or equal to current collateral - Collateral withdrawal amount does not put debt below minimum collateral Emits WithdrawCollateral event\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"minimumCollateralPercentage()\":{\"notice\":\"Set all of these upon initalization\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"apps/avai/src/contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x56f89378fca44345fe8de632c70311052c39d64a7a710513316676d343380e68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal initializer {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x3b68fc053bbad44644adcdddff840106591364bbc0879aac5505756b67fab974\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x54b0a0b80c447749f769f37fec206cdee23e7466511802191248e95c8250ff9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6dd43e44dbaad99d1863be7f2837085f361efdcb1fde5a9bf84c4efa07f89ed3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"apps/avai/src/contracts/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport './interfaces/IStablecoin.sol';\\n\\ncontract Bank is\\n  Initializable,\\n  ERC721Upgradeable,\\n  ERC721EnumerableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  AccessControlUpgradeable\\n{\\n  bytes32 public constant TREASURY_ROLE = keccak256('TREASURY_ROLE');\\n  using SafeERC20 for IERC20;\\n  using SafeERC20 for IStablecoin;\\n  using CountersUpgradeable for CountersUpgradeable.Counter;\\n  CountersUpgradeable.Counter private _userVaultIds;\\n  /**\\n   * Set all of these upon initalization\\n   */\\n  uint256 public minimumCollateralPercentage;\\n  uint256 public debtCeiling;\\n  uint256 public closingFee;\\n  uint256 public openingFee;\\n  uint256 public tokenPeg;\\n  uint256 public totalDebt;\\n  // For liquidation\\n  uint256 public debtRatio;\\n  uint256 public gainRatio;\\n  mapping(address => uint256) public tokenDebt;\\n\\n  // Chainlink price source\\n  AggregatorV3Interface public priceSource;\\n  // Token used as collateral\\n  IERC20 public token;\\n  // Token used as debt\\n  IStablecoin internal stablecoin;\\n\\n  // Address that corresponds to liquidater\\n  address public stabilityPool;\\n  // address that corresponds to gateway, if there is one\\n  address public gateway;\\n  // Vault that corresponds to the treasury\\n  uint256 public treasury;\\n\\n  // Vault information\\n  mapping(uint256 => bool) private vaultExistence;\\n  mapping(uint256 => uint256) public vaultCollateral;\\n  mapping(uint256 => uint256) public vaultDebt;\\n\\n  // Minimum debt\\n  uint256 public minimumDebt;\\n\\n  // Events for general vault operations\\n  event CreateVault(uint256 vaultID, address creator);\\n  event DestroyVault(uint256 vaultID);\\n  event TransferVault(uint256 vaultID, address from, address to);\\n\\n  // Buying out a vault event\\n  event LiquidateVault(\\n    uint256 vaultID,\\n    address owner,\\n    address buyer,\\n    uint256 amountPaid,\\n    uint256 tokenExtract,\\n    uint256 closingFee\\n  );\\n\\n  // Events for collateral operations\\n  event DepositCollateral(uint256 vaultID, uint256 amount);\\n  event WithdrawCollateral(uint256 vaultID, uint256 amount);\\n\\n  // Events for token operations\\n  event BorrowToken(uint256 vaultID, uint256 amount);\\n  event PayBackToken(uint256 vaultID, uint256 amount, uint256 closingFee);\\n\\n  // Bank Operations\\n  event GetPaid(uint256 amount, address user);\\n  event ChangeGainRatio(uint256 newGainRatio);\\n  event ChangeDebtRatio(uint256 newDebtRatio);\\n  event NewPeg(uint256 newPew);\\n  event NewDebtCeiling(uint256 newDebtCeiling);\\n  event NewClosingFee(uint256 newClosingFee);\\n  event NewOpeningFee(uint256 newOpeningFee);\\n  event NewMinimumDebt(uint256 newMinimumDebt);\\n  event NewGateway(address newGateway);\\n  event NewStabilityPools(address newStabilityPool);\\n  event NewPriceSource(address newPriceSource);\\n  event NewTreasury(uint256 newTreasury);\\n\\n  // Lets begin!\\n  function initialize(\\n    uint256 minimumCollateralPercentage_,\\n    address priceSource_,\\n    string memory name_,\\n    string memory symbol_,\\n    address token_\\n  ) public initializer {\\n    // Initializations\\n    __Context_init_unchained();\\n    __ERC165_init_unchained();\\n    __ERC721_init_unchained(name_, symbol_);\\n    __ERC721Enumerable_init_unchained();\\n    __ReentrancyGuard_init_unchained();\\n    __AccessControl_init_unchained();\\n    assert(priceSource_ != address(0));\\n    assert(minimumCollateralPercentage_ >= 100);\\n    //Initial settings!\\n    debtCeiling = 10e18; // 10 dollars\\n    closingFee = 75; // 0.75%\\n    openingFee = 0; // 0.0%\\n    tokenPeg = 1e8; // $1\\n    debtRatio = 2; // 50%\\n    gainRatio = 11; // /10 so 1.1, or 10%\\n    // Initially, will deploy later\\n    stabilityPool = address(0);\\n    gateway = address(0);\\n    priceSource = AggregatorV3Interface(priceSource_);\\n\\n    token = IERC20(token_);\\n    stablecoin = IStablecoin(msg.sender);\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(TREASURY_ROLE, msg.sender);\\n    _setRoleAdmin(TREASURY_ROLE, TREASURY_ROLE);\\n\\n    minimumCollateralPercentage = minimumCollateralPercentage_;\\n  }\\n\\n  /**\\n   * @dev Only vault owner can do anything with this modifier\\n   */\\n  modifier onlyVaultOwner(uint256 vaultID) {\\n    require(vaultExistence[vaultID], 'Vault does not exist');\\n    // Either owner of vault or gateway for AVAX.\\n    require(\\n      ownerOf(vaultID) == msg.sender || msg.sender == gateway,\\n      'Vault is not owned by you'\\n    );\\n    _;\\n  }\\n  /**\\n   * @dev Only liquidater can do anything with this modifier (if address === 0, then all users can liquidate)\\n   */\\n  modifier onlyLiquidater() {\\n    require(\\n      stabilityPool == address(0) || msg.sender == stabilityPool,\\n      'buyRiskyVault disabled for public'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Only gateway allowed, or user if its not WAVAX.\\n   */\\n  modifier onlyUser(address user) {\\n    require(\\n      msg.sender == user || msg.sender == gateway,\\n      'Cannot get paid if not yours'\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev allows checking if vault exists or not\\n   */\\n  function vaultExists(uint256 vaultID) public view returns (bool) {\\n    return vaultExistence[vaultID];\\n  }\\n\\n  /**\\n   * @dev sets the gain ratio\\n   */\\n  function setGainRatio(uint256 gainRatio_) external onlyRole(TREASURY_ROLE) {\\n    require(\\n      ((1000 * gainRatio_) / debtRatio) * (10000 + closingFee) < 10000**2\\n    );\\n    gainRatio = gainRatio_;\\n    emit ChangeGainRatio(gainRatio_);\\n  }\\n\\n  /**\\n   * @dev sets the debt ratio\\n   */\\n  function setDebtRatio(uint256 debtRatio_) external onlyRole(TREASURY_ROLE) {\\n    require(\\n      ((1000 * gainRatio) / debtRatio_) * (10000 + closingFee) < 10000**2\\n    );\\n    debtRatio = debtRatio_;\\n    emit ChangeDebtRatio(debtRatio_);\\n  }\\n\\n  /**\\n   * @dev sets the minimum debt\\n   */\\n  function setMinimumDebt(uint256 minimumDebt_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(minimumDebt_ > 0, 'Minimum debt cannot be zero');\\n    require(\\n      minimumDebt < debtCeiling,\\n      'Minimum debt cannot be greater than debt ceiling'\\n    );\\n    minimumDebt = minimumDebt_;\\n    emit NewMinimumDebt(minimumDebt);\\n  }\\n\\n  /**\\n   * @dev Set the debt ceiling for this vault\\n   */\\n  function setDebtCeiling(uint256 debtCeiling_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(\\n      debtCeiling <= debtCeiling_,\\n      'setCeiling: Must be over the amount of current debt ceiling.'\\n    );\\n    debtCeiling = debtCeiling_;\\n    emit NewDebtCeiling(debtCeiling_);\\n  }\\n\\n  /**\\n   * @dev Set the price source for this vault\\n   */\\n  function setPriceSource(address priceSource_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(priceSource_ != address(0), 'Price source cannot be zero address');\\n    priceSource = AggregatorV3Interface(priceSource_);\\n    emit NewPriceSource(priceSource_);\\n  }\\n\\n  /**\\n   * @dev Set the token peg for this vault\\n   */\\n  function setTokenPeg(uint256 tokenPeg_) external onlyRole(TREASURY_ROLE) {\\n    require(tokenPeg_ > 0, 'Peg cannot be zero');\\n    tokenPeg = tokenPeg_;\\n    emit NewPeg(tokenPeg_);\\n  }\\n\\n  /**\\n   * @dev Set the stability pool (liquidator) for this vault\\n   */\\n  function setStabilityPool(address stabilityPool_)\\n    external\\n    onlyRole(TREASURY_ROLE)\\n  {\\n    require(\\n      stabilityPool_ != address(0),\\n      'Stability pool cannot be zero address'\\n    );\\n    require(\\n      Address.isContract(stabilityPool_),\\n      'Must be a contract to be the stability pool.'\\n    );\\n    stabilityPool = stabilityPool_;\\n    emit NewStabilityPools(stabilityPool_);\\n  }\\n\\n  /**\\n   * @dev Set the WAVAX gateway for this vault if it needs one\\n   */\\n  function setGateway(address gateway_) external onlyRole(TREASURY_ROLE) {\\n    require(gateway_ != address(0), 'Gateway cannot be zero address');\\n    require(\\n      Address.isContract(gateway_),\\n      'Must be a contract to be the gateway.'\\n    );\\n    gateway = gateway_;\\n    emit NewGateway(gateway_);\\n  }\\n\\n  /**\\n   * @dev Set the closing fee for this vault\\n   */\\n  function setClosingFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\\n    require(amount <= 250, 'Closing fee cannot be above 1%');\\n    require(((1000 * gainRatio) / debtRatio) * (10000 + amount) < 10000**2);\\n    closingFee = amount;\\n    emit NewClosingFee(amount);\\n  }\\n\\n  /**\\n   * @dev Set the opening fee for this vault\\n   */\\n  function setOpeningFee(uint256 amount) external onlyRole(TREASURY_ROLE) {\\n    openingFee = amount;\\n    emit NewOpeningFee(amount);\\n  }\\n\\n  /**\\n   * @dev Set the treasury vault for this vault (vault that gets all the fees)\\n   */\\n  function setTreasury(uint256 treasury_) external onlyRole(TREASURY_ROLE) {\\n    require(vaultExistence[treasury_], 'Vault does not exist');\\n    treasury = treasury_;\\n  }\\n\\n  /**\\n    @dev returns the chainlink pricefeed price\\n  */\\n  function getPriceSource() public view returns (uint256) {\\n    // And get the latest round data\\n    (, int256 price, , , ) = priceSource.latestRoundData();\\n    require(price >= 0, 'Chainlink returned a negative price');\\n\\n    return uint256(price);\\n  }\\n\\n  /**\\n    @dev returns the peg \\n  */\\n  function getPricePeg() public view returns (uint256) {\\n    return tokenPeg;\\n  }\\n\\n  /**\\n   * @dev returns the current debt and collateral\\n   *\\n   * Requirements:\\n   *\\n   * - Token price cannot be zero\\n   * - PEG (i.e. usdc) price cannot be zero\\n   */\\n  function calculateCollateralProperties(uint256 collateral, uint256 debt)\\n    internal\\n    view\\n    returns (uint256, uint256)\\n  {\\n    require(getPriceSource() != 0, 'Price must be above 0');\\n    require(getPricePeg() != 0, 'Peg must be above 0');\\n\\n    // Value of collateral on avalanche network\\n    uint256 collateralValue = collateral * getPriceSource();\\n\\n    // Get the current debt in our token (i.e. usdc)\\n    uint256 debtValue = debt * getPricePeg();\\n\\n    // Multiple collateral by 100\\n    uint256 collateralValueTimes100 = collateralValue * 100;\\n\\n    return (collateralValueTimes100, debtValue);\\n  }\\n\\n  /**\\n   * @dev Checks if the current collateral is valid\\n   */\\n  function isValidCollateral(uint256 collateral, uint256 debt)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    (\\n      uint256 collateralValueTimes100,\\n      uint256 debtValue\\n    ) = calculateCollateralProperties(collateral, debt);\\n\\n    require(debtValue > 0, 'Debt must be greater than zero');\\n    // Get current ratio of debt\\n    uint256 collateralPercentage = collateralValueTimes100 / debtValue;\\n\\n    // and check if it's above 150%\\n    return collateralPercentage >= minimumCollateralPercentage;\\n  }\\n\\n  /**\\n   * @dev Create a vault for interacting with the platform\\n   *\\n   * Emits a CreateVault event\\n   */\\n  function createVault() external {\\n    // Increment ID\\n    _userVaultIds.increment();\\n    // Assign ID to vault\\n    uint256 newVaultId = _userVaultIds.current();\\n\\n    vaultExistence[newVaultId] = true;\\n\\n    emit CreateVault(newVaultId, msg.sender);\\n    // mint erc721 vault (vaultId)\\n    _mint(msg.sender, newVaultId);\\n  }\\n\\n  function vaultCounts() external view returns (uint256) {\\n    return _userVaultIds.current();\\n  }\\n\\n  /**\\n   * @dev User can destroy a vault. Will return all collateral upon destroying.\\n   *\\n   * Emits a DestroyVault event\\n   *\\n   * Requirements:\\n   *\\n   * - User must have paid off all outstanding debt first\\n   */\\n  function destroyVault(uint256 vaultID)\\n    external\\n    virtual\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(vaultDebt[vaultID] == 0, 'Vault as outstanding debt');\\n\\n    uint256 collateral = vaultCollateral[vaultID];\\n\\n    _burn(vaultID);\\n    delete vaultExistence[vaultID];\\n    delete vaultCollateral[vaultID];\\n    delete vaultDebt[vaultID];\\n\\n    if (collateral != 0) {\\n      token.safeTransfer(msg.sender, collateral);\\n    }\\n\\n    emit DestroyVault(vaultID);\\n  }\\n\\n  /**\\n   * @dev user can transfer vault to another address\\n   *\\n   * Emits TransferVault event\\n   */\\n  function transferVault(uint256 vaultID, address to)\\n    external\\n    onlyVaultOwner(vaultID)\\n  {\\n    // burn erc721 (vaultId)\\n    _burn(vaultID);\\n    // mint erc721 (vaultId)\\n    _mint(to, vaultID);\\n\\n    emit TransferVault(vaultID, msg.sender, to);\\n  }\\n\\n  /**\\n   * @dev ALlows vault owner to deposit ERC20 collateral\\n   *\\n   * Emits Deposit Collateral event\\n   *\\n   */\\n  function depositCollateral(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n  {\\n    token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n    uint256 newCollateral = vaultCollateral[vaultID] + amount;\\n\\n    assert(newCollateral >= vaultCollateral[vaultID]);\\n\\n    vaultCollateral[vaultID] = newCollateral;\\n\\n    emit DepositCollateral(vaultID, amount);\\n  }\\n\\n  /**\\n   * @dev Lets a vault owner borrow stablecoin against collateral\\n   *\\n   * Requirements:\\n   * - Vault type must exist\\n   * - Vault must exist\\n   * - Must borrow greater than 0 stablecoin\\n   * - Must be below the debt ceiling when borrowing\\n   * - Must maintain minimum collateral percentage\\n   *\\n   * Emits BorrowToken event\\n   */\\n  function borrowToken(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(amount > 0, 'Must borrow non-zero amount');\\n    require(\\n      totalDebt + amount <= debtCeiling,\\n      'Cannot mint over debt ceiling.'\\n    );\\n\\n    uint256 newDebt = vaultDebt[vaultID] + amount;\\n    assert(newDebt > vaultDebt[vaultID]);\\n\\n    require(\\n      isValidCollateral(vaultCollateral[vaultID], newDebt),\\n      'Borrow would put vault below minimum collateral percentage'\\n    );\\n\\n    require(\\n      newDebt > minimumDebt,\\n      'Borrow needs to be larger than the minimum debt'\\n    );\\n\\n    // Mint stable coin for the user\\n    _addVaultDebt(vaultID, amount);\\n    // Should have minter role\\n    stablecoin.mint(msg.sender, amount);\\n    emit BorrowToken(vaultID, amount);\\n  }\\n\\n  /**\\n   * @dev allows vault owner to withdraw the collateral\\n   *\\n   * Requirements:\\n   * - Withdraw amount is less than or equal to current collateral\\n   * - Collateral withdrawal amount does not put debt below minimum collateral\\n   *\\n   * Emits WithdrawCollateral event\\n   */\\n  function withdrawCollateral(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(\\n      vaultCollateral[vaultID] >= amount,\\n      'Vault does not have enough collateral'\\n    );\\n\\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\\n\\n    if (vaultDebt[vaultID] != 0) {\\n      require(\\n        isValidCollateral(newCollateral, vaultDebt[vaultID]),\\n        'Withdrawal would put vault below minimum collateral percentage'\\n      );\\n    }\\n\\n    vaultCollateral[vaultID] = newCollateral;\\n\\n    token.safeTransfer(msg.sender, amount);\\n\\n    emit WithdrawCollateral(vaultID, amount);\\n  }\\n\\n  /**\\n   * @dev Pay back the stablecoin to reduce debt\\n   *\\n   * Requirements:\\n   * - User must have enough balance to repay `amount`\\n   * - Cannot pay back more than the required debt. `amount` must be less than debt.\\n   */\\n  function payBackToken(uint256 vaultID, uint256 amount)\\n    external\\n    onlyVaultOwner(vaultID)\\n    nonReentrant\\n  {\\n    require(\\n      stablecoin.balanceOf(msg.sender) >= amount,\\n      'Token balance too low'\\n    );\\n    require(\\n      vaultDebt[vaultID] >= amount,\\n      'Vault debt less than amount to pay back'\\n    );\\n\\n    // Closing fee calculation\\n    uint256 _closingFee = ((amount * closingFee) * getPricePeg()) /\\n      (getPriceSource() * 10000);\\n\\n    _subVaultDebt(vaultID, amount);\\n    _subVaultCollateral(vaultID, _closingFee);\\n    _addVaultCollateralTreasury(_closingFee);\\n\\n    // Burns the stablecoin\\n    stablecoin.burn(msg.sender, amount);\\n\\n    emit PayBackToken(vaultID, amount, _closingFee);\\n  }\\n\\n  /*************\\n   * Liquidation functions\\n   ************** */\\n\\n  /**\\n   * @dev pays the user\\n   * Returns the ERC20 token that was liquidated\\n   */\\n  function getPaid(address user) external nonReentrant onlyUser(user) {\\n    require(tokenDebt[user] != 0, 'No liquidations associated with account.');\\n    uint256 amount = tokenDebt[user];\\n    // Set first in case nonReentrant fails somehow\\n    tokenDebt[user] = 0;\\n    token.safeTransfer(msg.sender, amount);\\n    emit GetPaid(amount, msg.sender);\\n  }\\n\\n  /**\\n   * @dev checks if the vault can be liquidated\\n   */\\n  function checkLiquidation(uint256 vaultId_) external view returns (bool) {\\n    require(vaultExistence[vaultId_], 'Vault must exist');\\n    (\\n      uint256 collateralValueTimes100,\\n      uint256 debtValue\\n    ) = calculateCollateralProperties(\\n        vaultCollateral[vaultId_],\\n        vaultDebt[vaultId_]\\n      );\\n\\n    require(debtValue > 0, 'Cannot have zero debt');\\n\\n    uint256 collateralPercentage = collateralValueTimes100 / debtValue;\\n\\n    if (collateralPercentage < minimumCollateralPercentage) {\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   * @dev checks cost of liquidating\\n   */\\n  function checkCost(uint256 vaultId_) public view returns (uint256) {\\n    require(vaultExistence[vaultId_], 'Vault must exist');\\n    (, uint256 debtValue) = calculateCollateralProperties(\\n      vaultCollateral[vaultId_],\\n      vaultDebt[vaultId_]\\n    );\\n\\n    debtValue = debtValue / tokenPeg;\\n\\n    return debtValue / debtRatio;\\n  }\\n\\n  /**\\n   * @dev checks how much token gets extract\\n   */\\n  function checkExtract(uint256 vaultId_) public view returns (uint256) {\\n    require(vaultExistence[vaultId_], 'Vault must exist');\\n    (, uint256 debtValue) = calculateCollateralProperties(\\n      vaultCollateral[vaultId_],\\n      vaultDebt[vaultId_]\\n    );\\n\\n    uint256 tokenExtract = (debtValue * gainRatio) /\\n      (10 * getPriceSource() * debtRatio);\\n\\n    return tokenExtract;\\n  }\\n\\n  /**\\n   * @dev allows liquidator to buy out a risky vault\\n   *\\n   * Requirements:\\n   * - Vault id must exist\\n   * - Vault must be below minimum collateral percentage\\n   * - User must have enough of the token to pay vault off\\n   *\\n   * Emits BuyRiskyVault event\\n   */\\n  function liquidateVault(uint256 vaultID_)\\n    external\\n    onlyLiquidater\\n    nonReentrant\\n  {\\n    require(vaultExistence[vaultID_], 'Vault does not exist');\\n    (\\n      uint256 collateralValueTimes100,\\n      uint256 debtValue\\n    ) = calculateCollateralProperties(\\n        vaultCollateral[vaultID_],\\n        vaultDebt[vaultID_]\\n      );\\n\\n    // Make sure user has debt\\n    require(debtValue > 0, 'Vault has no debt');\\n\\n    uint256 collateralPercentage = collateralValueTimes100 / debtValue;\\n\\n    require(\\n      collateralPercentage < minimumCollateralPercentage,\\n      'Vault is not below minimum collateral percentage'\\n    );\\n\\n    uint256 tokenExtract = checkExtract(vaultID_);\\n    uint256 halfDebt = checkCost(vaultID_);\\n    require(\\n      stablecoin.balanceOf(msg.sender) >= halfDebt,\\n      'Token balance too low to pay off outstanding debt'\\n    );\\n\\n    stablecoin.burn(msg.sender, halfDebt);\\n\\n    vaultDebt[vaultID_] -= halfDebt;\\n\\n    uint256 _closingFee = (halfDebt * closingFee * getPricePeg()) /\\n      (getPriceSource() * 10000);\\n\\n    vaultCollateral[vaultID_] -= (_closingFee + tokenExtract);\\n    vaultCollateral[treasury] += _closingFee;\\n\\n    tokenDebt[msg.sender] += tokenExtract;\\n\\n    _subFromTotalDebt(halfDebt);\\n\\n    emit LiquidateVault(\\n      vaultID_,\\n      ownerOf(vaultID_),\\n      msg.sender,\\n      halfDebt,\\n      tokenExtract,\\n      _closingFee\\n    );\\n  }\\n\\n  /**\\n   * @dev Adds to the vault collateral\\n   *\\n   */\\n  function _addVaultCollateralTreasury(uint256 amount) internal {\\n    uint256 newCollateral = vaultCollateral[treasury] + amount;\\n    assert(newCollateral >= vaultCollateral[treasury]);\\n\\n    // Adjust and save it\\n    vaultCollateral[treasury] = newCollateral;\\n  }\\n\\n  /**\\n   * @dev subtracts from the vault collateral\\n   *\\n   * Requirements:\\n   * - Must be less than or equal to current collateral\\n   */\\n\\n  function _subVaultCollateral(uint256 vaultID, uint256 amount) internal {\\n    require(\\n      amount <= vaultCollateral[vaultID],\\n      'Cannot remove more than the deposited collateral'\\n    );\\n    uint256 newCollateral = vaultCollateral[vaultID] - amount;\\n\\n    assert(newCollateral <= vaultCollateral[vaultID]);\\n\\n    // Adjust and save it\\n    vaultCollateral[vaultID] = newCollateral;\\n  }\\n\\n  /**\\n   * @dev Adds debt to the vault\\n   *\\n   * Requirements:\\n   * - new user debt cannot be above debt ceiling\\n   */\\n  function _addVaultDebt(uint256 vaultID, uint256 amount) internal {\\n    uint256 newTotalDebt = amount + totalDebt;\\n\\n    assert(newTotalDebt >= totalDebt);\\n    require(\\n      newTotalDebt <= debtCeiling,\\n      'Cannot exceed debt ceiling for this vault'\\n    );\\n\\n    uint256 userNewDebt = amount + vaultDebt[vaultID];\\n    assert(userNewDebt >= vaultDebt[vaultID]);\\n\\n    _addToTotalDebt(amount);\\n\\n    vaultDebt[vaultID] = userNewDebt;\\n  }\\n\\n  /**\\n   * @dev Subs debt to the vault\\n   *\\n   * Requirements:\\n   * - user cannot remove more than total debt\\n   * - user cannot remove more than their total debt\\n   */\\n  function _subVaultDebt(uint256 vaultID, uint256 amount) internal {\\n    require(totalDebt >= amount, 'Cannot get rid of more debt than exists.');\\n\\n    require(\\n      vaultDebt[vaultID] >= amount,\\n      'Cannot get rid of more debt than user has'\\n    );\\n\\n    uint256 newTotalDebt = totalDebt - amount;\\n    assert(newTotalDebt <= totalDebt);\\n\\n    uint256 userNewDebt = vaultDebt[vaultID] - amount;\\n    assert(userNewDebt <= vaultDebt[vaultID]);\\n\\n    _subFromTotalDebt(amount);\\n    vaultDebt[vaultID] = userNewDebt;\\n  }\\n\\n  /**\\n   * @dev Adds debt to the vault\\n   *\\n   * Requirements:\\n   * - new user debt cannot be above debt ceiling\\n   */\\n  function _addToTotalDebt(uint256 amount) internal {\\n    uint256 newDebt = totalDebt + amount;\\n    require(newDebt <= debtCeiling, 'Debt can not go above debt ceiling');\\n\\n    totalDebt = newDebt;\\n  }\\n\\n  /**\\n   * @dev Subtract from the total debt of this vault type\\n   */\\n  function _subFromTotalDebt(uint256 amount) internal {\\n    require(amount <= totalDebt, 'Debt can not go below 0.');\\n    uint256 newDebt = totalDebt - amount;\\n\\n    totalDebt = newDebt;\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal pure override {\\n    revert('transfer: disabled');\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(\\n      ERC721Upgradeable,\\n      ERC721EnumerableUpgradeable,\\n      AccessControlUpgradeable\\n    )\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0x0df0806043e8d41dc56b9ddb2d55e4223549a5f845657cbfd7eda51025243159\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/interfaces/IStablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStablecoin is IERC20 {\\n  function burn(address from, uint256 amount) external;\\n\\n  function mint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5cefe2dcfb64d8d8f1b16dfb3cc13b6fcc7754b268440daeefc461a7bff8fb77\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061586c80620000216000396000f3fe608060405234801561001057600080fd5b506004361061043c5760003560e01c8063728bbbb511610235578063bda5310711610135578063d547741f116100c8578063eb6a887d11610097578063fc0c546a1161007c578063fc0c546a14610955578063fc7b9c1814610969578063ffc73da71461097357600080fd5b8063eb6a887d1461092f578063ece137321461094257600080fd5b8063d547741f146108b2578063dcd68128146108c5578063e1c84ea4146108e9578063e985e9c5146108f357600080fd5b8063cea55f5711610104578063cea55f5714610851578063d11a57ec1461085b578063d310f49b14610870578063d4a9b2c51461089157600080fd5b8063bda5310714610817578063c87b56dd1461082a578063c91ee83d1461083d578063cdfedd631461084757600080fd5b806391d14854116101c8578063a217fddf11610197578063b1511cc91161017c578063b1511cc9146107de578063b86f6aef146107f1578063b88d4fde1461080457600080fd5b8063a217fddf146107c3578063a22cb465146107cb57600080fd5b806391d148541461076657806395d89b411461079f57806398d721e0146107a75780639fc30f1c146107ba57600080fd5b806385e290a31161020457806385e290a31461071a578063863759941461072d57806390646b4a1461074057806390cf0bba1461075357600080fd5b8063728bbbb5146106c95780637558abc8146106d3578063767a7b05146106f457806385af3c161461070757600080fd5b80632f2ff15d1161034057806344382f0f116102d357806361d027b3116102a257806363b8817c1161028757806363b8817c1461069057806370a08231146106a35780637139c929146106b657600080fd5b806361d027b3146106735780636352211e1461067d57600080fd5b806344382f0f1461063d5780634f6ccce71461064557806356572ac0146106585780635d12928b1461066b57600080fd5b80633db991771161030f5780633db99177146105f15780633e61facd1461060457806341a5068f1461061757806342842e0e1461062a57600080fd5b80632f2ff15d146105ae5780632f745c59146105c1578063311f392a146105d457806336568abe146105de57600080fd5b80630a998f53116103d35780631c883e7b116103a257806323b872dd1161038757806323b872dd1461056e578063248a9ca3146105815780632935d2bc146105a457600080fd5b80631c883e7b1461055057806320531bc91461055a57600080fd5b80630a998f531461050e578063116191b61461052157806311b4a8321461053557806318160ddd1461054857600080fd5b806306fdde031161040f57806306fdde03146104c0578063081812fc146104d557806308ec5927146104e8578063095ea7b3146104fb57600080fd5b806301e49d0a1461044157806301ffc9a714610456578063048c661d1461047e578063048de381146104aa575b600080fd5b61045461044f3660046153e0565b610986565b005b61046961046436600461541a565b610a32565b60405190151581526020015b60405180910390f35b61013a54610492906001600160a01b031681565b6040516001600160a01b039091168152602001610475565b6104b2610a43565b604051908152602001610475565b6104c8610b4f565b604051610475919061568e565b6104926104e33660046153e0565b610be1565b6104546104f63660046154f6565b610c76565b61045461050936600461539b565b611066565b61045461051c3660046153e0565b611198565b61013b54610492906001600160a01b031681565b6104b26105433660046153e0565b6112b2565b6099546104b2565b6104b26101305481565b61013754610492906001600160a01b031681565b61045461057c3660046152b1565b611354565b6104b261058f3660046153e0565b600090815260fb602052604090206001015490565b6104b261012e5481565b6104546105bc3660046153f8565b6113db565b6104b26105cf36600461539b565b611401565b6104b26101355481565b6104546105ec3660046153f8565b6114a9565b6104546105ff3660046153e0565b611535565b6104546106123660046153f8565b611618565b61045461062536600461546a565b611745565b6104546106383660046152b1565b611934565b6104b261194f565b6104b26106533660046153e0565b611960565b6104b26106663660046153e0565b611a12565b610454611ad0565b6104b261013c5481565b61049261068b3660046153e0565b611b61565b61045461069e366004615265565b611bec565b6104b26106b1366004615265565b611db3565b6104546106c43660046153e0565b611e4d565b6104b26101315481565b6104b26106e1366004615265565b6101366020526000908152604090205481565b6104546107023660046154f6565b611ec3565b6104546107153660046154f6565b61218e565b6104546107283660046153e0565b612502565b61045461073b3660046153e0565b61271a565b61045461074e366004615265565b612769565b6104546107613660046153e0565b61289b565b6104696107743660046153f8565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6104c8612db1565b6104546107b5366004615265565b612dc0565b610132546104b2565b6104b2600081565b6104546107d9366004615365565b612f18565b6104546107ec3660046153e0565b612fdd565b6104696107ff3660046153e0565b6130a5565b6104546108123660046152ec565b6131a1565b610454610825366004615265565b61322f565b6104c86108383660046153e0565b613313565b6104b26101405481565b6104b26101325481565b6104b26101345481565b6104b260008051602061581783398151915281565b6104b261087e3660046153e0565b61013f6020526000908152604090205481565b6104b261089f3660046153e0565b61013e6020526000908152604090205481565b6104546108c03660046153f8565b613408565b6104696108d33660046153e0565b600090815261013d602052604090205460ff1690565b6104b261012f5481565b61046961090136600461527f565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61045461093d3660046153e0565b61342e565b6104546109503660046154f6565b6134c3565b61013854610492906001600160a01b031681565b6104b26101335481565b6104546109813660046153e0565b613647565b60008051602061581783398151915261099f81336136da565b600082116109f45760405162461bcd60e51b815260206004820152601260248201527f5065672063616e6e6f74206265207a65726f000000000000000000000000000060448201526064015b60405180910390fd5b6101328290556040518281527f657d2b8cd9c1cd7fc4cfad3db71318ea067f53cfeb214befc5af59ed860d5a16906020015b60405180910390a15050565b6000610a3d8261375a565b92915050565b60008061013760009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd9190615517565b5050509150506000811215610b4a5760405162461bcd60e51b815260206004820152602360248201527f436861696e6c696e6b2072657475726e65642061206e6567617469766520707260448201527f696365000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b919050565b606060658054610b5e90615746565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8a90615746565b8015610bd75780601f10610bac57610100808354040283529160200191610bd7565b820191906000526020600020905b815481529060010190602001808311610bba57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b0316610c5a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109eb565b506000908152606960205260409020546001600160a01b031690565b600082815261013d6020526040902054829060ff16610cce5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b33610cd882611b61565b6001600160a01b03161480610cf8575061013b546001600160a01b031633145b610d445760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b600260c9541415610d975760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c95581610de95760405162461bcd60e51b815260206004820152601b60248201527f4d75737420626f72726f77206e6f6e2d7a65726f20616d6f756e74000000000060448201526064016109eb565b61012f548261013354610dfc91906156a1565b1115610e4a5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74206d696e74206f7665722064656274206365696c696e672e000060448201526064016109eb565b600083815261013f6020526040812054610e659084906156a1565b600085815261013f60205260409020549091508111610e9457634e487b7160e01b600052600160045260246000fd5b600084815261013e6020526040902054610eae9082613798565b610f205760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7720776f756c6420707574207661756c742062656c6f77206d696e60448201527f696d756d20636f6c6c61746572616c2070657263656e7461676500000000000060648201526084016109eb565b610140548111610f985760405162461bcd60e51b815260206004820152602f60248201527f426f72726f77206e6565647320746f206265206c6172676572207468616e207460448201527f6865206d696e696d756d2064656274000000000000000000000000000000000060648201526084016109eb565b610fa28484613817565b610139546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561100857600080fd5b505af115801561101c573d6000803e3d6000fd5b505060408051878152602081018790527f3e08df88d8e28f37df9bf227d3142ac506a364403445661a60891a49ed6792ca93500190505b60405180910390a15050600160c9555050565b600061107182611b61565b9050806001600160a01b0316836001600160a01b031614156110fb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b336001600160a01b038216148061111757506111178133610901565b6111895760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109eb565b611193838361392f565b505050565b6000805160206158178339815191526111b181336136da565b600082116112015760405162461bcd60e51b815260206004820152601b60248201527f4d696e696d756d20646562742063616e6e6f74206265207a65726f000000000060448201526064016109eb565b61012f54610140541061127c5760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20646562742063616e6e6f742062652067726561746572207460448201527f68616e2064656274206365696c696e670000000000000000000000000000000060648201526084016109eb565b6101408290556040518281527fe9031d105129d4c03f829c02017c30a898f35e17ddf050fdd090c416442bec5a90602001610a26565b600081815261013d602052604081205460ff166113045760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b60448201526064016109eb565b600082815261013e602090815260408083205461013f90925282205461132a919061399d565b915050610132548161133c91906156b9565b9050610134548161134d91906156b9565b9392505050565b61135e3382613a8c565b6113d05760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109eb565b611193838383613b7f565b600082815260fb60205260409020600101546113f781336136da565b6111938383613bc7565b600061140c83611db3565b82106114805760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016109eb565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6001600160a01b03811633146115275760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109eb565b6115318282613c69565b5050565b60008051602061581783398151915261154e81336136da565b60fa82111561159f5760405162461bcd60e51b815260206004820152601e60248201527f436c6f73696e67206665652063616e6e6f742062652061626f7665203125000060448201526064016109eb565b6305f5e1006115b0836127106156a1565b61013454610135546115c4906103e86156cd565b6115ce91906156b9565b6115d891906156cd565b106115e257600080fd5b6101308290556040518281527f2be5116c37a9989b15d218af1d929034cabc673c9c821d52a901411be5eafd2890602001610a26565b600082815261013d6020526040902054829060ff166116705760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b3361167a82611b61565b6001600160a01b0316148061169a575061013b546001600160a01b031633145b6116e65760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b6116ef83613cec565b6116f98284613d93565b604080518481523360208201526001600160a01b0384168183015290517fa8159d062909288cfe1bc71a9cb71a800664f2658fc2588d52676a844f1b0f139181900360600190a1505050565b600054610100900460ff168061175e575060005460ff16155b6117c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109eb565b600054610100900460ff161580156117e3576000805461ffff19166101011790555b6117eb613ee1565b6117f3613ee1565b6117fd8484613f93565b611805613ee1565b61180d61406f565b611815613ee1565b6001600160a01b03851661183957634e487b7160e01b600052600160045260246000fd5b606486101561185857634e487b7160e01b600052600160045260246000fd5b678ac7230489e8000061012f55604b6101305560006101318190556305f5e10061013255600261013455600b6101355561013a80546001600160a01b031990811690915561013b805482169055610137805482166001600160a01b0389811691909117909155610138805483169186169190911790556101398054339216821790556118e49190614126565b6118fc60008051602061581783398151915233614126565b61191460008051602061581783398151915280614130565b61012e869055801561192c576000805461ff00191690555b505050505050565b611193838383604051806020016040528060008152506131a1565b600061195b61012d5490565b905090565b600061196b60995490565b82106119df5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016109eb565b60998281548110611a0057634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600081815261013d602052604081205460ff16611a645760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b60448201526064016109eb565b600082815261013e602090815260408083205461013f909252822054611a8a919061399d565b915050600061013454611a9b610a43565b611aa690600a6156cd565b611ab091906156cd565b61013554611abe90846156cd565b611ac891906156b9565b949350505050565b611adf61012d80546001019055565b6000611aeb61012d5490565b600081815261013d602052604090819020805460ff19166001179055519091507f8b6c1d05c678fa59695e26465a85918ce0fc63a88f74af53d1daef8f0a9c780490611b4c90839033909182526001600160a01b0316602082015260400190565b60405180910390a1611b5e3382613d93565b50565b6000818152606760205260408120546001600160a01b031680610a3d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109eb565b600260c9541415611c3f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c95580336001600160a01b0382161480611c67575061013b546001600160a01b031633145b611cb35760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f74206765742070616964206966206e6f7420796f7572730000000060448201526064016109eb565b6001600160a01b03821660009081526101366020526040902054611d3f5760405162461bcd60e51b815260206004820152602860248201527f4e6f206c69717569646174696f6e73206173736f63696174656420776974682060448201527f6163636f756e742e00000000000000000000000000000000000000000000000060648201526084016109eb565b6001600160a01b038083166000908152610136602052604081208054919055610138549091611d709116338361417b565b604080518281523360208201527f45f23935dce154b3c7ff256ac2402f7700f39ce5b210b7da385215939fc4c5c891015b60405180910390a15050600160c95550565b60006001600160a01b038216611e315760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109eb565b506001600160a01b031660009081526068602052604090205490565b600080516020615817833981519152611e6681336136da565b600082815261013d602052604090205460ff16611ebc5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b5061013c55565b600082815261013d6020526040902054829060ff16611f1b5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b33611f2582611b61565b6001600160a01b03161480611f45575061013b546001600160a01b031633145b611f915760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b600260c9541415611fe45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c955600083815261013e602052604090205482111561206e5760405162461bcd60e51b815260206004820152602560248201527f5661756c7420646f6573206e6f74206861766520656e6f75676820636f6c6c6160448201527f746572616c00000000000000000000000000000000000000000000000000000060648201526084016109eb565b600083815261013e60205260408120546120899084906156ec565b600085815261013f60205260409020549091501561212e57600084815261013f60205260409020546120bc908290613798565b61212e5760405162461bcd60e51b815260206004820152603e60248201527f5769746864726177616c20776f756c6420707574207661756c742062656c6f7760448201527f206d696e696d756d20636f6c6c61746572616c2070657263656e74616765000060648201526084016109eb565b600084815261013e6020526040902081905561013854612158906001600160a01b0316338561417b565b60408051858152602081018590527f6c0ea3bea9dd66afa8f9d39d6eb93d833466190330813b42835efc650dca4cb99101611053565b600082815261013d6020526040902054829060ff166121e65760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b336121f082611b61565b6001600160a01b03161480612210575061013b546001600160a01b031633145b61225c5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b600260c95414156122af5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c955610139546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190615452565b101561237e5760405162461bcd60e51b815260206004820152601560248201527f546f6b656e2062616c616e636520746f6f206c6f77000000000000000000000060448201526064016109eb565b600083815261013f60205260409020548211156124035760405162461bcd60e51b815260206004820152602760248201527f5661756c742064656274206c657373207468616e20616d6f756e7420746f207060448201527f6179206261636b0000000000000000000000000000000000000000000000000060648201526084016109eb565b600061240d610a43565b612419906127106156cd565b610132546101305461242b90866156cd565b61243591906156cd565b61243f91906156b9565b905061244b848461420c565b6124558482614392565b61245e81614479565b61013954604051632770a7eb60e21b8152336004820152602481018590526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156124ab57600080fd5b505af11580156124bf573d6000803e3d6000fd5b505060408051878152602081018790529081018490527f31f96762af4051f367185773cc2f55bfb112a6c114b3407ded1f321a9eb199ac92506060019050611053565b600081815261013d6020526040902054819060ff1661255a5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b3361256482611b61565b6001600160a01b03161480612584575061013b546001600160a01b031633145b6125d05760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b600260c95414156126235760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c955600082815261013f6020526040902054156126855760405162461bcd60e51b815260206004820152601960248201527f5661756c74206173206f75747374616e64696e6720646562740000000000000060448201526064016109eb565b600082815261013e602052604090205461269e83613cec565b600083815261013d60209081526040808320805460ff1916905561013e825280832083905561013f90915281205580156126ea57610138546126ea906001600160a01b0316338361417b565b6040518381527f4fe08624ee65b341c38ab9693d216b909d4ddee1bc8d3fe0fea14026c361b46590602001611da1565b60008051602061581783398151915261273381336136da565b6101318290556040518281527ff78536edc296a3a7e991e00caa8319c68a84cc56f22e8c9118463773d0844b9390602001610a26565b60008051602061581783398151915261278281336136da565b6001600160a01b0382166127d85760405162461bcd60e51b815260206004820152601e60248201527f476174657761792063616e6e6f74206265207a65726f2061646472657373000060448201526064016109eb565b813b61284c5760405162461bcd60e51b815260206004820152602560248201527f4d757374206265206120636f6e747261637420746f206265207468652067617460448201527f657761792e00000000000000000000000000000000000000000000000000000060648201526084016109eb565b61013b80546001600160a01b0319166001600160a01b0384169081179091556040519081527f138dfef152fa4f095c1158aad1b384e3c43de632c031e8e37e149917e690075790602001610a26565b61013a546001600160a01b031615806128bf575061013a546001600160a01b031633145b6129315760405162461bcd60e51b815260206004820152602160248201527f6275795269736b795661756c742064697361626c656420666f72207075626c6960448201527f630000000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b600260c95414156129845760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c955600081815261013d602052604090205460ff166129df5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b600081815261013e602090815260408083205461013f9092528220548291612a069161399d565b9150915060008111612a5a5760405162461bcd60e51b815260206004820152601160248201527f5661756c7420686173206e6f206465627400000000000000000000000000000060448201526064016109eb565b6000612a6682846156b9565b905061012e548110612ae05760405162461bcd60e51b815260206004820152603060248201527f5661756c74206973206e6f742062656c6f77206d696e696d756d20636f6c6c6160448201527f746572616c2070657263656e746167650000000000000000000000000000000060648201526084016109eb565b6000612aeb85611a12565b90506000612af8866112b2565b610139546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b158015612b4157600080fd5b505afa158015612b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b799190615452565b1015612bed5760405162461bcd60e51b815260206004820152603160248201527f546f6b656e2062616c616e636520746f6f206c6f7720746f20706179206f666660448201527f206f75747374616e64696e67206465627400000000000000000000000000000060648201526084016109eb565b61013954604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015612c3a57600080fd5b505af1158015612c4e573d6000803e3d6000fd5b505050600087815261013f602052604081208054849350909190612c739084906156ec565b9091555060009050612c83610a43565b612c8f906127106156cd565b6101325461013054612ca190856156cd565b612cab91906156cd565b612cb591906156b9565b9050612cc183826156a1565b600088815261013e602052604081208054909190612ce09084906156ec565b909155505061013c54600090815261013e602052604081208054839290612d089084906156a1565b9091555050336000908152610136602052604081208054859290612d2d9084906156a1565b90915550612d3c9050826144e3565b7f4d151d3a98b83151d51917640c221f8c8e3c054422ea1b48dcbbd57e3f4210d587612d6789611b61565b604080519283526001600160a01b0390911660208301523390820152606081018490526080810185905260a0810183905260c00160405180910390a15050600160c9555050505050565b606060668054610b5e90615746565b600080516020615817833981519152612dd981336136da565b6001600160a01b038216612e555760405162461bcd60e51b815260206004820152602560248201527f53746162696c69747920706f6f6c2063616e6e6f74206265207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016109eb565b813b612ec95760405162461bcd60e51b815260206004820152602c60248201527f4d757374206265206120636f6e747261637420746f206265207468652073746160448201527f62696c69747920706f6f6c2e000000000000000000000000000000000000000060648201526084016109eb565b61013a80546001600160a01b0319166001600160a01b0384169081179091556040519081527feeec3ab95f3c876a3b73235ba92edc637a2edd294b997b5758fbf556f7953b9f90602001610a26565b6001600160a01b038216331415612f715760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109eb565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600080516020615817833981519152612ff681336136da565b8161012f54111561306f5760405162461bcd60e51b815260206004820152603c60248201527f7365744365696c696e673a204d757374206265206f7665722074686520616d6f60448201527f756e74206f662063757272656e742064656274206365696c696e672e0000000060648201526084016109eb565b61012f8290556040518281527f9e88375210357aa5dbeb756c2deee5a1a487e6dcd9fa8f444eda3bc7df41a37b90602001610a26565b600081815261013d602052604081205460ff166130f75760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b60448201526064016109eb565b600082815261013e602090815260408083205461013f909252822054829161311e9161399d565b91509150600081116131725760405162461bcd60e51b815260206004820152601560248201527f43616e6e6f742068617665207a65726f2064656274000000000000000000000060448201526064016109eb565b600061317e82846156b9565b905061012e5481101561319657506001949350505050565b506000949350505050565b6131ab3383613a8c565b61321d5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109eb565b6132298484848461454f565b50505050565b60008051602061581783398151915261324881336136da565b6001600160a01b0382166132c45760405162461bcd60e51b815260206004820152602360248201527f507269636520736f757263652063616e6e6f74206265207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b61013780546001600160a01b0319166001600160a01b0384169081179091556040519081527f96e1b2ba899db8310c90fe5b78eeb80bcaaf5de5f0c4549c82c621c2bc778b8090602001610a26565b6000818152606760205260409020546060906001600160a01b03166133a05760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016109eb565b60006133b760408051602081019091526000815290565b905060008151116133d7576040518060200160405280600081525061134d565b806133e1846145d8565b6040516020016133f29291906155a2565b6040516020818303038152906040529392505050565b600082815260fb602052604090206001015461342481336136da565b6111938383613c69565b60008051602061581783398151915261344781336136da565b6305f5e1006101305461271061345d91906156a1565b83610135546103e861346f91906156cd565b61347991906156b9565b61348391906156cd565b1061348d57600080fd5b6101348290556040518281527f29c334aad4ec9c65aa6ad3e720e9ad21ce4d7d6dbbdb44a3f97f2762d49387ca90602001610a26565b600082815261013d6020526040902054829060ff1661351b5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b3361352582611b61565b6001600160a01b03161480613545575061013b546001600160a01b031633145b6135915760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b610138546135aa906001600160a01b03163330856146f2565b600083815261013e60205260408120546135c59084906156a1565b600085815261013e60205260409020549091508110156135f557634e487b7160e01b600052600160045260246000fd5b600084815261013e602090815260409182902083905581518681529081018590527f52c4e7127ec34e8fc95f09ce2d06b4f00acca12ccbcdfb246ef67ee6aefe068d910160405180910390a150505050565b60008051602061581783398151915261366081336136da565b6305f5e1006101305461271061367691906156a1565b61013454613686856103e86156cd565b61369091906156b9565b61369a91906156cd565b106136a457600080fd5b6101358290556040518281527fee1adee4317c98f3606485f5b5d290ec4f4b8e1baee4906df1a86cd549ac864290602001610a26565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661153157613718816001600160a01b03166014614743565b613723836020614743565b6040516020016137349291906155d1565b60408051601f198184030181529082905262461bcd60e51b82526109eb9160040161568e565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610a3d5750610a3d8261494e565b60008060006137a7858561399d565b91509150600081116137fb5760405162461bcd60e51b815260206004820152601e60248201527f44656274206d7573742062652067726561746572207468616e207a65726f000060448201526064016109eb565b600061380782846156b9565b61012e5411159695505050505050565b6000610133548261382891906156a1565b90506101335481101561384b57634e487b7160e01b600052600160045260246000fd5b61012f548111156138c45760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74206578636565642064656274206365696c696e6720666f72207460448201527f686973207661756c74000000000000000000000000000000000000000000000060648201526084016109eb565b600083815261013f60205260408120546138de90846156a1565b600085815261013f602052604090205490915081101561390e57634e487b7160e01b600052600160045260246000fd5b6139178361498c565b600093845261013f6020526040909320929092555050565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061396482611b61565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806139a8610a43565b6139f45760405162461bcd60e51b815260206004820152601560248201527f5072696365206d7573742062652061626f76652030000000000000000000000060448201526064016109eb565b61013254613a445760405162461bcd60e51b815260206004820152601360248201527f506567206d7573742062652061626f766520300000000000000000000000000060448201526064016109eb565b6000613a4e610a43565b613a5890866156cd565b90506000613a666101325490565b613a7090866156cd565b90506000613a7f8360646156cd565b9791965090945050505050565b6000818152606760205260408120546001600160a01b0316613b055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109eb565b6000613b1083611b61565b9050806001600160a01b0316846001600160a01b03161480613b4b5750836001600160a01b0316613b4084610be1565b6001600160a01b0316145b80611ac857506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16611ac8565b60405162461bcd60e51b815260206004820152601260248201527f7472616e736665723a2064697361626c6564000000000000000000000000000060448201526064016109eb565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661153157600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613c253390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff161561153157600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000613cf782611b61565b9050613d0581600084614a1f565b613d1060008361392f565b6001600160a01b0381166000908152606860205260408120805460019290613d399084906156ec565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b038216613de95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109eb565b6000818152606760205260409020546001600160a01b031615613e4e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109eb565b613e5a60008383614a1f565b6001600160a01b0382166000908152606860205260408120805460019290613e839084906156a1565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff1680613efa575060005460ff16155b613f5d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109eb565b600054610100900460ff16158015613f7f576000805461ffff19166101011790555b8015611b5e576000805461ff001916905550565b600054610100900460ff1680613fac575060005460ff16155b61400f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109eb565b600054610100900460ff16158015614031576000805461ffff19166101011790555b8251614044906065906020860190615106565b508151614058906066906020850190615106565b508015611193576000805461ff0019169055505050565b600054610100900460ff1680614088575060005460ff16155b6140eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109eb565b600054610100900460ff1615801561410d576000805461ffff19166101011790555b600160c9558015611b5e576000805461ff001916905550565b6115318282613bc7565b600082815260fb6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6040516001600160a01b0383166024820152604481018290526111939084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152614a2a565b806101335410156142855760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f206578697374732e00000000000000000000000000000000000000000000000060648201526084016109eb565b600082815261013f602052604090205481111561430a5760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f207573657220686173000000000000000000000000000000000000000000000060648201526084016109eb565b6000816101335461431b91906156ec565b90506101335481111561433e57634e487b7160e01b600052600160045260246000fd5b600083815261013f60205260408120546143599084906156ec565b600085815261013f602052604090205490915081111561438957634e487b7160e01b600052600160045260246000fd5b613917836144e3565b600082815261013e60205260409020548111156144175760405162461bcd60e51b815260206004820152603060248201527f43616e6e6f742072656d6f7665206d6f7265207468616e20746865206465706f60448201527f736974656420636f6c6c61746572616c0000000000000000000000000000000060648201526084016109eb565b600082815261013e60205260408120546144329083906156ec565b600084815261013e602052604090205490915081111561446257634e487b7160e01b600052600160045260246000fd5b600092835261013e60205260409092209190915550565b61013c54600090815261013e60205260408120546144989083906156a1565b61013c54600090815261013e60205260409020549091508110156144cc57634e487b7160e01b600052600160045260246000fd5b61013c54600090815261013e602052604090205550565b610133548111156145365760405162461bcd60e51b815260206004820152601860248201527f446562742063616e206e6f7420676f2062656c6f7720302e000000000000000060448201526064016109eb565b6000816101335461454791906156ec565b610133555050565b61455a848484613b7f565b61456684848484614b0f565b6132295760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109eb565b6060816145fc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614626578061461081615781565b915061461f9050600a836156b9565b9150614600565b60008167ffffffffffffffff81111561464f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614679576020820181803683370190505b5090505b8415611ac85761468e6001836156ec565b915061469b600a8661579c565b6146a69060306156a1565b60f81b8183815181106146c957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506146eb600a866156b9565b945061467d565b6040516001600160a01b03808516602483015283166044820152606481018290526132299085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016141c0565b606060006147528360026156cd565b61475d9060026156a1565b67ffffffffffffffff81111561478357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156147ad576020820181803683370190505b509050600360fc1b816000815181106147d657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061482f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006148538460026156cd565b61485e9060016156a1565b90505b60018111156148ff577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106148ad57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106148d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936148f88161572f565b9050614861565b50831561134d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109eb565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610a3d5750610a3d82614c72565b6000816101335461499d91906156a1565b905061012f54811115614a185760405162461bcd60e51b815260206004820152602260248201527f446562742063616e206e6f7420676f2061626f76652064656274206365696c6960448201527f6e6700000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b6101335550565b611193838383614d0d565b6000614a7f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614dc59092919063ffffffff16565b8051909150156111935780806020019051810190614a9d91906153c4565b6111935760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109eb565b60006001600160a01b0384163b15614c6757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614b53903390899088908890600401615652565b602060405180830381600087803b158015614b6d57600080fd5b505af1925050508015614b9d575060408051601f3d908101601f19168201909252614b9a91810190615436565b60015b614c4d573d808015614bcb576040519150601f19603f3d011682016040523d82523d6000602084013e614bd0565b606091505b508051614c455760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109eb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ac8565b506001949350505050565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480614cd557506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a3d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610a3d565b6001600160a01b038316614d6857614d6381609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b614d8b565b816001600160a01b0316836001600160a01b031614614d8b57614d8b8382614dd4565b6001600160a01b038216614da25761119381614e71565b826001600160a01b0316826001600160a01b031614611193576111938282614f4a565b6060611ac88484600085614f8e565b60006001614de184611db3565b614deb91906156ec565b600083815260986020526040902054909150808214614e3e576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090614e83906001906156ec565b6000838152609a602052604081205460998054939450909284908110614eb957634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060998381548110614ee857634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480614f2e57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000614f5583611db3565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6060824710156150065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016109eb565b843b6150545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109eb565b600080866001600160a01b031685876040516150709190615586565b60006040518083038185875af1925050503d80600081146150ad576040519150601f19603f3d011682016040523d82523d6000602084013e6150b2565b606091505b50915091506150c28282866150cd565b979650505050505050565b606083156150dc57508161134d565b8251156150ec5782518084602001fd5b8160405162461bcd60e51b81526004016109eb919061568e565b82805461511290615746565b90600052602060002090601f016020900481019282615134576000855561517a565b82601f1061514d57805160ff191683800117855561517a565b8280016001018555821561517a579182015b8281111561517a57825182559160200191906001019061515f565b5061518692915061518a565b5090565b5b80821115615186576000815560010161518b565b600067ffffffffffffffff808411156151ba576151ba6157dc565b604051601f8501601f19908116603f011681019082821181831017156151e2576151e26157dc565b816040528093508581528686860111156151fb57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114610b4a57600080fd5b600082601f83011261523c578081fd5b61134d8383356020850161519f565b805169ffffffffffffffffffff81168114610b4a57600080fd5b600060208284031215615276578081fd5b61134d82615215565b60008060408385031215615291578081fd5b61529a83615215565b91506152a860208401615215565b90509250929050565b6000806000606084860312156152c5578081fd5b6152ce84615215565b92506152dc60208501615215565b9150604084013590509250925092565b60008060008060808587031215615301578081fd5b61530a85615215565b935061531860208601615215565b925060408501359150606085013567ffffffffffffffff81111561533a578182fd5b8501601f8101871361534a578182fd5b6153598782356020840161519f565b91505092959194509250565b60008060408385031215615377578182fd5b61538083615215565b91506020830135615390816157f2565b809150509250929050565b600080604083850312156153ad578182fd5b6153b683615215565b946020939093013593505050565b6000602082840312156153d5578081fd5b815161134d816157f2565b6000602082840312156153f1578081fd5b5035919050565b6000806040838503121561540a578182fd5b823591506152a860208401615215565b60006020828403121561542b578081fd5b813561134d81615800565b600060208284031215615447578081fd5b815161134d81615800565b600060208284031215615463578081fd5b5051919050565b600080600080600060a08688031215615481578283fd5b8535945061549160208701615215565b9350604086013567ffffffffffffffff808211156154ad578485fd5b6154b989838a0161522c565b945060608801359150808211156154ce578283fd5b506154db8882890161522c565b9250506154ea60808701615215565b90509295509295909350565b60008060408385031215615508578182fd5b50508035926020909101359150565b600080600080600060a0868803121561552e578283fd5b6155378661524b565b94506020860151935060408601519250606086015191506154ea6080870161524b565b60008151808452615572816020860160208601615703565b601f01601f19169290920160200192915050565b60008251615598818460208701615703565b9190910192915050565b600083516155b4818460208801615703565b8351908301906155c8818360208801615703565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615609816017850160208801615703565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615646816028840160208801615703565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152615684608083018461555a565b9695505050505050565b60208152600061134d602083018461555a565b600082198211156156b4576156b46157b0565b500190565b6000826156c8576156c86157c6565b500490565b60008160001904831182151516156156e7576156e76157b0565b500290565b6000828210156156fe576156fe6157b0565b500390565b60005b8381101561571e578181015183820152602001615706565b838111156132295750506000910152565b60008161573e5761573e6157b0565b506000190190565b600181811c9082168061575a57607f821691505b6020821081141561577b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615795576157956157b0565b5060010190565b6000826157ab576157ab6157c6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611b5e57600080fd5b6001600160e01b031981168114611b5e57600080fdfee1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9a264697066735822122012874bc6ea9beffc1aae5e8a1d35c48e0c8e5a0f83f7d6a97a3e43f2f0d2a3c264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061043c5760003560e01c8063728bbbb511610235578063bda5310711610135578063d547741f116100c8578063eb6a887d11610097578063fc0c546a1161007c578063fc0c546a14610955578063fc7b9c1814610969578063ffc73da71461097357600080fd5b8063eb6a887d1461092f578063ece137321461094257600080fd5b8063d547741f146108b2578063dcd68128146108c5578063e1c84ea4146108e9578063e985e9c5146108f357600080fd5b8063cea55f5711610104578063cea55f5714610851578063d11a57ec1461085b578063d310f49b14610870578063d4a9b2c51461089157600080fd5b8063bda5310714610817578063c87b56dd1461082a578063c91ee83d1461083d578063cdfedd631461084757600080fd5b806391d14854116101c8578063a217fddf11610197578063b1511cc91161017c578063b1511cc9146107de578063b86f6aef146107f1578063b88d4fde1461080457600080fd5b8063a217fddf146107c3578063a22cb465146107cb57600080fd5b806391d148541461076657806395d89b411461079f57806398d721e0146107a75780639fc30f1c146107ba57600080fd5b806385e290a31161020457806385e290a31461071a578063863759941461072d57806390646b4a1461074057806390cf0bba1461075357600080fd5b8063728bbbb5146106c95780637558abc8146106d3578063767a7b05146106f457806385af3c161461070757600080fd5b80632f2ff15d1161034057806344382f0f116102d357806361d027b3116102a257806363b8817c1161028757806363b8817c1461069057806370a08231146106a35780637139c929146106b657600080fd5b806361d027b3146106735780636352211e1461067d57600080fd5b806344382f0f1461063d5780634f6ccce71461064557806356572ac0146106585780635d12928b1461066b57600080fd5b80633db991771161030f5780633db99177146105f15780633e61facd1461060457806341a5068f1461061757806342842e0e1461062a57600080fd5b80632f2ff15d146105ae5780632f745c59146105c1578063311f392a146105d457806336568abe146105de57600080fd5b80630a998f53116103d35780631c883e7b116103a257806323b872dd1161038757806323b872dd1461056e578063248a9ca3146105815780632935d2bc146105a457600080fd5b80631c883e7b1461055057806320531bc91461055a57600080fd5b80630a998f531461050e578063116191b61461052157806311b4a8321461053557806318160ddd1461054857600080fd5b806306fdde031161040f57806306fdde03146104c0578063081812fc146104d557806308ec5927146104e8578063095ea7b3146104fb57600080fd5b806301e49d0a1461044157806301ffc9a714610456578063048c661d1461047e578063048de381146104aa575b600080fd5b61045461044f3660046153e0565b610986565b005b61046961046436600461541a565b610a32565b60405190151581526020015b60405180910390f35b61013a54610492906001600160a01b031681565b6040516001600160a01b039091168152602001610475565b6104b2610a43565b604051908152602001610475565b6104c8610b4f565b604051610475919061568e565b6104926104e33660046153e0565b610be1565b6104546104f63660046154f6565b610c76565b61045461050936600461539b565b611066565b61045461051c3660046153e0565b611198565b61013b54610492906001600160a01b031681565b6104b26105433660046153e0565b6112b2565b6099546104b2565b6104b26101305481565b61013754610492906001600160a01b031681565b61045461057c3660046152b1565b611354565b6104b261058f3660046153e0565b600090815260fb602052604090206001015490565b6104b261012e5481565b6104546105bc3660046153f8565b6113db565b6104b26105cf36600461539b565b611401565b6104b26101355481565b6104546105ec3660046153f8565b6114a9565b6104546105ff3660046153e0565b611535565b6104546106123660046153f8565b611618565b61045461062536600461546a565b611745565b6104546106383660046152b1565b611934565b6104b261194f565b6104b26106533660046153e0565b611960565b6104b26106663660046153e0565b611a12565b610454611ad0565b6104b261013c5481565b61049261068b3660046153e0565b611b61565b61045461069e366004615265565b611bec565b6104b26106b1366004615265565b611db3565b6104546106c43660046153e0565b611e4d565b6104b26101315481565b6104b26106e1366004615265565b6101366020526000908152604090205481565b6104546107023660046154f6565b611ec3565b6104546107153660046154f6565b61218e565b6104546107283660046153e0565b612502565b61045461073b3660046153e0565b61271a565b61045461074e366004615265565b612769565b6104546107613660046153e0565b61289b565b6104696107743660046153f8565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6104c8612db1565b6104546107b5366004615265565b612dc0565b610132546104b2565b6104b2600081565b6104546107d9366004615365565b612f18565b6104546107ec3660046153e0565b612fdd565b6104696107ff3660046153e0565b6130a5565b6104546108123660046152ec565b6131a1565b610454610825366004615265565b61322f565b6104c86108383660046153e0565b613313565b6104b26101405481565b6104b26101325481565b6104b26101345481565b6104b260008051602061581783398151915281565b6104b261087e3660046153e0565b61013f6020526000908152604090205481565b6104b261089f3660046153e0565b61013e6020526000908152604090205481565b6104546108c03660046153f8565b613408565b6104696108d33660046153e0565b600090815261013d602052604090205460ff1690565b6104b261012f5481565b61046961090136600461527f565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61045461093d3660046153e0565b61342e565b6104546109503660046154f6565b6134c3565b61013854610492906001600160a01b031681565b6104b26101335481565b6104546109813660046153e0565b613647565b60008051602061581783398151915261099f81336136da565b600082116109f45760405162461bcd60e51b815260206004820152601260248201527f5065672063616e6e6f74206265207a65726f000000000000000000000000000060448201526064015b60405180910390fd5b6101328290556040518281527f657d2b8cd9c1cd7fc4cfad3db71318ea067f53cfeb214befc5af59ed860d5a16906020015b60405180910390a15050565b6000610a3d8261375a565b92915050565b60008061013760009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a9557600080fd5b505afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd9190615517565b5050509150506000811215610b4a5760405162461bcd60e51b815260206004820152602360248201527f436861696e6c696e6b2072657475726e65642061206e6567617469766520707260448201527f696365000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b919050565b606060658054610b5e90615746565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8a90615746565b8015610bd75780601f10610bac57610100808354040283529160200191610bd7565b820191906000526020600020905b815481529060010190602001808311610bba57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b0316610c5a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109eb565b506000908152606960205260409020546001600160a01b031690565b600082815261013d6020526040902054829060ff16610cce5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b33610cd882611b61565b6001600160a01b03161480610cf8575061013b546001600160a01b031633145b610d445760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b600260c9541415610d975760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c95581610de95760405162461bcd60e51b815260206004820152601b60248201527f4d75737420626f72726f77206e6f6e2d7a65726f20616d6f756e74000000000060448201526064016109eb565b61012f548261013354610dfc91906156a1565b1115610e4a5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74206d696e74206f7665722064656274206365696c696e672e000060448201526064016109eb565b600083815261013f6020526040812054610e659084906156a1565b600085815261013f60205260409020549091508111610e9457634e487b7160e01b600052600160045260246000fd5b600084815261013e6020526040902054610eae9082613798565b610f205760405162461bcd60e51b815260206004820152603a60248201527f426f72726f7720776f756c6420707574207661756c742062656c6f77206d696e60448201527f696d756d20636f6c6c61746572616c2070657263656e7461676500000000000060648201526084016109eb565b610140548111610f985760405162461bcd60e51b815260206004820152602f60248201527f426f72726f77206e6565647320746f206265206c6172676572207468616e207460448201527f6865206d696e696d756d2064656274000000000000000000000000000000000060648201526084016109eb565b610fa28484613817565b610139546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018590526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561100857600080fd5b505af115801561101c573d6000803e3d6000fd5b505060408051878152602081018790527f3e08df88d8e28f37df9bf227d3142ac506a364403445661a60891a49ed6792ca93500190505b60405180910390a15050600160c9555050565b600061107182611b61565b9050806001600160a01b0316836001600160a01b031614156110fb5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b336001600160a01b038216148061111757506111178133610901565b6111895760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016109eb565b611193838361392f565b505050565b6000805160206158178339815191526111b181336136da565b600082116112015760405162461bcd60e51b815260206004820152601b60248201527f4d696e696d756d20646562742063616e6e6f74206265207a65726f000000000060448201526064016109eb565b61012f54610140541061127c5760405162461bcd60e51b815260206004820152603060248201527f4d696e696d756d20646562742063616e6e6f742062652067726561746572207460448201527f68616e2064656274206365696c696e670000000000000000000000000000000060648201526084016109eb565b6101408290556040518281527fe9031d105129d4c03f829c02017c30a898f35e17ddf050fdd090c416442bec5a90602001610a26565b600081815261013d602052604081205460ff166113045760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b60448201526064016109eb565b600082815261013e602090815260408083205461013f90925282205461132a919061399d565b915050610132548161133c91906156b9565b9050610134548161134d91906156b9565b9392505050565b61135e3382613a8c565b6113d05760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109eb565b611193838383613b7f565b600082815260fb60205260409020600101546113f781336136da565b6111938383613bc7565b600061140c83611db3565b82106114805760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016109eb565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b6001600160a01b03811633146115275760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109eb565b6115318282613c69565b5050565b60008051602061581783398151915261154e81336136da565b60fa82111561159f5760405162461bcd60e51b815260206004820152601e60248201527f436c6f73696e67206665652063616e6e6f742062652061626f7665203125000060448201526064016109eb565b6305f5e1006115b0836127106156a1565b61013454610135546115c4906103e86156cd565b6115ce91906156b9565b6115d891906156cd565b106115e257600080fd5b6101308290556040518281527f2be5116c37a9989b15d218af1d929034cabc673c9c821d52a901411be5eafd2890602001610a26565b600082815261013d6020526040902054829060ff166116705760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b3361167a82611b61565b6001600160a01b0316148061169a575061013b546001600160a01b031633145b6116e65760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b6116ef83613cec565b6116f98284613d93565b604080518481523360208201526001600160a01b0384168183015290517fa8159d062909288cfe1bc71a9cb71a800664f2658fc2588d52676a844f1b0f139181900360600190a1505050565b600054610100900460ff168061175e575060005460ff16155b6117c15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109eb565b600054610100900460ff161580156117e3576000805461ffff19166101011790555b6117eb613ee1565b6117f3613ee1565b6117fd8484613f93565b611805613ee1565b61180d61406f565b611815613ee1565b6001600160a01b03851661183957634e487b7160e01b600052600160045260246000fd5b606486101561185857634e487b7160e01b600052600160045260246000fd5b678ac7230489e8000061012f55604b6101305560006101318190556305f5e10061013255600261013455600b6101355561013a80546001600160a01b031990811690915561013b805482169055610137805482166001600160a01b0389811691909117909155610138805483169186169190911790556101398054339216821790556118e49190614126565b6118fc60008051602061581783398151915233614126565b61191460008051602061581783398151915280614130565b61012e869055801561192c576000805461ff00191690555b505050505050565b611193838383604051806020016040528060008152506131a1565b600061195b61012d5490565b905090565b600061196b60995490565b82106119df5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016109eb565b60998281548110611a0057634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b600081815261013d602052604081205460ff16611a645760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b60448201526064016109eb565b600082815261013e602090815260408083205461013f909252822054611a8a919061399d565b915050600061013454611a9b610a43565b611aa690600a6156cd565b611ab091906156cd565b61013554611abe90846156cd565b611ac891906156b9565b949350505050565b611adf61012d80546001019055565b6000611aeb61012d5490565b600081815261013d602052604090819020805460ff19166001179055519091507f8b6c1d05c678fa59695e26465a85918ce0fc63a88f74af53d1daef8f0a9c780490611b4c90839033909182526001600160a01b0316602082015260400190565b60405180910390a1611b5e3382613d93565b50565b6000818152606760205260408120546001600160a01b031680610a3d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016109eb565b600260c9541415611c3f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c95580336001600160a01b0382161480611c67575061013b546001600160a01b031633145b611cb35760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f74206765742070616964206966206e6f7420796f7572730000000060448201526064016109eb565b6001600160a01b03821660009081526101366020526040902054611d3f5760405162461bcd60e51b815260206004820152602860248201527f4e6f206c69717569646174696f6e73206173736f63696174656420776974682060448201527f6163636f756e742e00000000000000000000000000000000000000000000000060648201526084016109eb565b6001600160a01b038083166000908152610136602052604081208054919055610138549091611d709116338361417b565b604080518281523360208201527f45f23935dce154b3c7ff256ac2402f7700f39ce5b210b7da385215939fc4c5c891015b60405180910390a15050600160c95550565b60006001600160a01b038216611e315760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016109eb565b506001600160a01b031660009081526068602052604090205490565b600080516020615817833981519152611e6681336136da565b600082815261013d602052604090205460ff16611ebc5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b5061013c55565b600082815261013d6020526040902054829060ff16611f1b5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b33611f2582611b61565b6001600160a01b03161480611f45575061013b546001600160a01b031633145b611f915760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b600260c9541415611fe45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c955600083815261013e602052604090205482111561206e5760405162461bcd60e51b815260206004820152602560248201527f5661756c7420646f6573206e6f74206861766520656e6f75676820636f6c6c6160448201527f746572616c00000000000000000000000000000000000000000000000000000060648201526084016109eb565b600083815261013e60205260408120546120899084906156ec565b600085815261013f60205260409020549091501561212e57600084815261013f60205260409020546120bc908290613798565b61212e5760405162461bcd60e51b815260206004820152603e60248201527f5769746864726177616c20776f756c6420707574207661756c742062656c6f7760448201527f206d696e696d756d20636f6c6c61746572616c2070657263656e74616765000060648201526084016109eb565b600084815261013e6020526040902081905561013854612158906001600160a01b0316338561417b565b60408051858152602081018590527f6c0ea3bea9dd66afa8f9d39d6eb93d833466190330813b42835efc650dca4cb99101611053565b600082815261013d6020526040902054829060ff166121e65760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b336121f082611b61565b6001600160a01b03161480612210575061013b546001600160a01b031633145b61225c5760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b600260c95414156122af5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c955610139546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b1580156122f857600080fd5b505afa15801561230c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123309190615452565b101561237e5760405162461bcd60e51b815260206004820152601560248201527f546f6b656e2062616c616e636520746f6f206c6f77000000000000000000000060448201526064016109eb565b600083815261013f60205260409020548211156124035760405162461bcd60e51b815260206004820152602760248201527f5661756c742064656274206c657373207468616e20616d6f756e7420746f207060448201527f6179206261636b0000000000000000000000000000000000000000000000000060648201526084016109eb565b600061240d610a43565b612419906127106156cd565b610132546101305461242b90866156cd565b61243591906156cd565b61243f91906156b9565b905061244b848461420c565b6124558482614392565b61245e81614479565b61013954604051632770a7eb60e21b8152336004820152602481018590526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156124ab57600080fd5b505af11580156124bf573d6000803e3d6000fd5b505060408051878152602081018790529081018490527f31f96762af4051f367185773cc2f55bfb112a6c114b3407ded1f321a9eb199ac92506060019050611053565b600081815261013d6020526040902054819060ff1661255a5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b3361256482611b61565b6001600160a01b03161480612584575061013b546001600160a01b031633145b6125d05760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b600260c95414156126235760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c955600082815261013f6020526040902054156126855760405162461bcd60e51b815260206004820152601960248201527f5661756c74206173206f75747374616e64696e6720646562740000000000000060448201526064016109eb565b600082815261013e602052604090205461269e83613cec565b600083815261013d60209081526040808320805460ff1916905561013e825280832083905561013f90915281205580156126ea57610138546126ea906001600160a01b0316338361417b565b6040518381527f4fe08624ee65b341c38ab9693d216b909d4ddee1bc8d3fe0fea14026c361b46590602001611da1565b60008051602061581783398151915261273381336136da565b6101318290556040518281527ff78536edc296a3a7e991e00caa8319c68a84cc56f22e8c9118463773d0844b9390602001610a26565b60008051602061581783398151915261278281336136da565b6001600160a01b0382166127d85760405162461bcd60e51b815260206004820152601e60248201527f476174657761792063616e6e6f74206265207a65726f2061646472657373000060448201526064016109eb565b813b61284c5760405162461bcd60e51b815260206004820152602560248201527f4d757374206265206120636f6e747261637420746f206265207468652067617460448201527f657761792e00000000000000000000000000000000000000000000000000000060648201526084016109eb565b61013b80546001600160a01b0319166001600160a01b0384169081179091556040519081527f138dfef152fa4f095c1158aad1b384e3c43de632c031e8e37e149917e690075790602001610a26565b61013a546001600160a01b031615806128bf575061013a546001600160a01b031633145b6129315760405162461bcd60e51b815260206004820152602160248201527f6275795269736b795661756c742064697361626c656420666f72207075626c6960448201527f630000000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b600260c95414156129845760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016109eb565b600260c955600081815261013d602052604090205460ff166129df5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b600081815261013e602090815260408083205461013f9092528220548291612a069161399d565b9150915060008111612a5a5760405162461bcd60e51b815260206004820152601160248201527f5661756c7420686173206e6f206465627400000000000000000000000000000060448201526064016109eb565b6000612a6682846156b9565b905061012e548110612ae05760405162461bcd60e51b815260206004820152603060248201527f5661756c74206973206e6f742062656c6f77206d696e696d756d20636f6c6c6160448201527f746572616c2070657263656e746167650000000000000000000000000000000060648201526084016109eb565b6000612aeb85611a12565b90506000612af8866112b2565b610139546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b158015612b4157600080fd5b505afa158015612b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b799190615452565b1015612bed5760405162461bcd60e51b815260206004820152603160248201527f546f6b656e2062616c616e636520746f6f206c6f7720746f20706179206f666660448201527f206f75747374616e64696e67206465627400000000000000000000000000000060648201526084016109eb565b61013954604051632770a7eb60e21b8152336004820152602481018390526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b158015612c3a57600080fd5b505af1158015612c4e573d6000803e3d6000fd5b505050600087815261013f602052604081208054849350909190612c739084906156ec565b9091555060009050612c83610a43565b612c8f906127106156cd565b6101325461013054612ca190856156cd565b612cab91906156cd565b612cb591906156b9565b9050612cc183826156a1565b600088815261013e602052604081208054909190612ce09084906156ec565b909155505061013c54600090815261013e602052604081208054839290612d089084906156a1565b9091555050336000908152610136602052604081208054859290612d2d9084906156a1565b90915550612d3c9050826144e3565b7f4d151d3a98b83151d51917640c221f8c8e3c054422ea1b48dcbbd57e3f4210d587612d6789611b61565b604080519283526001600160a01b0390911660208301523390820152606081018490526080810185905260a0810183905260c00160405180910390a15050600160c9555050505050565b606060668054610b5e90615746565b600080516020615817833981519152612dd981336136da565b6001600160a01b038216612e555760405162461bcd60e51b815260206004820152602560248201527f53746162696c69747920706f6f6c2063616e6e6f74206265207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016109eb565b813b612ec95760405162461bcd60e51b815260206004820152602c60248201527f4d757374206265206120636f6e747261637420746f206265207468652073746160448201527f62696c69747920706f6f6c2e000000000000000000000000000000000000000060648201526084016109eb565b61013a80546001600160a01b0319166001600160a01b0384169081179091556040519081527feeec3ab95f3c876a3b73235ba92edc637a2edd294b997b5758fbf556f7953b9f90602001610a26565b6001600160a01b038216331415612f715760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016109eb565b336000818152606a602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600080516020615817833981519152612ff681336136da565b8161012f54111561306f5760405162461bcd60e51b815260206004820152603c60248201527f7365744365696c696e673a204d757374206265206f7665722074686520616d6f60448201527f756e74206f662063757272656e742064656274206365696c696e672e0000000060648201526084016109eb565b61012f8290556040518281527f9e88375210357aa5dbeb756c2deee5a1a487e6dcd9fa8f444eda3bc7df41a37b90602001610a26565b600081815261013d602052604081205460ff166130f75760405162461bcd60e51b815260206004820152601060248201526f15985d5b1d081b5d5cdd08195e1a5cdd60821b60448201526064016109eb565b600082815261013e602090815260408083205461013f909252822054829161311e9161399d565b91509150600081116131725760405162461bcd60e51b815260206004820152601560248201527f43616e6e6f742068617665207a65726f2064656274000000000000000000000060448201526064016109eb565b600061317e82846156b9565b905061012e5481101561319657506001949350505050565b506000949350505050565b6131ab3383613a8c565b61321d5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016109eb565b6132298484848461454f565b50505050565b60008051602061581783398151915261324881336136da565b6001600160a01b0382166132c45760405162461bcd60e51b815260206004820152602360248201527f507269636520736f757263652063616e6e6f74206265207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b61013780546001600160a01b0319166001600160a01b0384169081179091556040519081527f96e1b2ba899db8310c90fe5b78eeb80bcaaf5de5f0c4549c82c621c2bc778b8090602001610a26565b6000818152606760205260409020546060906001600160a01b03166133a05760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016109eb565b60006133b760408051602081019091526000815290565b905060008151116133d7576040518060200160405280600081525061134d565b806133e1846145d8565b6040516020016133f29291906155a2565b6040516020818303038152906040529392505050565b600082815260fb602052604090206001015461342481336136da565b6111938383613c69565b60008051602061581783398151915261344781336136da565b6305f5e1006101305461271061345d91906156a1565b83610135546103e861346f91906156cd565b61347991906156b9565b61348391906156cd565b1061348d57600080fd5b6101348290556040518281527f29c334aad4ec9c65aa6ad3e720e9ad21ce4d7d6dbbdb44a3f97f2762d49387ca90602001610a26565b600082815261013d6020526040902054829060ff1661351b5760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cc81b9bdd08195e1a5cdd60621b60448201526064016109eb565b3361352582611b61565b6001600160a01b03161480613545575061013b546001600160a01b031633145b6135915760405162461bcd60e51b815260206004820152601960248201527f5661756c74206973206e6f74206f776e656420627920796f750000000000000060448201526064016109eb565b610138546135aa906001600160a01b03163330856146f2565b600083815261013e60205260408120546135c59084906156a1565b600085815261013e60205260409020549091508110156135f557634e487b7160e01b600052600160045260246000fd5b600084815261013e602090815260409182902083905581518681529081018590527f52c4e7127ec34e8fc95f09ce2d06b4f00acca12ccbcdfb246ef67ee6aefe068d910160405180910390a150505050565b60008051602061581783398151915261366081336136da565b6305f5e1006101305461271061367691906156a1565b61013454613686856103e86156cd565b61369091906156b9565b61369a91906156cd565b106136a457600080fd5b6101358290556040518281527fee1adee4317c98f3606485f5b5d290ec4f4b8e1baee4906df1a86cd549ac864290602001610a26565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661153157613718816001600160a01b03166014614743565b613723836020614743565b6040516020016137349291906155d1565b60408051601f198184030181529082905262461bcd60e51b82526109eb9160040161568e565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610a3d5750610a3d8261494e565b60008060006137a7858561399d565b91509150600081116137fb5760405162461bcd60e51b815260206004820152601e60248201527f44656274206d7573742062652067726561746572207468616e207a65726f000060448201526064016109eb565b600061380782846156b9565b61012e5411159695505050505050565b6000610133548261382891906156a1565b90506101335481101561384b57634e487b7160e01b600052600160045260246000fd5b61012f548111156138c45760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f74206578636565642064656274206365696c696e6720666f72207460448201527f686973207661756c74000000000000000000000000000000000000000000000060648201526084016109eb565b600083815261013f60205260408120546138de90846156a1565b600085815261013f602052604090205490915081101561390e57634e487b7160e01b600052600160045260246000fd5b6139178361498c565b600093845261013f6020526040909320929092555050565b600081815260696020526040902080546001600160a01b0319166001600160a01b038416908117909155819061396482611b61565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806139a8610a43565b6139f45760405162461bcd60e51b815260206004820152601560248201527f5072696365206d7573742062652061626f76652030000000000000000000000060448201526064016109eb565b61013254613a445760405162461bcd60e51b815260206004820152601360248201527f506567206d7573742062652061626f766520300000000000000000000000000060448201526064016109eb565b6000613a4e610a43565b613a5890866156cd565b90506000613a666101325490565b613a7090866156cd565b90506000613a7f8360646156cd565b9791965090945050505050565b6000818152606760205260408120546001600160a01b0316613b055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016109eb565b6000613b1083611b61565b9050806001600160a01b0316846001600160a01b03161480613b4b5750836001600160a01b0316613b4084610be1565b6001600160a01b0316145b80611ac857506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff16611ac8565b60405162461bcd60e51b815260206004820152601260248201527f7472616e736665723a2064697361626c6564000000000000000000000000000060448201526064016109eb565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661153157600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613c253390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff161561153157600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000613cf782611b61565b9050613d0581600084614a1f565b613d1060008361392f565b6001600160a01b0381166000908152606860205260408120805460019290613d399084906156ec565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b038216613de95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016109eb565b6000818152606760205260409020546001600160a01b031615613e4e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016109eb565b613e5a60008383614a1f565b6001600160a01b0382166000908152606860205260408120805460019290613e839084906156a1565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff1680613efa575060005460ff16155b613f5d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109eb565b600054610100900460ff16158015613f7f576000805461ffff19166101011790555b8015611b5e576000805461ff001916905550565b600054610100900460ff1680613fac575060005460ff16155b61400f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109eb565b600054610100900460ff16158015614031576000805461ffff19166101011790555b8251614044906065906020860190615106565b508151614058906066906020850190615106565b508015611193576000805461ff0019169055505050565b600054610100900460ff1680614088575060005460ff16155b6140eb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109eb565b600054610100900460ff1615801561410d576000805461ffff19166101011790555b600160c9558015611b5e576000805461ff001916905550565b6115318282613bc7565b600082815260fb6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6040516001600160a01b0383166024820152604481018290526111939084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152614a2a565b806101335410156142855760405162461bcd60e51b815260206004820152602860248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f206578697374732e00000000000000000000000000000000000000000000000060648201526084016109eb565b600082815261013f602052604090205481111561430a5760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f742067657420726964206f66206d6f72652064656274207468616e60448201527f207573657220686173000000000000000000000000000000000000000000000060648201526084016109eb565b6000816101335461431b91906156ec565b90506101335481111561433e57634e487b7160e01b600052600160045260246000fd5b600083815261013f60205260408120546143599084906156ec565b600085815261013f602052604090205490915081111561438957634e487b7160e01b600052600160045260246000fd5b613917836144e3565b600082815261013e60205260409020548111156144175760405162461bcd60e51b815260206004820152603060248201527f43616e6e6f742072656d6f7665206d6f7265207468616e20746865206465706f60448201527f736974656420636f6c6c61746572616c0000000000000000000000000000000060648201526084016109eb565b600082815261013e60205260408120546144329083906156ec565b600084815261013e602052604090205490915081111561446257634e487b7160e01b600052600160045260246000fd5b600092835261013e60205260409092209190915550565b61013c54600090815261013e60205260408120546144989083906156a1565b61013c54600090815261013e60205260409020549091508110156144cc57634e487b7160e01b600052600160045260246000fd5b61013c54600090815261013e602052604090205550565b610133548111156145365760405162461bcd60e51b815260206004820152601860248201527f446562742063616e206e6f7420676f2062656c6f7720302e000000000000000060448201526064016109eb565b6000816101335461454791906156ec565b610133555050565b61455a848484613b7f565b61456684848484614b0f565b6132295760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109eb565b6060816145fc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614626578061461081615781565b915061461f9050600a836156b9565b9150614600565b60008167ffffffffffffffff81111561464f57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015614679576020820181803683370190505b5090505b8415611ac85761468e6001836156ec565b915061469b600a8661579c565b6146a69060306156a1565b60f81b8183815181106146c957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506146eb600a866156b9565b945061467d565b6040516001600160a01b03808516602483015283166044820152606481018290526132299085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016141c0565b606060006147528360026156cd565b61475d9060026156a1565b67ffffffffffffffff81111561478357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156147ad576020820181803683370190505b509050600360fc1b816000815181106147d657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061482f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006148538460026156cd565b61485e9060016156a1565b90505b60018111156148ff577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106148ad57634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106148d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936148f88161572f565b9050614861565b50831561134d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109eb565b60006001600160e01b031982167f780e9d63000000000000000000000000000000000000000000000000000000001480610a3d5750610a3d82614c72565b6000816101335461499d91906156a1565b905061012f54811115614a185760405162461bcd60e51b815260206004820152602260248201527f446562742063616e206e6f7420676f2061626f76652064656274206365696c6960448201527f6e6700000000000000000000000000000000000000000000000000000000000060648201526084016109eb565b6101335550565b611193838383614d0d565b6000614a7f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614dc59092919063ffffffff16565b8051909150156111935780806020019051810190614a9d91906153c4565b6111935760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016109eb565b60006001600160a01b0384163b15614c6757604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614b53903390899088908890600401615652565b602060405180830381600087803b158015614b6d57600080fd5b505af1925050508015614b9d575060408051601f3d908101601f19168201909252614b9a91810190615436565b60015b614c4d573d808015614bcb576040519150601f19603f3d011682016040523d82523d6000602084013e614bd0565b606091505b508051614c455760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016109eb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ac8565b506001949350505050565b60006001600160e01b031982167f80ac58cd000000000000000000000000000000000000000000000000000000001480614cd557506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610a3d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610a3d565b6001600160a01b038316614d6857614d6381609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b614d8b565b816001600160a01b0316836001600160a01b031614614d8b57614d8b8382614dd4565b6001600160a01b038216614da25761119381614e71565b826001600160a01b0316826001600160a01b031614611193576111938282614f4a565b6060611ac88484600085614f8e565b60006001614de184611db3565b614deb91906156ec565b600083815260986020526040902054909150808214614e3e576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b609954600090614e83906001906156ec565b6000838152609a602052604081205460998054939450909284908110614eb957634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060998381548110614ee857634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152609a90915260408082208490558582528120556099805480614f2e57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000614f5583611db3565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b6060824710156150065760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016109eb565b843b6150545760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016109eb565b600080866001600160a01b031685876040516150709190615586565b60006040518083038185875af1925050503d80600081146150ad576040519150601f19603f3d011682016040523d82523d6000602084013e6150b2565b606091505b50915091506150c28282866150cd565b979650505050505050565b606083156150dc57508161134d565b8251156150ec5782518084602001fd5b8160405162461bcd60e51b81526004016109eb919061568e565b82805461511290615746565b90600052602060002090601f016020900481019282615134576000855561517a565b82601f1061514d57805160ff191683800117855561517a565b8280016001018555821561517a579182015b8281111561517a57825182559160200191906001019061515f565b5061518692915061518a565b5090565b5b80821115615186576000815560010161518b565b600067ffffffffffffffff808411156151ba576151ba6157dc565b604051601f8501601f19908116603f011681019082821181831017156151e2576151e26157dc565b816040528093508581528686860111156151fb57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114610b4a57600080fd5b600082601f83011261523c578081fd5b61134d8383356020850161519f565b805169ffffffffffffffffffff81168114610b4a57600080fd5b600060208284031215615276578081fd5b61134d82615215565b60008060408385031215615291578081fd5b61529a83615215565b91506152a860208401615215565b90509250929050565b6000806000606084860312156152c5578081fd5b6152ce84615215565b92506152dc60208501615215565b9150604084013590509250925092565b60008060008060808587031215615301578081fd5b61530a85615215565b935061531860208601615215565b925060408501359150606085013567ffffffffffffffff81111561533a578182fd5b8501601f8101871361534a578182fd5b6153598782356020840161519f565b91505092959194509250565b60008060408385031215615377578182fd5b61538083615215565b91506020830135615390816157f2565b809150509250929050565b600080604083850312156153ad578182fd5b6153b683615215565b946020939093013593505050565b6000602082840312156153d5578081fd5b815161134d816157f2565b6000602082840312156153f1578081fd5b5035919050565b6000806040838503121561540a578182fd5b823591506152a860208401615215565b60006020828403121561542b578081fd5b813561134d81615800565b600060208284031215615447578081fd5b815161134d81615800565b600060208284031215615463578081fd5b5051919050565b600080600080600060a08688031215615481578283fd5b8535945061549160208701615215565b9350604086013567ffffffffffffffff808211156154ad578485fd5b6154b989838a0161522c565b945060608801359150808211156154ce578283fd5b506154db8882890161522c565b9250506154ea60808701615215565b90509295509295909350565b60008060408385031215615508578182fd5b50508035926020909101359150565b600080600080600060a0868803121561552e578283fd5b6155378661524b565b94506020860151935060408601519250606086015191506154ea6080870161524b565b60008151808452615572816020860160208601615703565b601f01601f19169290920160200192915050565b60008251615598818460208701615703565b9190910192915050565b600083516155b4818460208801615703565b8351908301906155c8818360208801615703565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615609816017850160208801615703565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615646816028840160208801615703565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152615684608083018461555a565b9695505050505050565b60208152600061134d602083018461555a565b600082198211156156b4576156b46157b0565b500190565b6000826156c8576156c86157c6565b500490565b60008160001904831182151516156156e7576156e76157b0565b500290565b6000828210156156fe576156fe6157b0565b500390565b60005b8381101561571e578181015183820152602001615706565b838111156132295750506000910152565b60008161573e5761573e6157b0565b506000190190565b600181811c9082168061575a57607f821691505b6020821081141561577b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615795576157956157b0565b5060010190565b6000826157ab576157ab6157c6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114611b5e57600080fd5b6001600160e01b031981168114611b5e57600080fdfee1dcbdb91df27212a29bc27177c840cf2f819ecf2187432e1fac86c2dd5dfca9a264697066735822122012874bc6ea9beffc1aae5e8a1d35c48e0c8e5a0f83f7d6a97a3e43f2f0d2a3c264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "borrowToken(uint256,uint256)": {
        "details": "Lets a vault owner borrow stablecoin against collateral Requirements: - Vault type must exist - Vault must exist - Must borrow greater than 0 stablecoin - Must be below the debt ceiling when borrowing - Must maintain minimum collateral percentage Emits BorrowToken event"
      },
      "checkCost(uint256)": {
        "details": "checks cost of liquidating"
      },
      "checkExtract(uint256)": {
        "details": "checks how much token gets extract"
      },
      "checkLiquidation(uint256)": {
        "details": "checks if the vault can be liquidated"
      },
      "createVault()": {
        "details": "Create a vault for interacting with the platform Emits a CreateVault event"
      },
      "depositCollateral(uint256,uint256)": {
        "details": "ALlows vault owner to deposit ERC20 collateral Emits Deposit Collateral event"
      },
      "destroyVault(uint256)": {
        "details": "User can destroy a vault. Will return all collateral upon destroying. Emits a DestroyVault event Requirements: - User must have paid off all outstanding debt first"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getPaid(address)": {
        "details": "pays the user Returns the ERC20 token that was liquidated"
      },
      "getPricePeg()": {
        "details": "returns the peg "
      },
      "getPriceSource()": {
        "details": "returns the chainlink pricefeed price"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "liquidateVault(uint256)": {
        "details": "allows liquidator to buy out a risky vault Requirements: - Vault id must exist - Vault must be below minimum collateral percentage - User must have enough of the token to pay vault off Emits BuyRiskyVault event"
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "payBackToken(uint256,uint256)": {
        "details": "Pay back the stablecoin to reduce debt Requirements: - User must have enough balance to repay `amount` - Cannot pay back more than the required debt. `amount` must be less than debt."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setClosingFee(uint256)": {
        "details": "Set the closing fee for this vault"
      },
      "setDebtCeiling(uint256)": {
        "details": "Set the debt ceiling for this vault"
      },
      "setDebtRatio(uint256)": {
        "details": "sets the debt ratio"
      },
      "setGainRatio(uint256)": {
        "details": "sets the gain ratio"
      },
      "setGateway(address)": {
        "details": "Set the WAVAX gateway for this vault if it needs one"
      },
      "setMinimumDebt(uint256)": {
        "details": "sets the minimum debt"
      },
      "setOpeningFee(uint256)": {
        "details": "Set the opening fee for this vault"
      },
      "setPriceSource(address)": {
        "details": "Set the price source for this vault"
      },
      "setStabilityPool(address)": {
        "details": "Set the stability pool (liquidator) for this vault"
      },
      "setTokenPeg(uint256)": {
        "details": "Set the token peg for this vault"
      },
      "setTreasury(uint256)": {
        "details": "Set the treasury vault for this vault (vault that gets all the fees)"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferVault(uint256,address)": {
        "details": "user can transfer vault to another address Emits TransferVault event"
      },
      "vaultExists(uint256)": {
        "details": "allows checking if vault exists or not"
      },
      "withdrawCollateral(uint256,uint256)": {
        "details": "allows vault owner to withdraw the collateral Requirements: - Withdraw amount is less than or equal to current collateral - Collateral withdrawal amount does not put debt below minimum collateral Emits WithdrawCollateral event"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "minimumCollateralPercentage()": {
        "notice": "Set all of these upon initalization"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 594,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 597,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3406,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4245,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1743,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1745,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1749,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1753,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1757,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1763,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2559,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2733,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2737,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2740,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2744,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3059,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 761,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 804,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 94,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)89_storage)"
      },
      {
        "astId": 379,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8626,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "_userVaultIds",
        "offset": 0,
        "slot": "301",
        "type": "t_struct(Counter)3413_storage"
      },
      {
        "astId": 8629,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "minimumCollateralPercentage",
        "offset": 0,
        "slot": "302",
        "type": "t_uint256"
      },
      {
        "astId": 8631,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "debtCeiling",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 8633,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "closingFee",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 8635,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "openingFee",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 8637,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "tokenPeg",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 8639,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "totalDebt",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 8641,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "debtRatio",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 8643,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "gainRatio",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 8647,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "tokenDebt",
        "offset": 0,
        "slot": "310",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8650,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "priceSource",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 8653,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "token",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IERC20)5519"
      },
      {
        "astId": 8656,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "stablecoin",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(IStablecoin)15477"
      },
      {
        "astId": 8658,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "stabilityPool",
        "offset": 0,
        "slot": "314",
        "type": "t_address"
      },
      {
        "astId": 8660,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "gateway",
        "offset": 0,
        "slot": "315",
        "type": "t_address"
      },
      {
        "astId": 8662,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "treasury",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      },
      {
        "astId": 8666,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "vaultExistence",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 8670,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "vaultCollateral",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8674,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "vaultDebt",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8676,
        "contract": "apps/avai/src/contracts/Bank.sol:Bank",
        "label": "minimumDebt",
        "offset": 0,
        "slot": "320",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5519": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStablecoin)15477": {
        "encoding": "inplace",
        "label": "contract IStablecoin",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)89_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)89_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3413_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 3412,
            "contract": "apps/avai/src/contracts/Bank.sol:Bank",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)89_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 86,
            "contract": "apps/avai/src/contracts/Bank.sol:Bank",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 88,
            "contract": "apps/avai/src/contracts/Bank.sol:Bank",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}