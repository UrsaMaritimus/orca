{
  "address": "0x59A24B6E1bDDc15b3aD844B0DfcD86421363F62c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pod",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_orca",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wavax",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_seafund",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dev",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_orcaLP",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdcLP",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bank",
          "type": "address"
        }
      ],
      "name": "addBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "addLPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "addSwapLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yak",
          "type": "address"
        }
      ],
      "name": "addYakStrat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "banks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dev",
          "type": "address"
        }
      ],
      "name": "changeDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_treasuryAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_devAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seafundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_podAmount",
          "type": "uint256"
        }
      ],
      "name": "changeDistributionRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seafund",
          "type": "address"
        }
      ],
      "name": "changeSeafund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "changeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBankCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLPTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYakCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pod",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "podAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bankIndex",
          "type": "uint256"
        }
      ],
      "name": "removeBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpIndex",
          "type": "uint256"
        }
      ],
      "name": "removeLPToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "yakIndex",
          "type": "uint256"
        }
      ],
      "name": "removeYakStrat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "replaceSwapLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seafund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seafundAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swapLPs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferAvax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bank",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vault",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferBankVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "yakStrats",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4427d31b6346800b4e167c6eec412411c43b6c85d3f8ead5191a3c9702351935",
  "receipt": {
    "to": null,
    "from": "0x9F8A5B35f5508071cf2304A670EAB0803F3737aa",
    "contractAddress": "0x59A24B6E1bDDc15b3aD844B0DfcD86421363F62c",
    "transactionIndex": 0,
    "gasUsed": "3012232",
    "logsBloom": "0x
    "blockHash": "0xf35ce7af2d2022d1a474c5351a66aa8fd5d571bd8d092283ac4d1f1f7209552a",
    "transactionHash": "0x4427d31b6346800b4e167c6eec412411c43b6c85d3f8ead5191a3c9702351935",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6963852,
        "transactionHash": "0x4427d31b6346800b4e167c6eec412411c43b6c85d3f8ead5191a3c9702351935",
        "address": "0x59A24B6E1bDDc15b3aD844B0DfcD86421363F62c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009f8a5b35f5508071cf2304a670eab0803f3737aa"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf35ce7af2d2022d1a474c5351a66aa8fd5d571bd8d092283ac4d1f1f7209552a"
      }
    ],
    "blockNumber": 6963852,
    "cumulativeGasUsed": "3012232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x783d6aba0d0754a4b3e1d1d92a80cb45d8fb40c8",
    "0x8b1d98a91f853218ddbb066f20b8c63e782e2430",
    "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
    "0xa7d7079b0fead91f3e65f86e8915cb59c1a4c664",
    "0xcb660A14A6612E0627A4516c3DCdB3838b1190e9",
    "0x10131d4f3193a59A46d3ab57D765f2604e77B4E3",
    "0x274280b26debd319c52f611b59926f8f00373907",
    "0x73e6CB72a79dEa7ed75EF5eD6f8cFf86C9128eF5",
    "0xbd918Ed441767fe7924e99F6a0E0B568ac1970D9"
  ],
  "solcInputHash": "d27c78da57981b92647bbc49051aec41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pod\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_orca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wavax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seafund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_orcaLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcLP\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bank\",\"type\":\"address\"}],\"name\":\"addBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"addLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"addSwapLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yak\",\"type\":\"address\"}],\"name\":\"addYakStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"banks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seafundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_podAmount\",\"type\":\"uint256\"}],\"name\":\"changeDistributionRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seafund\",\"type\":\"address\"}],\"name\":\"changeSeafund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBankCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYakCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pod\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"podAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bankIndex\",\"type\":\"uint256\"}],\"name\":\"removeBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpIndex\",\"type\":\"uint256\"}],\"name\":\"removeLPToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yakIndex\",\"type\":\"uint256\"}],\"name\":\"removeYakStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"replaceSwapLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seafund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seafundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLPs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAvax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferBankVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yakStrats\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBank(address)\":{\"params\":{\"bank\":\"The address of the bank\"}},\"addLPToken(address)\":{\"params\":{\"lp\":\"The address of the LP token\"}},\"addSwapLP(address,address)\":{\"params\":{\"lp\":\"The address of the LP token\"}},\"addYakStrat(address)\":{\"params\":{\"yak\":\"The address of the yak\"}},\"changeDev(address)\":{\"params\":{\"_dev\":\"The address of the LP token\"}},\"changeDistributionRatio(uint256,uint256,uint256,uint256)\":{\"params\":{\"_devAmount\":\"The dev amount\",\"_podAmount\":\"The pod amount\",\"_seafundAmount\":\"The seafund amount\",\"_treasuryAmount\":\"The treasury amount\"}},\"changeSeafund(address)\":{\"params\":{\"_seafund\":\"The address of the LP token\"}},\"changeTreasury(address)\":{\"params\":{\"_treasury\":\"The address of the LP token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeBank(uint256)\":{\"params\":{\"bankIndex\":\"The index of the bank\"}},\"removeLPToken(uint256)\":{\"params\":{\"lpIndex\":\"The index of the LP token\"}},\"removeYakStrat(uint256)\":{\"params\":{\"yakIndex\":\"The index of the yak token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"replaceSwapLP(address,address)\":{\"params\":{\"token\":\"The i\"}},\"transferAvax(address,uint256)\":{\"params\":{\"_amount\":\"The amount to send\",\"_to\":\"The address to send it to\"}},\"transferBankVault(uint256,uint256,address)\":{\"params\":{\"bank\":\"The bank id\",\"to\":\"who you're transfering it to\",\"vault\":\"the vault id\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferToken(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount to send\",\"_to\":\"The address to send it to\",\"_token\":\"The token to send\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBank(address)\":{\"notice\":\"Adds a bank that this can get fees from\"},\"addLPToken(address)\":{\"notice\":\"Adds a LP token, to allow transfering\"},\"addSwapLP(address,address)\":{\"notice\":\"Adds a LP token, to allow transfering\"},\"addYakStrat(address)\":{\"notice\":\"Adds a yield yak token, to allow withdrawing\"},\"allocate()\":{\"notice\":\"For allocating the revenue to the correct locations.\"},\"changeDev(address)\":{\"notice\":\"Adds a LP token, to allow transfering\"},\"changeDistributionRatio(uint256,uint256,uint256,uint256)\":{\"notice\":\"Changes distribution ratio\"},\"changeSeafund(address)\":{\"notice\":\"Adds a LP token, to allow transfering\"},\"changeTreasury(address)\":{\"notice\":\"Adds a LP token, to allow transfering\"},\"constructor\":{\"notice\":\"Initializes the Adder. We are doing proxy here as we might add seperate fees that need to be converted later. Easier than changing treasuries over.\"},\"getBankCount()\":{\"notice\":\"Gets the numbers of banks this account controls\"},\"getLPTokens()\":{\"notice\":\"Gets the number of LP tokens this account controls\"},\"getTokens()\":{\"notice\":\"Gets the number of tokens this account controls\"},\"getYakCount()\":{\"notice\":\"Gets the number of yield yak banks (tokens) this account controls\"},\"removeBank(uint256)\":{\"notice\":\"removes a bank after being added\"},\"removeLPToken(uint256)\":{\"notice\":\"removes a bank after being added\"},\"removeYakStrat(uint256)\":{\"notice\":\"removes a bank after being added\"},\"replaceSwapLP(address,address)\":{\"notice\":\"removes a bank after being added\"},\"transferAvax(address,uint256)\":{\"notice\":\"Safe function to ensure we can emergency remove things\"},\"transferBankVault(uint256,uint256,address)\":{\"notice\":\"for transfering treasury bank vault. Only use if changing contracts.\"},\"transferToken(address,address,uint256)\":{\"notice\":\"Safe function to ensure we can emergency remove things\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"apps/avai/src/contracts/OrcaAdder.sol\":\"OrcaAdder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"apps/avai/src/contracts/OrcaAdder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport './interfaces/IBank.sol';\\nimport './interfaces/IYakStrategy.sol';\\nimport './interfaces/IPair.sol';\\nimport './interfaces/IWAVAX.sol';\\nimport './lib/DexLibrary.sol';\\n\\ncontract OrcaAdder is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 public pod;\\n  IERC20 private orca;\\n  IWAVAX private wavax;\\n  IERC20 private usdc;\\n\\n  address private orcaLP;\\n  address private usdcLP;\\n\\n  address public seafund;\\n  address public treasury;\\n  address public dev;\\n\\n  uint256 public treasuryAmount;\\n  uint256 public devAmount;\\n  uint256 public seafundAmount;\\n  uint256 public podAmount;\\n\\n  address[] public banks;\\n  address[] public yakStrats;\\n  address[] public lpTokens;\\n  address[] public tokens;\\n  mapping(address => address) public swapLPs;\\n\\n  /**\\n   * @notice Initializes the Adder. We are doing proxy here as we might add seperate fees that need to be converted later. Easier than changing treasuries over.\\n   */\\n  constructor(\\n    address _pod,\\n    address _orca,\\n    address _wavax,\\n    address _usdc,\\n    address _seafund,\\n    address _treasury,\\n    address _dev,\\n    address _orcaLP,\\n    address _usdcLP\\n  ) {\\n    require(_pod != address(0), 'Pod cannot be zero address');\\n    require(_orca != address(0), 'ORCA cannot be zero address');\\n    require(_wavax != address(0), 'WAVAX cannot be zero address');\\n    require(_usdc != address(0), 'USDC cannot be zero address');\\n    require(_seafund != address(0), 'Seafund cannot be zero address');\\n    require(_treasury != address(0), 'Treasury cannot be zero address');\\n    require(_dev != address(0), 'Dev cannot be zero address');\\n    require(_orcaLP != address(0), 'ORCA LP cannot be zero address');\\n    require(_usdcLP != address(0), 'USDC LP cannot be zero address');\\n\\n    pod = IERC20(_pod);\\n    orca = IERC20(_orca);\\n    wavax = IWAVAX(_wavax);\\n    usdc = IERC20(_usdc);\\n\\n    seafund = _seafund;\\n    treasury = _treasury;\\n    dev = _dev;\\n\\n    devAmount = 500;\\n    seafundAmount = 1500;\\n    treasuryAmount = 4000;\\n    podAmount = 4000;\\n\\n    orcaLP = _orcaLP;\\n    usdcLP = _usdcLP;\\n  }\\n\\n  modifier onlyEOA() {\\n    // Try to make flash-loan exploit harder to do by only allowing externally owned addresses.\\n    require(msg.sender == tx.origin, 'OrcaAdder: must use EOA');\\n    _;\\n  }\\n\\n  /**\\n   * @notice Gets the numbers of banks this account controls\\n   */\\n  function getBankCount() public view returns (uint256) {\\n    return banks.length;\\n  }\\n\\n  /**\\n   * @notice Gets the number of yield yak banks (tokens) this account controls\\n   */\\n  function getYakCount() public view returns (uint256) {\\n    return yakStrats.length;\\n  }\\n\\n  /**\\n   * @notice Gets the number of LP tokens this account controls\\n   */\\n  function getLPTokens() public view returns (uint256) {\\n    return lpTokens.length;\\n  }\\n\\n  /**\\n   * @notice Gets the number of tokens this account controls\\n   */\\n  function getTokens() public view returns (uint256) {\\n    return tokens.length;\\n  }\\n\\n  /**\\n   * @notice Adds a bank that this can get fees from\\n   * @param bank The address of the bank\\n   */\\n  function addBank(address bank) public onlyOwner {\\n    require(bank != address(0), 'Cannot add a bank with zero address');\\n    banks.push(bank);\\n  }\\n\\n  /**\\n   * @notice removes a bank after being added\\n   * @param bankIndex The index of the bank\\n   */\\n  function removeBank(uint256 bankIndex) public onlyOwner {\\n    require(bankIndex < getBankCount(), 'Index does not exist');\\n    for (uint256 i = bankIndex; i < getBankCount() - 1; i++) {\\n      banks[i] = banks[i + 1];\\n    }\\n    banks.pop();\\n  }\\n\\n  /**\\n   * @notice Adds a yield yak token, to allow withdrawing\\n   * @param yak The address of the yak\\n   */\\n  function addYakStrat(address yak) public onlyOwner {\\n    require(yak != address(0), 'Cannot add a yakStrat with zero address');\\n    yakStrats.push(yak);\\n  }\\n\\n  /**\\n   * @notice removes a bank after being added\\n   * @param yakIndex The index of the yak token\\n   */\\n  function removeYakStrat(uint256 yakIndex) public onlyOwner {\\n    require(yakIndex < getYakCount(), 'Index does not exist');\\n    for (uint256 i = yakIndex; i < getYakCount() - 1; i++) {\\n      yakStrats[i] = yakStrats[i + 1];\\n    }\\n    yakStrats.pop();\\n  }\\n\\n  /**\\n   * @notice Adds a LP token, to allow transfering\\n   * @param lp The address of the LP token\\n   */\\n  function addLPToken(address lp) public onlyOwner {\\n    require(lp != address(0), 'Cannot add a LP token with zero address');\\n    lpTokens.push(lp);\\n  }\\n\\n  /**\\n   * @notice removes a bank after being added\\n   * @param lpIndex The index of the LP token\\n   */\\n  function removeLPToken(uint256 lpIndex) public onlyOwner {\\n    require(lpIndex < getLPTokens(), 'Index does not exist');\\n    for (uint256 i = lpIndex; i < getLPTokens() - 1; i++) {\\n      lpTokens[i] = lpTokens[i + 1];\\n    }\\n    lpTokens.pop();\\n  }\\n\\n  /**\\n   * @notice Adds a LP token, to allow transfering\\n   * @param lp The address of the LP token\\n   */\\n  function addSwapLP(address token, address lp) public onlyOwner {\\n    require(token != address(0), 'Cannot add a token with zero address');\\n    require(lp != address(0), 'Cannot add a LP token with zero address');\\n    tokens.push(token);\\n    swapLPs[token] = lp;\\n  }\\n\\n  /**\\n   * @notice removes a bank after being added\\n   * @param token The i\\n   */\\n  function replaceSwapLP(address token, address lp) public onlyOwner {\\n    require(swapLPs[token] != address(0), 'Swap does not exist');\\n    require(lp != address(0), 'Cannot add a LP token with zero address');\\n    swapLPs[token] = lp;\\n  }\\n\\n  /**\\n   * @notice Adds a LP token, to allow transfering\\n   * @param _seafund The address of the LP token\\n   */\\n  function changeSeafund(address _seafund) public onlyOwner {\\n    require(_seafund != address(0), 'Seafund cannot be zero address');\\n    seafund = _seafund;\\n  }\\n\\n  /**\\n   * @notice Adds a LP token, to allow transfering\\n   * @param _dev The address of the LP token\\n   */\\n  function changeDev(address _dev) public onlyOwner {\\n    require(_dev != address(0), 'Dev cannot be zero address');\\n    dev = _dev;\\n  }\\n\\n  /**\\n   * @notice Adds a LP token, to allow transfering\\n   * @param _treasury The address of the LP token\\n   */\\n  function changeTreasury(address _treasury) public onlyOwner {\\n    require(_treasury != address(0), 'Treasury cannot be zero address');\\n    treasury = _treasury;\\n  }\\n\\n  /**\\n   * @notice Changes distribution ratio\\n   * @param _treasuryAmount The treasury amount\\n   * @param _devAmount The dev amount\\n   * @param _seafundAmount The seafund amount\\n   * @param _podAmount The pod amount\\n   */\\n  function changeDistributionRatio(\\n    uint256 _treasuryAmount,\\n    uint256 _devAmount,\\n    uint256 _seafundAmount,\\n    uint256 _podAmount\\n  ) public onlyOwner {\\n    require(\\n      _treasuryAmount + _devAmount + _seafundAmount + _podAmount == 10000,\\n      'Must add up to 10000'\\n    );\\n    treasuryAmount = _treasuryAmount;\\n    devAmount = _devAmount;\\n    seafundAmount = _seafundAmount;\\n    podAmount = _podAmount;\\n  }\\n\\n  /**\\n   * @notice Safe function to ensure we can emergency remove things\\n   * @param _to The address to send it to\\n   * @param _token The token to send\\n   * @param _amount The amount to send\\n   */\\n  function transferToken(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) public onlyOwner {\\n    IERC20(_token).safeTransfer(_to, _amount);\\n  }\\n\\n  /**\\n   * @notice Safe function to ensure we can emergency remove things\\n   * @param _to The address to send it to\\n   * @param _amount The amount to send\\n   */\\n  function transferAvax(address payable _to, uint256 _amount)\\n    external\\n    onlyOwner\\n  {\\n    (bool sent, ) = _to.call{value: _amount}('');\\n    require(sent, 'failed to send avax');\\n  }\\n\\n  /**\\n   * @notice for transfering treasury bank vault. Only use if changing contracts.\\n   * @param bank The bank id\\n   * @param vault the vault id\\n   * @param to who you're transfering it to\\n   */\\n  function transferBankVault(\\n    uint256 bank,\\n    uint256 vault,\\n    address to\\n  ) public onlyOwner {\\n    require(bank < getBankCount(), 'Bank does not exist');\\n    require(to != address(0), 'Cannot transfer to zero address');\\n    IBank(banks[bank]).transferVault(vault, to);\\n  }\\n\\n  /**\\n   * @notice For allocating the revenue to the correct locations.\\n   */\\n  function allocate() public onlyEOA {\\n    // Withdraw collaterals from banks\\n    for (uint256 i = 0; i < getBankCount(); i++) {\\n      IBank bank = IBank(banks[i]);\\n      if (bank.balanceOf(address(this)) > 0) {\\n        uint256 vault = bank.tokenOfOwnerByIndex(address(this), 0);\\n        uint256 collateral = bank.vaultCollateral(vault);\\n        bank.withdrawCollateral(vault, collateral);\\n      }\\n    }\\n\\n    // Withdraw from yield yak\\n    for (uint256 i = 0; i < getYakCount(); i++) {\\n      IYakStrategy yakStrat = IYakStrategy(yakStrats[i]);\\n      uint256 balance = yakStrat.balanceOf(address(this));\\n      if (balance > 10000) {\\n        try yakStrat.withdraw(balance) {} catch {}\\n      }\\n    }\\n\\n    // Convert LPs\\n    for (uint256 i = 0; i < getLPTokens(); i++) {\\n      IPair pair = IPair(address(lpTokens[i]));\\n      if (pair.balanceOf(address(this)) > 0) {\\n        DexLibrary.removeLiquidity(lpTokens[i]);\\n      }\\n    }\\n\\n    // Convert everything to avax\\n    for (uint256 i = 0; i < getTokens(); i++) {\\n      address token = tokens[i];\\n      IPair pair = IPair(swapLPs[tokens[i]]);\\n      if (address(pair) != address(0)) {\\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n        if (tokenBalance > 10000) {\\n          DexLibrary.swap(tokenBalance, token, address(wavax), pair);\\n        }\\n      }\\n    }\\n\\n    // Convert USDC to wavax if we have any\\n    if (usdc.balanceOf(address(this)) > 0) {\\n      // Convert wavax to usdc\\n      DexLibrary.swap(\\n        usdc.balanceOf(address(this)),\\n        address(usdc),\\n        address(wavax),\\n        IPair(usdcLP)\\n      );\\n    }\\n\\n    // Convert avax to wavax if we have any\\n    uint256 avaxBalance = address(this).balance;\\n    wavax.deposit{value: avaxBalance}();\\n\\n    // Convert correct amount of WAVAX to ORCA\\n    uint256 wavaxBalance = wavax.balanceOf(address(this));\\n    uint256 wavaxToPod = (wavaxBalance * podAmount) / 10000;\\n    uint256 wavaxToUSDC = (wavaxBalance * (10000 - podAmount)) / 10000;\\n\\n    DexLibrary.swap(wavaxToPod, address(wavax), address(orca), IPair(orcaLP));\\n\\n    // Convert wavax to usdc\\n    DexLibrary.swap(wavaxToUSDC, address(wavax), address(usdc), IPair(usdcLP));\\n\\n    // Send off orca\\n    orca.safeTransfer(address(pod), orca.balanceOf(address(this)));\\n\\n    // send off usdc\\n    uint256 usdcBalance = usdc.balanceOf(address(this));\\n\\n    // Seafund\\n    usdc.safeTransfer(\\n      seafund,\\n      (usdcBalance * seafundAmount) / (10000 - podAmount)\\n    );\\n\\n    // Treasury\\n    usdc.safeTransfer(\\n      treasury,\\n      (usdcBalance * treasuryAmount) / (10000 - podAmount)\\n    );\\n\\n    // dev\\n    usdc.safeTransfer(dev, usdc.balanceOf(address(this)));\\n\\n    // DONE!\\n  }\\n\\n  receive() external payable {}\\n}\\n\",\"keccak256\":\"0x86c1ef1ebde681d28ce3e8ae028c76bbdf80e4d996faf6c9be5edf33430053b8\",\"license\":\"MIT\"},\"apps/avai/src/contracts/interfaces/IBank.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\ninterface IBank is IERC721, IERC721Enumerable {\\n  function vaultCollateral(uint256 vaultID) external view returns (uint256);\\n\\n  function transferVault(uint256 vaultID, address to) external;\\n\\n  function vaultExists(uint256 vaultID) external view returns (bool);\\n\\n  function depositCollateral(uint256 vaultID, uint256 amount) external;\\n\\n  function withdrawCollateral(uint256 vaultID, uint256 amount) external;\\n\\n  function destroyVault(uint256 vaultID) external;\\n\\n  function getPaid(address user) external;\\n\\n  function changeTreasury(address to) external;\\n\\n  function setGainRatio(uint256 gainRatio_) external;\\n\\n  function setDebtRatio(uint256 debtRatio_) external;\\n\\n  function setDebtCeiling(uint256 debtCeiling_) external;\\n\\n  function setPriceSource(address priceSource_) external;\\n\\n  function setTokenPeg(uint256 tokenPeg_) external;\\n\\n  function setStabilityPool(address stabilityPool_) external;\\n\\n  function setGateway(address gateway_) external;\\n\\n  function setClosingFee(uint256 amount) external;\\n\\n  function setOpeningFee(uint256 amount) external;\\n\\n  function setTreasury(uint256 treasury_) external;\\n\\n  function setMinimumDebt(uint256 minimumDebt_) external;\\n\\n  function setMintingPaused(bool paused_) external;\\n\\n  function setMinimumCollateralPercentage(uint256 mcp_) external;\\n\\n  function initialize(\\n    uint256 minimumCollateralPercentage_,\\n    address priceSource_,\\n    string memory name_,\\n    string memory symbol_,\\n    address token_,\\n    address owner\\n  ) external;\\n}\\n\",\"keccak256\":\"0x10dfecee32dce36845d0d54ab58d51a5d21a28765bdbaac3e70891eaf6f72c34\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x3b6e30eb451543cc8de710f219eec53cb273b557fa0e5ceeda89b0b21c9ca999\",\"license\":\"MIT\"},\"apps/avai/src/contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IWAVAX {\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x98e42e266f86f4f562b276d9808e34c55176c14f3ab638b8e010eb0a03fec434\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/interfaces/IYakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\ninterface IYakStrategy is IERC20Metadata {\\n  function getSharesForDepositTokens(uint256 amount)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function getDepositTokensForShares(uint256 amount)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function totalDeposits() external view returns (uint256);\\n\\n  function estimateReinvestReward() external view returns (uint256);\\n\\n  function checkReward() external view returns (uint256);\\n\\n  function estimateDeployedBalance() external view returns (uint256);\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function deposit(uint256 amount) external;\\n\\n  function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x817b92106864df6c9e8b2dfc09c730470d9dc5ef8a7725151a871cd64cb42c02\",\"license\":\"agpl-3.0\"},\"apps/avai/src/contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport '../interfaces/IPair.sol';\\nimport '../interfaces/IWAVAX.sol';\\n\\nlibrary DexLibrary {\\n  bytes private constant zeroBytes = new bytes(0);\\n  IWAVAX private constant WAVAX =\\n    IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n  /**\\n   * @notice Swap directly through a Pair\\n   * @param amountIn input amount\\n   * @param fromToken address\\n   * @param toToken address\\n   * @param pair Pair used for swap\\n   * @return output amount\\n   */\\n  function swap(\\n    uint256 amountIn,\\n    address fromToken,\\n    address toToken,\\n    IPair pair\\n  ) internal returns (uint256) {\\n    (address token0, ) = sortTokens(fromToken, toToken);\\n    (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n    if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n    uint256 amountOut1 = 0;\\n    uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n    if (token0 != fromToken)\\n      (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n    safeTransfer(fromToken, address(pair), amountIn);\\n    pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n    return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n  }\\n\\n  function checkSwapPairCompatibility(\\n    IPair pair,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (bool) {\\n    return\\n      (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n      (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n      tokenA != tokenB;\\n  }\\n\\n  function estimateConversionThroughPair(\\n    uint256 amountIn,\\n    address fromToken,\\n    address toToken,\\n    IPair swapPair\\n  ) internal view returns (uint256) {\\n    (address token0, ) = sortTokens(fromToken, toToken);\\n    (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n    if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n    return getAmountOut(amountIn, reserve0, reserve1);\\n  }\\n\\n  /**\\n   * @notice Converts reward tokens to deposit tokens\\n   * @dev No price checks enforced\\n   * @param amount reward tokens\\n   * @return deposit tokens\\n   */\\n  function convertRewardTokensToDepositTokens(\\n    uint256 amount,\\n    address rewardToken,\\n    address depositToken,\\n    IPair swapPairToken0,\\n    IPair swapPairToken1\\n  ) internal returns (uint256) {\\n    uint256 amountIn = amount / 2;\\n    require(amountIn > 0, 'DexLibrary::_convertRewardTokensToDepositTokens');\\n\\n    address token0 = IPair(depositToken).token0();\\n    uint256 amountOutToken0 = amountIn;\\n    if (rewardToken != token0) {\\n      amountOutToken0 = DexLibrary.swap(\\n        amountIn,\\n        rewardToken,\\n        token0,\\n        swapPairToken0\\n      );\\n    }\\n\\n    address token1 = IPair(depositToken).token1();\\n    uint256 amountOutToken1 = amountIn;\\n    if (rewardToken != token1) {\\n      amountOutToken1 = DexLibrary.swap(\\n        amountIn,\\n        rewardToken,\\n        token1,\\n        swapPairToken1\\n      );\\n    }\\n\\n    return\\n      DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n  }\\n\\n  /**\\n   * @notice Add liquidity directly through a Pair\\n   * @dev Checks adding the max of each token amount\\n   * @param depositToken address\\n   * @param maxAmountIn0 amount token0\\n   * @param maxAmountIn1 amount token1\\n   * @return liquidity tokens\\n   */\\n  function addLiquidity(\\n    address depositToken,\\n    uint256 maxAmountIn0,\\n    uint256 maxAmountIn1\\n  ) internal returns (uint256) {\\n    (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken))\\n      .getReserves();\\n    uint256 amountIn1 = _quoteLiquidityAmountOut(\\n      maxAmountIn0,\\n      reserve0,\\n      reserve1\\n    );\\n    if (amountIn1 > maxAmountIn1) {\\n      amountIn1 = maxAmountIn1;\\n      maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n    }\\n\\n    safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n    safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n    return IPair(depositToken).mint(address(this));\\n  }\\n\\n  /**\\n   * @notice Add liquidity directly through a Pair\\n   * @dev Checks adding the max of each token amount\\n   * @param depositToken address\\n   * @return amounts of each token returned\\n   */\\n  function removeLiquidity(address depositToken)\\n    internal\\n    returns (uint256, uint256)\\n  {\\n    IPair pair = IPair(address(depositToken));\\n    require(address(pair) != address(0), 'Invalid pair for removingliquidity');\\n\\n    safeTransfer(depositToken, depositToken, pair.balanceOf(address(this)));\\n    (uint256 amount0, uint256 amount1) = pair.burn(address(this));\\n\\n    return (amount0, amount1);\\n  }\\n\\n  /**\\n   * @notice Quote liquidity amount out\\n   * @param amountIn input tokens\\n   * @param reserve0 size of input asset reserve\\n   * @param reserve1 size of output asset reserve\\n   * @return liquidity tokens\\n   */\\n  function _quoteLiquidityAmountOut(\\n    uint256 amountIn,\\n    uint256 reserve0,\\n    uint256 reserve1\\n  ) private pure returns (uint256) {\\n    return (amountIn * reserve1) / reserve0;\\n  }\\n\\n  /**\\n   * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n   * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n   * @param tokenA address\\n   * @param tokenB address\\n   * @return sorted tokens\\n   */\\n  function sortTokens(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address, address)\\n  {\\n    return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n  }\\n\\n  /**\\n   * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n   * @dev Assumes swap fee is 0.30%\\n   * @param amountIn input asset\\n   * @param reserveIn size of input asset reserve\\n   * @param reserveOut size of output asset reserve\\n   * @return maximum output amount\\n   */\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) internal pure returns (uint256) {\\n    uint256 amountInWithFee = amountIn * 997;\\n    uint256 numerator = amountInWithFee * reserveOut;\\n    uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n    return numerator / denominator;\\n  }\\n\\n  /**\\n   * @notice Safely transfer using an anonymous ERC20 token\\n   * @dev Requires token to return true on transfer\\n   * @param token address\\n   * @param to recipient address\\n   * @param value amount\\n   */\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    require(\\n      IERC20(token).transfer(to, value),\\n      'DexLibrary::TRANSFER_FROM_FAILED'\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x5ee508a6f6b152fad8f6828c24090be1f5b6dc07d74e0a34345fd67110cd7193\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620034d8380380620034d8833981016040819052620000349162000480565b6200003f3362000413565b6001600160a01b0389166200009b5760405162461bcd60e51b815260206004820152601a60248201527f506f642063616e6e6f74206265207a65726f206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b038816620000f35760405162461bcd60e51b815260206004820152601b60248201527f4f5243412063616e6e6f74206265207a65726f20616464726573730000000000604482015260640162000092565b6001600160a01b0387166200014b5760405162461bcd60e51b815260206004820152601c60248201527f57415641582063616e6e6f74206265207a65726f206164647265737300000000604482015260640162000092565b6001600160a01b038616620001a35760405162461bcd60e51b815260206004820152601b60248201527f555344432063616e6e6f74206265207a65726f20616464726573730000000000604482015260640162000092565b6001600160a01b038516620001fb5760405162461bcd60e51b815260206004820152601e60248201527f53656166756e642063616e6e6f74206265207a65726f20616464726573730000604482015260640162000092565b6001600160a01b038416620002535760405162461bcd60e51b815260206004820152601f60248201527f54726561737572792063616e6e6f74206265207a65726f206164647265737300604482015260640162000092565b6001600160a01b038316620002ab5760405162461bcd60e51b815260206004820152601a60248201527f4465762063616e6e6f74206265207a65726f2061646472657373000000000000604482015260640162000092565b6001600160a01b038216620003035760405162461bcd60e51b815260206004820152601e60248201527f4f524341204c502063616e6e6f74206265207a65726f20616464726573730000604482015260640162000092565b6001600160a01b0381166200035b5760405162461bcd60e51b815260206004820152601e60248201527f55534443204c502063616e6e6f74206265207a65726f20616464726573730000604482015260640162000092565b600180546001600160a01b03199081166001600160a01b039b8c1617909155600280548216998b1699909917909855600380548916978a169790971790965560048054881695891695909517909455600780548716938816939093179092556008805486169187169190911790556009805485169186169190911790556101f4600b556105dc600c55610fa0600a819055600d556005805484169185169190911790556006805490921692169190911790556200053a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200047b57600080fd5b919050565b60008060008060008060008060006101208a8c0312156200049f578485fd5b620004aa8a62000463565b9850620004ba60208b0162000463565b9750620004ca60408b0162000463565b9650620004da60608b0162000463565b9550620004ea60808b0162000463565b9450620004fa60a08b0162000463565b93506200050a60c08b0162000463565b92506200051a60e08b0162000463565b91506200052b6101008b0162000463565b90509295985092959850929598565b612f8e806200054a6000396000f3fe6080604052600436106102525760003560e01c80638da5cb5b11610138578063bc1080bd116100b0578063eb1dd3041161007f578063f2fde38b11610064578063f2fde38b1461063b578063f5537ede1461065b578063f8d65fdb1461067b57600080fd5b8063eb1dd304146105fb578063ee9761691461061b57600080fd5b8063bc1080bd14610585578063cda3c5af146105a5578063d2aa23e0146105c5578063d9e7a836146105e557600080fd5b8063a88dbb3611610107578063abaa9916116100ec578063abaa991614610530578063b14f2a3914610545578063b214cc031461056557600080fd5b8063a88dbb36146104fb578063aa6ca8081461051b57600080fd5b80638da5cb5b1461047d57806391cca3db1461049b57806393c78673146104bb57806394722397146104db57600080fd5b80633fa68a35116101cb578063715018a61161019a5780637b1ef33b1161017f5780637b1ef33b1461041d57806388a8c95c1461043d578063895065541461045d57600080fd5b8063715018a6146103e857806377db2c17146103fd57600080fd5b80633fa68a35146103725780634f64b2be1461038857806352c84306146103a857806361d027b3146103c857600080fd5b80631bb5e2dc116102225780632e44715d116102075780632e44715d14610327578063368acb091461033c5780633ad3bfa81461035257600080fd5b80631bb5e2dc146102f15780632b3459641461031157600080fd5b806285ae2b1461025e578063042950161461029b5780631224abfb146102bd5780631595eb0b146102dc57600080fd5b3661025957005b600080fd5b34801561026a57600080fd5b5061027e610279366004612d10565b6106b1565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102a757600080fd5b506102bb6102b6366004612d90565b6106db565b005b3480156102c957600080fd5b506010545b604051908152602001610292565b3480156102e857600080fd5b50600f546102ce565b3480156102fd57600080fd5b5061027e61030c366004612d10565b6107ac565b34801561031d57600080fd5b506102ce600b5481565b34801561033357600080fd5b50600e546102ce565b34801561034857600080fd5b506102ce600a5481565b34801561035e57600080fd5b506102bb61036d366004612d10565b6107bc565b34801561037e57600080fd5b506102ce600c5481565b34801561039457600080fd5b5061027e6103a3366004612d10565b610958565b3480156103b457600080fd5b506102bb6103c3366004612c2a565b610968565b3480156103d457600080fd5b5060085461027e906001600160a01b031681565b3480156103f457600080fd5b506102bb610af8565b34801561040957600080fd5b506102bb610418366004612be3565b610b4c565b34801561042957600080fd5b5061027e610438366004612d10565b610c4c565b34801561044957600080fd5b506102bb610458366004612be3565b610c5c565b34801561046957600080fd5b506102bb610478366004612c2a565b610d1c565b34801561048957600080fd5b506000546001600160a01b031661027e565b3480156104a757600080fd5b5060095461027e906001600160a01b031681565b3480156104c757600080fd5b506102bb6104d6366004612d10565b610e5f565b3480156104e757600080fd5b506102bb6104f6366004612be3565b610fd6565b34801561050757600080fd5b5060015461027e906001600160a01b031681565b34801561052757600080fd5b506011546102ce565b34801561053c57600080fd5b506102bb6110ec565b34801561055157600080fd5b506102bb610560366004612be3565b611c4d565b34801561057157600080fd5b506102bb610580366004612be3565b611d0d565b34801561059157600080fd5b506102bb6105a0366004612d63565b611e0d565b3480156105b157600080fd5b5060075461027e906001600160a01b031681565b3480156105d157600080fd5b506102bb6105e0366004612be3565b611faa565b3480156105f157600080fd5b506102ce600d5481565b34801561060757600080fd5b506102bb610616366004612bff565b61206a565b34801561062757600080fd5b506102bb610636366004612d10565b61215a565b34801561064757600080fd5b506102bb610656366004612be3565b6122d1565b34801561066757600080fd5b506102bb610676366004612c62565b6123a1565b34801561068757600080fd5b5061027e610696366004612be3565b6012602052600090815260409020546001600160a01b031681565b600e81815481106106c157600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146107285760405162461bcd60e51b81526020600482018190526024820152600080516020612f3983398151915260448201526064015b60405180910390fd5b80826107348587612e54565b61073e9190612e54565b6107489190612e54565b612710146107985760405162461bcd60e51b815260206004820152601460248201527f4d7573742061646420757020746f203130303030000000000000000000000000604482015260640161071f565b600a93909355600b91909155600c55600d55565b601081815481106106c157600080fd5b6000546001600160a01b031633146108045760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b600e5481106108555760405162461bcd60e51b815260206004820152601460248201527f496e64657820646f6573206e6f74206578697374000000000000000000000000604482015260640161071f565b805b6001610862600e5490565b61086c9190612eab565b81101561091357600e610880826001612e54565b8154811061089e57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600e80546001600160a01b0390921691839081106108d857634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061090b81612ef2565b915050610857565b50600e80548061093357634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b031916905501905550565b601181815481106106c157600080fd5b6000546001600160a01b031633146109b05760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038216610a2b5760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420616464206120746f6b656e2077697468207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161071f565b6001600160a01b038116610a915760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f74206164642061204c5020746f6b656e2077697468207a65726f206044820152666164647265737360c81b606482015260840161071f565b60118054600181019091557f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680180546001600160a01b039384166001600160a01b031991821681179092556000918252601260205260409091208054929093169116179055565b6000546001600160a01b03163314610b405760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b610b4a60006123fd565b565b6000546001600160a01b03163314610b945760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038116610bfa5760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f742061646420612079616b53747261742077697468207a65726f206044820152666164647265737360c81b606482015260840161071f565b600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b0392909216919091179055565b600f81815481106106c157600080fd5b6000546001600160a01b03163314610ca45760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038116610cfa5760405162461bcd60e51b815260206004820152601a60248201527f4465762063616e6e6f74206265207a65726f2061646472657373000000000000604482015260640161071f565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d645760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b0382811660009081526012602052604090205416610dcb5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f7420657869737400000000000000000000000000604482015260640161071f565b6001600160a01b038116610e315760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f74206164642061204c5020746f6b656e2077697468207a65726f206044820152666164647265737360c81b606482015260840161071f565b6001600160a01b03918216600090815260126020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b03163314610ea75760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6010548110610ef85760405162461bcd60e51b815260206004820152601460248201527f496e64657820646f6573206e6f74206578697374000000000000000000000000604482015260640161071f565b805b6001610f0560105490565b610f0f9190612eab565b811015610fb6576010610f23826001612e54565b81548110610f4157634e487b7160e01b600052603260045260246000fd5b600091825260209091200154601080546001600160a01b039092169183908110610f7b57634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580610fae81612ef2565b915050610efa565b50601080548061093357634e487b7160e01b600052603160045260246000fd5b6000546001600160a01b0316331461101e5760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b03811661109a5760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f742061646420612062616e6b2077697468207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161071f565b600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0392909216919091179055565b33321461113b5760405162461bcd60e51b815260206004820152601760248201527f4f72636141646465723a206d7573742075736520454f41000000000000000000604482015260640161071f565b60005b600e548110156113bb576000600e828154811061116b57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612d28565b11156113a8576040517f2f745c59000000000000000000000000000000000000000000000000000000008152306004820152600060248201819052906001600160a01b03831690632f745c599060440160206040518083038186803b15801561125957600080fd5b505afa15801561126d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112919190612d28565b6040517fd4a9b2c5000000000000000000000000000000000000000000000000000000008152600481018290529091506000906001600160a01b0384169063d4a9b2c59060240160206040518083038186803b1580156112f057600080fd5b505afa158015611304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113289190612d28565b6040517f767a7b0500000000000000000000000000000000000000000000000000000000815260048101849052602481018290529091506001600160a01b0384169063767a7b0590604401600060405180830381600087803b15801561138d57600080fd5b505af11580156113a1573d6000803e3d6000fd5b5050505050505b50806113b381612ef2565b91505061113e565b5060005b600f54811015611501576000600f82815481106113ec57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561143a57600080fd5b505afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190612d28565b90506127108111156114ec576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b1580156114d957600080fd5b505af19250505080156114ea575060015b505b505080806114f990612ef2565b9150506113bf565b5060005b6010548110156116125760006010828154811061153257634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561158057600080fd5b505afa158015611594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b89190612d28565b11156115ff576115fc601083815481106115e257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661244d565b50505b508061160a81612ef2565b915050611505565b5060005b60115481101561176f5760006011828154811061164357634e487b7160e01b600052603260045260246000fd5b6000918252602082200154601180546001600160a01b0390921693506012918391908690811061168357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054169050801561175a576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156116f857600080fd5b505afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117309190612d28565b90506127108111156117585760035461175690829085906001600160a01b0316856125f4565b505b505b5050808061176790612ef2565b915050611616565b50600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156117b957600080fd5b505afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f19190612d28565b111561189a57600480546040516370a0823160e01b81523092810192909252611898916001600160a01b03909116906370a082319060240160206040518083038186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118799190612d28565b6004546003546006546001600160a01b039283169291821691166125f4565b505b600354604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905147926001600160a01b03169163d0e30db091849160048082019260009290919082900301818588803b1580156118fb57600080fd5b505af115801561190f573d6000803e3d6000fd5b50506003546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a08231915060240160206040518083038186803b15801561195a57600080fd5b505afa15801561196e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119929190612d28565b90506000612710600d54836119a79190612e8c565b6119b19190612e6c565b90506000612710600d546127106119c89190612eab565b6119d29085612e8c565b6119dc9190612e6c565b600354600254600554929350611a039285926001600160a01b0390811692811691166125f4565b50600354600454600654611a299284926001600160a01b039182169290821691166125f4565b506001546002546040516370a0823160e01b8152306004820152611ac1926001600160a01b039081169216906370a082319060240160206040518083038186803b158015611a7657600080fd5b505afa158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae9190612d28565b6002546001600160a01b03169190612795565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611b0a57600080fd5b505afa158015611b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b429190612d28565b600754600d54919250611b91916001600160a01b0390911690611b6790612710612eab565b600c54611b749085612e8c565b611b7e9190612e6c565b6004546001600160a01b03169190612795565b600854600d54611bbe916001600160a01b031690611bb190612710612eab565b600a54611b749085612e8c565b600954600480546040516370a0823160e01b81523092810192909252611c46926001600160a01b03908116929116906370a082319060240160206040518083038186803b158015611c0e57600080fd5b505afa158015611c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7e9190612d28565b5050505050565b6000546001600160a01b03163314611c955760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038116611ceb5760405162461bcd60e51b815260206004820152601f60248201527f54726561737572792063616e6e6f74206265207a65726f206164647265737300604482015260640161071f565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611d555760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038116611dbb5760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f74206164642061204c5020746f6b656e2077697468207a65726f206044820152666164647265737360c81b606482015260840161071f565b601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611e555760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b600e548310611ea65760405162461bcd60e51b815260206004820152601360248201527f42616e6b20646f6573206e6f7420657869737400000000000000000000000000604482015260640161071f565b6001600160a01b038116611efc5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220746f207a65726f206164647265737300604482015260640161071f565b600e8381548110611f1d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517f3e61facd000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03838116602483015290911690633e61facd90604401600060405180830381600087803b158015611f8d57600080fd5b505af1158015611fa1573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b03163314611ff25760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b0381166120485760405162461bcd60e51b815260206004820152601e60248201527f53656166756e642063616e6e6f74206265207a65726f20616464726573730000604482015260640161071f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146120b25760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146120ff576040519150601f19603f3d011682016040523d82523d6000602084013e612104565b606091505b50509050806121555760405162461bcd60e51b815260206004820152601360248201527f6661696c656420746f2073656e64206176617800000000000000000000000000604482015260640161071f565b505050565b6000546001600160a01b031633146121a25760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b600f5481106121f35760405162461bcd60e51b815260206004820152601460248201527f496e64657820646f6573206e6f74206578697374000000000000000000000000604482015260640161071f565b805b6001612200600f5490565b61220a9190612eab565b8110156122b157600f61221e826001612e54565b8154811061223c57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600f80546001600160a01b03909216918390811061227657634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055806122a981612ef2565b9150506121f5565b50600f80548061093357634e487b7160e01b600052603160045260246000fd5b6000546001600160a01b031633146123195760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b0381166123955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161071f565b61239e816123fd565b50565b6000546001600160a01b031633146123e95760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6121556001600160a01b0383168483612795565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b0381166124cd5760405162461bcd60e51b815260206004820152602260248201527f496e76616c6964207061697220666f722072656d6f76696e676c69717569646960448201527f7479000000000000000000000000000000000000000000000000000000000000606482015260840161071f565b6040516370a0823160e01b815230600482015261255190859081906001600160a01b038516906370a082319060240160206040518083038186803b15801561251457600080fd5b505afa158015612528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254c9190612d28565b6127fc565b6040517f89afcb4400000000000000000000000000000000000000000000000000000000815230600482015260009081906001600160a01b038416906389afcb44906024016040805180830381600087803b1580156125af57600080fd5b505af11580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e79190612d40565b9097909650945050505050565b60008061260185856128ca565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561264057600080fd5b505afa158015612654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126789190612cc2565b5091509150866001600160a01b0316836001600160a01b03161461269857905b6000806126c68a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff166128fb565b9050886001600160a01b0316856001600160a01b0316146126e357905b6126ee89888c6127fc565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f906127469085908590309060248101612e1c565b600060405180830381600087803b15801561276057600080fd5b505af1158015612774573d6000803e3d6000fd5b505050508181116127855781612787565b805b9a9950505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261215590849061294c565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561284657600080fd5b505af115801561285a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287e9190612ca2565b6121555760405162461bcd60e51b815260206004820181905260248201527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604482015260640161071f565b600080826001600160a01b0316846001600160a01b0316106128ed5782846128f0565b83835b915091509250929050565b60008061290a856103e5612e8c565b905060006129188483612e8c565b9050600082612929876103e8612e8c565b6129339190612e54565b905061293f8183612e6c565b93505050505b9392505050565b60006129a1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a319092919063ffffffff16565b80519091501561215557808060200190518101906129bf9190612ca2565b6121555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161071f565b6060612a408484600085612a48565b949350505050565b606082471015612ac05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161071f565b843b612b0e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161071f565b600080866001600160a01b03168587604051612b2a9190612ded565b60006040518083038185875af1925050503d8060008114612b67576040519150601f19603f3d011682016040523d82523d6000602084013e612b6c565b606091505b5091509150612b7c828286612b87565b979650505050505050565b60608315612b96575081612945565b825115612ba65782518084602001fd5b8160405162461bcd60e51b815260040161071f9190612e09565b80516dffffffffffffffffffffffffffff81168114612bde57600080fd5b919050565b600060208284031215612bf4578081fd5b813561294581612f23565b60008060408385031215612c11578081fd5b8235612c1c81612f23565b946020939093013593505050565b60008060408385031215612c3c578182fd5b8235612c4781612f23565b91506020830135612c5781612f23565b809150509250929050565b600080600060608486031215612c76578081fd5b8335612c8181612f23565b92506020840135612c9181612f23565b929592945050506040919091013590565b600060208284031215612cb3578081fd5b81518015158114612945578182fd5b600080600060608486031215612cd6578283fd5b612cdf84612bc0565b9250612ced60208501612bc0565b9150604084015163ffffffff81168114612d05578182fd5b809150509250925092565b600060208284031215612d21578081fd5b5035919050565b600060208284031215612d39578081fd5b5051919050565b60008060408385031215612d52578182fd5b505080516020909101519092909150565b600080600060608486031215612d77578283fd5b83359250602084013591506040840135612d0581612f23565b60008060008060808587031215612da5578081fd5b5050823594602084013594506040840135936060013592509050565b60008151808452612dd9816020860160208601612ec2565b601f01601f19169290920160200192915050565b60008251612dff818460208701612ec2565b9190910192915050565b6020815260006129456020830184612dc1565b8481528360208201526001600160a01b0383166040820152608060608201526000612e4a6080830184612dc1565b9695505050505050565b60008219821115612e6757612e67612f0d565b500190565b600082612e8757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612ea657612ea6612f0d565b500290565b600082821015612ebd57612ebd612f0d565b500390565b60005b83811015612edd578181015183820152602001612ec5565b83811115612eec576000848401525b50505050565b6000600019821415612f0657612f06612f0d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461239e57600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ea1ecbe7cd9a3d5ff49004cadeb4558910d23b0470d4e74f3fb32477ffe4a5e764736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102525760003560e01c80638da5cb5b11610138578063bc1080bd116100b0578063eb1dd3041161007f578063f2fde38b11610064578063f2fde38b1461063b578063f5537ede1461065b578063f8d65fdb1461067b57600080fd5b8063eb1dd304146105fb578063ee9761691461061b57600080fd5b8063bc1080bd14610585578063cda3c5af146105a5578063d2aa23e0146105c5578063d9e7a836146105e557600080fd5b8063a88dbb3611610107578063abaa9916116100ec578063abaa991614610530578063b14f2a3914610545578063b214cc031461056557600080fd5b8063a88dbb36146104fb578063aa6ca8081461051b57600080fd5b80638da5cb5b1461047d57806391cca3db1461049b57806393c78673146104bb57806394722397146104db57600080fd5b80633fa68a35116101cb578063715018a61161019a5780637b1ef33b1161017f5780637b1ef33b1461041d57806388a8c95c1461043d578063895065541461045d57600080fd5b8063715018a6146103e857806377db2c17146103fd57600080fd5b80633fa68a35146103725780634f64b2be1461038857806352c84306146103a857806361d027b3146103c857600080fd5b80631bb5e2dc116102225780632e44715d116102075780632e44715d14610327578063368acb091461033c5780633ad3bfa81461035257600080fd5b80631bb5e2dc146102f15780632b3459641461031157600080fd5b806285ae2b1461025e578063042950161461029b5780631224abfb146102bd5780631595eb0b146102dc57600080fd5b3661025957005b600080fd5b34801561026a57600080fd5b5061027e610279366004612d10565b6106b1565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102a757600080fd5b506102bb6102b6366004612d90565b6106db565b005b3480156102c957600080fd5b506010545b604051908152602001610292565b3480156102e857600080fd5b50600f546102ce565b3480156102fd57600080fd5b5061027e61030c366004612d10565b6107ac565b34801561031d57600080fd5b506102ce600b5481565b34801561033357600080fd5b50600e546102ce565b34801561034857600080fd5b506102ce600a5481565b34801561035e57600080fd5b506102bb61036d366004612d10565b6107bc565b34801561037e57600080fd5b506102ce600c5481565b34801561039457600080fd5b5061027e6103a3366004612d10565b610958565b3480156103b457600080fd5b506102bb6103c3366004612c2a565b610968565b3480156103d457600080fd5b5060085461027e906001600160a01b031681565b3480156103f457600080fd5b506102bb610af8565b34801561040957600080fd5b506102bb610418366004612be3565b610b4c565b34801561042957600080fd5b5061027e610438366004612d10565b610c4c565b34801561044957600080fd5b506102bb610458366004612be3565b610c5c565b34801561046957600080fd5b506102bb610478366004612c2a565b610d1c565b34801561048957600080fd5b506000546001600160a01b031661027e565b3480156104a757600080fd5b5060095461027e906001600160a01b031681565b3480156104c757600080fd5b506102bb6104d6366004612d10565b610e5f565b3480156104e757600080fd5b506102bb6104f6366004612be3565b610fd6565b34801561050757600080fd5b5060015461027e906001600160a01b031681565b34801561052757600080fd5b506011546102ce565b34801561053c57600080fd5b506102bb6110ec565b34801561055157600080fd5b506102bb610560366004612be3565b611c4d565b34801561057157600080fd5b506102bb610580366004612be3565b611d0d565b34801561059157600080fd5b506102bb6105a0366004612d63565b611e0d565b3480156105b157600080fd5b5060075461027e906001600160a01b031681565b3480156105d157600080fd5b506102bb6105e0366004612be3565b611faa565b3480156105f157600080fd5b506102ce600d5481565b34801561060757600080fd5b506102bb610616366004612bff565b61206a565b34801561062757600080fd5b506102bb610636366004612d10565b61215a565b34801561064757600080fd5b506102bb610656366004612be3565b6122d1565b34801561066757600080fd5b506102bb610676366004612c62565b6123a1565b34801561068757600080fd5b5061027e610696366004612be3565b6012602052600090815260409020546001600160a01b031681565b600e81815481106106c157600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146107285760405162461bcd60e51b81526020600482018190526024820152600080516020612f3983398151915260448201526064015b60405180910390fd5b80826107348587612e54565b61073e9190612e54565b6107489190612e54565b612710146107985760405162461bcd60e51b815260206004820152601460248201527f4d7573742061646420757020746f203130303030000000000000000000000000604482015260640161071f565b600a93909355600b91909155600c55600d55565b601081815481106106c157600080fd5b6000546001600160a01b031633146108045760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b600e5481106108555760405162461bcd60e51b815260206004820152601460248201527f496e64657820646f6573206e6f74206578697374000000000000000000000000604482015260640161071f565b805b6001610862600e5490565b61086c9190612eab565b81101561091357600e610880826001612e54565b8154811061089e57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600e80546001600160a01b0390921691839081106108d857634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061090b81612ef2565b915050610857565b50600e80548061093357634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b031916905501905550565b601181815481106106c157600080fd5b6000546001600160a01b031633146109b05760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038216610a2b5760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420616464206120746f6b656e2077697468207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161071f565b6001600160a01b038116610a915760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f74206164642061204c5020746f6b656e2077697468207a65726f206044820152666164647265737360c81b606482015260840161071f565b60118054600181019091557f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680180546001600160a01b039384166001600160a01b031991821681179092556000918252601260205260409091208054929093169116179055565b6000546001600160a01b03163314610b405760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b610b4a60006123fd565b565b6000546001600160a01b03163314610b945760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038116610bfa5760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f742061646420612079616b53747261742077697468207a65726f206044820152666164647265737360c81b606482015260840161071f565b600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b0392909216919091179055565b600f81815481106106c157600080fd5b6000546001600160a01b03163314610ca45760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038116610cfa5760405162461bcd60e51b815260206004820152601a60248201527f4465762063616e6e6f74206265207a65726f2061646472657373000000000000604482015260640161071f565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610d645760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b0382811660009081526012602052604090205416610dcb5760405162461bcd60e51b815260206004820152601360248201527f5377617020646f6573206e6f7420657869737400000000000000000000000000604482015260640161071f565b6001600160a01b038116610e315760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f74206164642061204c5020746f6b656e2077697468207a65726f206044820152666164647265737360c81b606482015260840161071f565b6001600160a01b03918216600090815260126020526040902080546001600160a01b03191691909216179055565b6000546001600160a01b03163314610ea75760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6010548110610ef85760405162461bcd60e51b815260206004820152601460248201527f496e64657820646f6573206e6f74206578697374000000000000000000000000604482015260640161071f565b805b6001610f0560105490565b610f0f9190612eab565b811015610fb6576010610f23826001612e54565b81548110610f4157634e487b7160e01b600052603260045260246000fd5b600091825260209091200154601080546001600160a01b039092169183908110610f7b57634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580610fae81612ef2565b915050610efa565b50601080548061093357634e487b7160e01b600052603160045260246000fd5b6000546001600160a01b0316331461101e5760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b03811661109a5760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f742061646420612062616e6b2077697468207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161071f565b600e80546001810182556000919091527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0392909216919091179055565b33321461113b5760405162461bcd60e51b815260206004820152601760248201527f4f72636141646465723a206d7573742075736520454f41000000000000000000604482015260640161071f565b60005b600e548110156113bb576000600e828154811061116b57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f19190612d28565b11156113a8576040517f2f745c59000000000000000000000000000000000000000000000000000000008152306004820152600060248201819052906001600160a01b03831690632f745c599060440160206040518083038186803b15801561125957600080fd5b505afa15801561126d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112919190612d28565b6040517fd4a9b2c5000000000000000000000000000000000000000000000000000000008152600481018290529091506000906001600160a01b0384169063d4a9b2c59060240160206040518083038186803b1580156112f057600080fd5b505afa158015611304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113289190612d28565b6040517f767a7b0500000000000000000000000000000000000000000000000000000000815260048101849052602481018290529091506001600160a01b0384169063767a7b0590604401600060405180830381600087803b15801561138d57600080fd5b505af11580156113a1573d6000803e3d6000fd5b5050505050505b50806113b381612ef2565b91505061113e565b5060005b600f54811015611501576000600f82815481106113ec57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561143a57600080fd5b505afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114729190612d28565b90506127108111156114ec576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b1580156114d957600080fd5b505af19250505080156114ea575060015b505b505080806114f990612ef2565b9150506113bf565b5060005b6010548110156116125760006010828154811061153257634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b15801561158057600080fd5b505afa158015611594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b89190612d28565b11156115ff576115fc601083815481106115e257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031661244d565b50505b508061160a81612ef2565b915050611505565b5060005b60115481101561176f5760006011828154811061164357634e487b7160e01b600052603260045260246000fd5b6000918252602082200154601180546001600160a01b0390921693506012918391908690811061168357634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054169050801561175a576040516370a0823160e01b81523060048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156116f857600080fd5b505afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117309190612d28565b90506127108111156117585760035461175690829085906001600160a01b0316856125f4565b505b505b5050808061176790612ef2565b915050611616565b50600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156117b957600080fd5b505afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f19190612d28565b111561189a57600480546040516370a0823160e01b81523092810192909252611898916001600160a01b03909116906370a082319060240160206040518083038186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118799190612d28565b6004546003546006546001600160a01b039283169291821691166125f4565b505b600354604080517fd0e30db0000000000000000000000000000000000000000000000000000000008152905147926001600160a01b03169163d0e30db091849160048082019260009290919082900301818588803b1580156118fb57600080fd5b505af115801561190f573d6000803e3d6000fd5b50506003546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a08231915060240160206040518083038186803b15801561195a57600080fd5b505afa15801561196e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119929190612d28565b90506000612710600d54836119a79190612e8c565b6119b19190612e6c565b90506000612710600d546127106119c89190612eab565b6119d29085612e8c565b6119dc9190612e6c565b600354600254600554929350611a039285926001600160a01b0390811692811691166125f4565b50600354600454600654611a299284926001600160a01b039182169290821691166125f4565b506001546002546040516370a0823160e01b8152306004820152611ac1926001600160a01b039081169216906370a082319060240160206040518083038186803b158015611a7657600080fd5b505afa158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae9190612d28565b6002546001600160a01b03169190612795565b600480546040516370a0823160e01b815230928101929092526000916001600160a01b03909116906370a082319060240160206040518083038186803b158015611b0a57600080fd5b505afa158015611b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b429190612d28565b600754600d54919250611b91916001600160a01b0390911690611b6790612710612eab565b600c54611b749085612e8c565b611b7e9190612e6c565b6004546001600160a01b03169190612795565b600854600d54611bbe916001600160a01b031690611bb190612710612eab565b600a54611b749085612e8c565b600954600480546040516370a0823160e01b81523092810192909252611c46926001600160a01b03908116929116906370a082319060240160206040518083038186803b158015611c0e57600080fd5b505afa158015611c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7e9190612d28565b5050505050565b6000546001600160a01b03163314611c955760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038116611ceb5760405162461bcd60e51b815260206004820152601f60248201527f54726561737572792063616e6e6f74206265207a65726f206164647265737300604482015260640161071f565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611d555760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b038116611dbb5760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f74206164642061204c5020746f6b656e2077697468207a65726f206044820152666164647265737360c81b606482015260840161071f565b601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611e555760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b600e548310611ea65760405162461bcd60e51b815260206004820152601360248201527f42616e6b20646f6573206e6f7420657869737400000000000000000000000000604482015260640161071f565b6001600160a01b038116611efc5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74207472616e7366657220746f207a65726f206164647265737300604482015260640161071f565b600e8381548110611f1d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517f3e61facd000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03838116602483015290911690633e61facd90604401600060405180830381600087803b158015611f8d57600080fd5b505af1158015611fa1573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b03163314611ff25760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b0381166120485760405162461bcd60e51b815260206004820152601e60248201527f53656166756e642063616e6e6f74206265207a65726f20616464726573730000604482015260640161071f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146120b25760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146120ff576040519150601f19603f3d011682016040523d82523d6000602084013e612104565b606091505b50509050806121555760405162461bcd60e51b815260206004820152601360248201527f6661696c656420746f2073656e64206176617800000000000000000000000000604482015260640161071f565b505050565b6000546001600160a01b031633146121a25760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b600f5481106121f35760405162461bcd60e51b815260206004820152601460248201527f496e64657820646f6573206e6f74206578697374000000000000000000000000604482015260640161071f565b805b6001612200600f5490565b61220a9190612eab565b8110156122b157600f61221e826001612e54565b8154811061223c57634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600f80546001600160a01b03909216918390811061227657634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055806122a981612ef2565b9150506121f5565b50600f80548061093357634e487b7160e01b600052603160045260246000fd5b6000546001600160a01b031633146123195760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6001600160a01b0381166123955760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161071f565b61239e816123fd565b50565b6000546001600160a01b031633146123e95760405162461bcd60e51b81526020600482018190526024820152600080516020612f39833981519152604482015260640161071f565b6121556001600160a01b0383168483612795565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b0381166124cd5760405162461bcd60e51b815260206004820152602260248201527f496e76616c6964207061697220666f722072656d6f76696e676c69717569646960448201527f7479000000000000000000000000000000000000000000000000000000000000606482015260840161071f565b6040516370a0823160e01b815230600482015261255190859081906001600160a01b038516906370a082319060240160206040518083038186803b15801561251457600080fd5b505afa158015612528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254c9190612d28565b6127fc565b6040517f89afcb4400000000000000000000000000000000000000000000000000000000815230600482015260009081906001600160a01b038416906389afcb44906024016040805180830381600087803b1580156125af57600080fd5b505af11580156125c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e79190612d40565b9097909650945050505050565b60008061260185856128ca565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561264057600080fd5b505afa158015612654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126789190612cc2565b5091509150866001600160a01b0316836001600160a01b03161461269857905b6000806126c68a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff166128fb565b9050886001600160a01b0316856001600160a01b0316146126e357905b6126ee89888c6127fc565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f906127469085908590309060248101612e1c565b600060405180830381600087803b15801561276057600080fd5b505af1158015612774573d6000803e3d6000fd5b505050508181116127855781612787565b805b9a9950505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261215590849061294c565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561284657600080fd5b505af115801561285a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287e9190612ca2565b6121555760405162461bcd60e51b815260206004820181905260248201527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604482015260640161071f565b600080826001600160a01b0316846001600160a01b0316106128ed5782846128f0565b83835b915091509250929050565b60008061290a856103e5612e8c565b905060006129188483612e8c565b9050600082612929876103e8612e8c565b6129339190612e54565b905061293f8183612e6c565b93505050505b9392505050565b60006129a1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612a319092919063ffffffff16565b80519091501561215557808060200190518101906129bf9190612ca2565b6121555760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161071f565b6060612a408484600085612a48565b949350505050565b606082471015612ac05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161071f565b843b612b0e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161071f565b600080866001600160a01b03168587604051612b2a9190612ded565b60006040518083038185875af1925050503d8060008114612b67576040519150601f19603f3d011682016040523d82523d6000602084013e612b6c565b606091505b5091509150612b7c828286612b87565b979650505050505050565b60608315612b96575081612945565b825115612ba65782518084602001fd5b8160405162461bcd60e51b815260040161071f9190612e09565b80516dffffffffffffffffffffffffffff81168114612bde57600080fd5b919050565b600060208284031215612bf4578081fd5b813561294581612f23565b60008060408385031215612c11578081fd5b8235612c1c81612f23565b946020939093013593505050565b60008060408385031215612c3c578182fd5b8235612c4781612f23565b91506020830135612c5781612f23565b809150509250929050565b600080600060608486031215612c76578081fd5b8335612c8181612f23565b92506020840135612c9181612f23565b929592945050506040919091013590565b600060208284031215612cb3578081fd5b81518015158114612945578182fd5b600080600060608486031215612cd6578283fd5b612cdf84612bc0565b9250612ced60208501612bc0565b9150604084015163ffffffff81168114612d05578182fd5b809150509250925092565b600060208284031215612d21578081fd5b5035919050565b600060208284031215612d39578081fd5b5051919050565b60008060408385031215612d52578182fd5b505080516020909101519092909150565b600080600060608486031215612d77578283fd5b83359250602084013591506040840135612d0581612f23565b60008060008060808587031215612da5578081fd5b5050823594602084013594506040840135936060013592509050565b60008151808452612dd9816020860160208601612ec2565b601f01601f19169290920160200192915050565b60008251612dff818460208701612ec2565b9190910192915050565b6020815260006129456020830184612dc1565b8481528360208201526001600160a01b0383166040820152608060608201526000612e4a6080830184612dc1565b9695505050505050565b60008219821115612e6757612e67612f0d565b500190565b600082612e8757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612ea657612ea6612f0d565b500290565b600082821015612ebd57612ebd612f0d565b500390565b60005b83811015612edd578181015183820152602001612ec5565b83811115612eec576000848401525b50505050565b6000600019821415612f0657612f06612f0d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461239e57600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ea1ecbe7cd9a3d5ff49004cadeb4558910d23b0470d4e74f3fb32477ffe4a5e764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBank(address)": {
        "params": {
          "bank": "The address of the bank"
        }
      },
      "addLPToken(address)": {
        "params": {
          "lp": "The address of the LP token"
        }
      },
      "addSwapLP(address,address)": {
        "params": {
          "lp": "The address of the LP token"
        }
      },
      "addYakStrat(address)": {
        "params": {
          "yak": "The address of the yak"
        }
      },
      "changeDev(address)": {
        "params": {
          "_dev": "The address of the LP token"
        }
      },
      "changeDistributionRatio(uint256,uint256,uint256,uint256)": {
        "params": {
          "_devAmount": "The dev amount",
          "_podAmount": "The pod amount",
          "_seafundAmount": "The seafund amount",
          "_treasuryAmount": "The treasury amount"
        }
      },
      "changeSeafund(address)": {
        "params": {
          "_seafund": "The address of the LP token"
        }
      },
      "changeTreasury(address)": {
        "params": {
          "_treasury": "The address of the LP token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeBank(uint256)": {
        "params": {
          "bankIndex": "The index of the bank"
        }
      },
      "removeLPToken(uint256)": {
        "params": {
          "lpIndex": "The index of the LP token"
        }
      },
      "removeYakStrat(uint256)": {
        "params": {
          "yakIndex": "The index of the yak token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "replaceSwapLP(address,address)": {
        "params": {
          "token": "The i"
        }
      },
      "transferAvax(address,uint256)": {
        "params": {
          "_amount": "The amount to send",
          "_to": "The address to send it to"
        }
      },
      "transferBankVault(uint256,uint256,address)": {
        "params": {
          "bank": "The bank id",
          "to": "who you're transfering it to",
          "vault": "the vault id"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferToken(address,address,uint256)": {
        "params": {
          "_amount": "The amount to send",
          "_to": "The address to send it to",
          "_token": "The token to send"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBank(address)": {
        "notice": "Adds a bank that this can get fees from"
      },
      "addLPToken(address)": {
        "notice": "Adds a LP token, to allow transfering"
      },
      "addSwapLP(address,address)": {
        "notice": "Adds a LP token, to allow transfering"
      },
      "addYakStrat(address)": {
        "notice": "Adds a yield yak token, to allow withdrawing"
      },
      "allocate()": {
        "notice": "For allocating the revenue to the correct locations."
      },
      "changeDev(address)": {
        "notice": "Adds a LP token, to allow transfering"
      },
      "changeDistributionRatio(uint256,uint256,uint256,uint256)": {
        "notice": "Changes distribution ratio"
      },
      "changeSeafund(address)": {
        "notice": "Adds a LP token, to allow transfering"
      },
      "changeTreasury(address)": {
        "notice": "Adds a LP token, to allow transfering"
      },
      "constructor": {
        "notice": "Initializes the Adder. We are doing proxy here as we might add seperate fees that need to be converted later. Easier than changing treasuries over."
      },
      "getBankCount()": {
        "notice": "Gets the numbers of banks this account controls"
      },
      "getLPTokens()": {
        "notice": "Gets the number of LP tokens this account controls"
      },
      "getTokens()": {
        "notice": "Gets the number of tokens this account controls"
      },
      "getYakCount()": {
        "notice": "Gets the number of yield yak banks (tokens) this account controls"
      },
      "removeBank(uint256)": {
        "notice": "removes a bank after being added"
      },
      "removeLPToken(uint256)": {
        "notice": "removes a bank after being added"
      },
      "removeYakStrat(uint256)": {
        "notice": "removes a bank after being added"
      },
      "replaceSwapLP(address,address)": {
        "notice": "removes a bank after being added"
      },
      "transferAvax(address,uint256)": {
        "notice": "Safe function to ensure we can emergency remove things"
      },
      "transferBankVault(uint256,uint256,address)": {
        "notice": "for transfering treasury bank vault. Only use if changing contracts."
      },
      "transferToken(address,address,uint256)": {
        "notice": "Safe function to ensure we can emergency remove things"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4266,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10939,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "pod",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)5519"
      },
      {
        "astId": 10942,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "orca",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)5519"
      },
      {
        "astId": 10945,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "wavax",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWAVAX)18658"
      },
      {
        "astId": 10948,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "usdc",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)5519"
      },
      {
        "astId": 10950,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "orcaLP",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 10952,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "usdcLP",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10954,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "seafund",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10956,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10958,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "dev",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 10960,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "treasuryAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10962,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "devAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10964,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "seafundAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 10966,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "podAmount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10969,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "banks",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10972,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "yakStrats",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10975,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "lpTokens",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10978,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "tokens",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10982,
        "contract": "apps/avai/src/contracts/OrcaAdder.sol:OrcaAdder",
        "label": "swapLPs",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)5519": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IWAVAX)18658": {
        "encoding": "inplace",
        "label": "contract IWAVAX",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}